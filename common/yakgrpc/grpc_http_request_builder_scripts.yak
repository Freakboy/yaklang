pluginName = "被动指纹检测"
ctx = context.Background()
reqs = [{"RawHTTPRequest": b`GET / HTTP/1.1
Host: www.example.com
`, "IsHttps": true}]

if getParams("REQUESTS") != undefined {
    reqs = getParams("REQUESTS")
    ctx = getParams("CTX")
    pluginName = getParams("PLUGIN_NAME")
}

/*
Init Yakit
*/
yakit.AutoInitYakit()
yakit.Info("Start to load plugin: %v", pluginName)

caller, err := hook.NewMixPluginCaller()
if err != nil { die(err) }
err = caller.LoadPlugin(pluginName)
if err != nil { die(err) }
caller.SetCache(false)
caller.SetConcurrent(len(reqs))

swg = sync.NewSizedWaitGroup(10)
filter = str.NewFilter()
for req in reqs {
    reqHash = codec.Sha256(sprintf("%v:%v", req.IsHttps, req.RawHTTPRequest))
    if filter.Exist(reqHash) {
        continue
    }
    filter.Insert(reqHash)

    swg.Add()
    req := req
    go fn {
        defer swg.Done()
        try {
            rspIns, _ := poc.HTTPEx(req.RawHTTPRequest, poc.https(req.IsHttps))~
            rsp = rspIns.RawPacket
            reqRaw = rspIns.RedirectRawPackets[-1].Request
            println("---------------------")
            println(string(reqRaw))
            println(string(rsp))
            println("---------------------")
            isHttps = req.IsHttps

            u = str.ExtractURLFromHTTPRequestRaw(reqRaw, isHttps /*type: bool*/)~
            header, body = poc.Split(rsp)~
            caller.MirrorHTTPFlow(isHttps, u.String(), reqRaw, rsp, body)
        } catch err {
            println("===================packet=================== \n%v" % string(req.RawHTTPRequest))
            log.warn("exec request failed: %v", err)
        }
    }
}
swg.Wait()
caller.Wait()