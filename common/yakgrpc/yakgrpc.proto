// merge multiple proto files, DO NOT EDIT.

syntax = "proto3";

package ypb;
option go_package = "/;ypb";

service Yak {
    rpc HTTPRequestAnalyzer(HTTPRequestAnalysisMaterial) returns (HTTPRequestAnalysis) {
    }

    rpc QueryPorts(QueryPortsRequest) returns (QueryPortsResponse) {
    }

    rpc DeletePorts(DeletePortsRequest) returns (Empty) {
    }

    rpc QueryHosts(QueryHostsRequest) returns (QueryHostsResponse) {
    }

    rpc DeleteHosts(DeleteHostsRequest) returns (Empty) {
    }

    rpc QueryDomains(QueryDomainsRequest) returns (QueryDomainsResponse) {
    }

    rpc DeleteDomains(DeleteDomainsRequest) returns (Empty) {
    }

    rpc QueryPortsGroup(Empty) returns (QueryPortsGroupResponse) {
    }

    rpc AttachCombinedOutput(AttachCombinedOutputRequest) returns (stream ExecResult) {
    }

    rpc SaveTextToTemporalFile(SaveTextToTemporalFileRequest) returns (SaveTextToTemporalFileResponse) {
    }

    rpc StartBrute(StartBruteParams) returns (stream ExecResult) {
    }

    rpc GetAvailableBruteTypes(Empty) returns (GetAvailableBruteTypesResponse) {
    }

    rpc ImportChaosMakerRules(ImportChaosMakerRulesRequest) returns (Empty) {
    }

    rpc QueryChaosMakerRule(QueryChaosMakerRuleRequest) returns (QueryChaosMakerRuleResponse) {
    }

    rpc DeleteChaosMakerRuleByID(DeleteChaosMakerRuleByIDRequest) returns (Empty) {
    }

    rpc ExecuteChaosMakerRule(ExecuteChaosMakerRuleRequest) returns (stream ExecResult) {
    }

    rpc IsRemoteAddrAvailable(IsRemoteAddrAvailableRequest) returns (IsRemoteAddrAvailableResponse) {
    }

    rpc Codec(CodecRequest) returns (CodecResponse) {
    }

    rpc AutoDecode(AutoDecodeRequest) returns (AutoDecodeResponse) {
    }

    rpc GetYakitCompletionRaw(Empty) returns (YakitCompletionRawResponse) {
    }

    rpc GetYakVMBuildInMethodCompletion(GetYakVMBuildInMethodCompletionRequest) returns (GetYakVMBuildInMethodCompletionResponse) {
    }

    rpc StaticAnalyzeError(StaticAnalyzeErrorRequest) returns (StaticAnalyzeErrorResponse) {
    }

    rpc YaklangCompileAndFormat(YaklangCompileAndFormatRequest) returns (YaklangCompileAndFormatResponse) {
    }

    rpc StartBasicCrawler(StartBasicCrawlerRequest) returns (ExecResult) {
    }

    rpc ViewBasicCrawlerCode(Empty) returns (SimpleScript) {
    }

    rpc GenerateWebsiteTree(GenerateWebsiteTreeRequest) returns (GenerateWebsiteTreeResponse) {
    }

    rpc IsCVEDatabaseReady(IsCVEDatabaseReadyRequest) returns (IsCVEDatabaseReadyResponse) {
    }

    rpc UpdateCVEDatabase(UpdateCVEDatabaseRequest) returns (stream ExecResult) {
    }

    rpc ExportsProfileDatabase(ExportsProfileDatabaseRequest) returns (stream ExecResult) {
    }

    rpc ImportsProfileDatabase(ImportsProfileDatabaseRequest) returns (stream ExecResult) {
    }

    rpc QueryCVE(QueryCVERequest) returns (QueryCVEResponse) {
    }

    rpc GetCVE(GetCVERequest) returns (CVEDetailEx) {
    }

    rpc HTTPRequestBuilder(HTTPRequestBuilderParams) returns (HTTPRequestBuilderResponse) {
    }

    rpc DebugPlugin(DebugPluginRequest) returns (stream ExecResult) {
    }

    rpc SmokingEvaluatePlugin(SmokingEvaluatePluginRequest) returns (SmokingEvaluatePluginResponse) {
    }

    rpc SaveMarkdownDocument(SaveMarkdownDocumentRequest) returns (Empty) {
    }

    rpc GetMarkdownDocument(GetMarkdownDocumentRequest) returns (GetMarkdownDocumentResponse) {
    }

    rpc DeleteMarkdownDocument(GetMarkdownDocumentRequest) returns (Empty) {
    }

    rpc Exec(ExecRequest) returns (stream ExecResult) {
    }

    rpc QueryExecHistory(ExecHistoryRequest) returns (ExecHistoryRecordResponse) {
    }

    rpc RemoveExecHistory(Empty) returns (Empty) {
    }

    rpc LoadNucleiTemplates(Empty) returns (Empty) {
    }

    rpc AutoUpdateYakModule(Empty) returns (stream ExecResult) {
    }

    rpc ExecYakScript(ExecRequest) returns (stream ExecResult) {
    }

    rpc ExecBatchYakScript(ExecBatchYakScriptRequest) returns (stream ExecBatchYakScriptResult) {
    }

    rpc GetExecBatchYakScriptUnfinishedTask(Empty) returns (GetExecBatchYakScriptUnfinishedTaskResponse) {
    }

    rpc GetExecBatchYakScriptUnfinishedTaskByUid(GetExecBatchYakScriptUnfinishedTaskByUidRequest) returns (ExecBatchYakScriptRequest) {
    }

    rpc PopExecBatchYakScriptUnfinishedTaskByUid(GetExecBatchYakScriptUnfinishedTaskByUidRequest) returns (ExecBatchYakScriptRequest) {
    }

    rpc RecoverExecBatchYakScriptUnfinishedTask(RecoverExecBatchYakScriptUnfinishedTaskRequest) returns (stream ExecBatchYakScriptResult) {
    }

    rpc ExecutePacketYakScript(ExecutePacketYakScriptParams) returns (stream ExecResult) {
    }

    rpc ExecuteBatchPacketYakScript(ExecuteBatchPacketYakScriptParams) returns (stream ExecBatchYakScriptResult) {
    }

    rpc ExecPacketScan(ExecPacketScanRequest) returns (stream ExecResult) {
    }

    rpc ExecYakitPluginsByYakScriptFilter(ExecYakitPluginsByYakScriptFilterRequest) returns (stream ExecResult) {
    }

    rpc ExtractDataToFile(stream ExtractDataToFileRequest) returns (stream ExtractDataToFileResult) {
    }

    rpc StartFacades(StartFacadesParams) returns (stream ExecResult) {
    }

    rpc StartFacadesWithYsoObject(StartFacadesWithYsoParams) returns (stream ExecResult) {
    }

    rpc ApplyClassToFacades(ApplyClassToFacadesParamsWithVerbose) returns (Empty) {
    }

    rpc BytesToBase64(BytesToBase64Request) returns (BytesToBase64Response) {
    }

    rpc ConfigGlobalReverse(ConfigGlobalReverseParams) returns (stream Empty) {
    }

    rpc AvailableLocalAddr(Empty) returns (AvailableLocalAddrResponse) {
    }

    rpc GetGlobalReverseServer(Empty) returns (GetGlobalReverseServerResponse) {
    }

    rpc RegisterFacadesHTTP(RegisterFacadesHTTPRequest) returns (RegisterFacadesHTTPResponse) {
    }

    rpc GetHistoryHTTPFuzzerTask(GetHistoryHTTPFuzzerTaskRequest) returns (HistoryHTTPFuzzerTaskDetail) {
    }

    rpc QueryHistoryHTTPFuzzerTask(Empty) returns (HistoryHTTPFuzzerTasks) {
    }

    rpc QueryHistoryHTTPFuzzerTaskEx(QueryHistoryHTTPFuzzerTaskExParams) returns (HistoryHTTPFuzzerTasksResponse) {
    }

    rpc DeleteHistoryHTTPFuzzerTask(DeleteHistoryHTTPFuzzerTaskRequest) returns (Empty) {
    }

    rpc HTTPFuzzer(FuzzerRequest) returns (stream FuzzerResponse) {
    }

    rpc PreloadHTTPFuzzerParams(PreloadHTTPFuzzerParamsRequest) returns (PreloadHTTPFuzzerParamsResponse) {
    }

    rpc RenderVariables(RenderVariablesRequest) returns (RenderVariablesResponse) {
    }

    rpc MatchHTTPResponse(MatchHTTPResponseParams) returns (MatchHTTPResponseResult) {
    }

    rpc ExtractHTTPResponse(ExtractHTTPResponseParams) returns (ExtractHTTPResponseResult) {
    }

    rpc RedirectRequest(RedirectRequestParams) returns (FuzzerResponse) {
    }

    rpc HTTPRequestMutate(HTTPRequestMutateParams) returns (MutateResult) {
    }

    rpc HTTPResponseMutate(HTTPResponseMutateParams) returns (MutateResult) {
    }

    rpc FixUploadPacket(FixUploadPacketRequest) returns (FixUploadPacketResponse) {
    }

    rpc IsMultipartFormDataRequest(FixUploadPacketRequest) returns (IsMultipartFormDataRequestResult) {
    }

    rpc GenerateExtractRule(GenerateExtractRuleRequest) returns (GenerateExtractRuleResponse) {
    }

    rpc ExtractData(stream ExtractDataRequest) returns (stream ExtractDataResponse) {
    }

    rpc QueryHTTPFuzzerResponseByTaskId(QueryHTTPFuzzerResponseByTaskIdRequest) returns (QueryHTTPFuzzerResponseByTaskIdResponse) {
    }

    rpc ExtractUrl(FuzzerRequest) returns (ExtractedUrl) {
    }

    rpc ConvertFuzzerResponseToHTTPFlow(FuzzerResponse) returns (HTTPFlow) {
    }

    rpc StringFuzzer(StringFuzzerRequest) returns (StringFuzzerResponse) {
    }

    rpc SaveFuzzerLabel(SaveFuzzerLabelRequest) returns (Empty) {
    }

    rpc QueryFuzzerLabel(Empty) returns (QueryFuzzerLabelResponse) {
    }

    rpc DeleteFuzzerLabel(DeleteFuzzerLabelRequest) returns (Empty) {
    }

    rpc GenerateYakCodeByPacket(GenerateYakCodeByPacketRequest) returns (GenerateYakCodeByPacketResponse) {
    }

    rpc GenerateCSRFPocByPacket(GenerateCSRFPocByPacketRequest) returns (GenerateCSRFPocByPacketResponse) {
    }

    rpc GetHTTPFlowByHash(GetHTTPFlowByHashRequest) returns (HTTPFlow) {
    }

    rpc GetHTTPFlowById(GetHTTPFlowByIdRequest) returns (HTTPFlow) {
    }

    rpc QueryHTTPFlowByIds(GetHTTPFlowByIdsRequest) returns (HTTPFlows) {
    }

    rpc GetHTTPFlowByIds(GetHTTPFlowByIdsRequest) returns (HTTPFlows) {
    }

    rpc QueryHTTPFlows(QueryHTTPFlowRequest) returns (QueryHTTPFlowResponse) {
    }

    rpc DeleteHTTPFlows(DeleteHTTPFlowRequest) returns (Empty) {
    }

    rpc SetTagForHTTPFlow(SetTagForHTTPFlowRequest) returns (Empty) {
    }

    rpc QueryHTTPFlowsIds(QueryHTTPFlowsIdsRequest) returns (QueryHTTPFlowsIdsResponse) {
    }

    rpc HTTPFlowsFieldGroup(HTTPFlowsFieldGroupRequest) returns (HTTPFlowsFieldGroupResponse) {
    }

    rpc HTTPFlowsShare(HTTPFlowsShareRequest) returns (HTTPFlowsShareResponse) {
    }

    rpc HTTPFlowsExtract(HTTPFlowsExtractRequest) returns (Empty) {
    }

    rpc GetRequestBodyByHTTPFlowID(DownloadBodyByHTTPFlowIDRequest) returns (Bytes) {
    }

    rpc GetResponseBodyByHTTPFlowID(DownloadBodyByHTTPFlowIDRequest) returns (Bytes) {
    }

    rpc GetHTTPPacketBody(GetHTTPPacketBodyRequest) returns (Bytes) {
    }

    rpc GetLicense(Empty) returns (GetLicenseResponse) {
    }

    rpc CheckLicense(CheckLicenseRequest) returns (Empty) {
    }

    rpc AddToMenu(AddToMenuRequest) returns (Empty) {
    }

    rpc RemoveFromMenu(RemoveFromMenuRequest) returns (Empty) {
    }

    rpc YakScriptIsInMenu(YakScriptIsInMenuRequest) returns (Empty) {
    }

    rpc GetAllMenuItem(Empty) returns (MenuByGroup) {
    }

    rpc DeleteAllMenuItem(Empty) returns (Empty) {
    }

    rpc ImportMenuItem(ImportMenuItemRequest) returns (Empty) {
    }

    rpc ExportMenuItem(Empty) returns (ExportMenuItemResult) {
    }

    rpc GetMenuItemById(GetMenuItemByIdRequest) returns (MenuItem) {
    }

    rpc QueryGroupsByYakScriptId(QueryGroupsByYakScriptIdRequest) returns (GroupNames) {
    }

    rpc AddMenus(AddMenuRequest) returns (Empty) {
    }

    rpc QueryAllMenuItem(QueryAllMenuItemRequest) returns (MenuByGroup) {
    }

    rpc DeleteAllMenu(QueryAllMenuItemRequest) returns (Empty) {
    }

    rpc AddToNavigation(AddToNavigationRequest) returns (Empty) {
    }

    rpc GetAllNavigationItem(GetAllNavigationRequest) returns (GetAllNavigationItemResponse) {
    }

    rpc DeleteAllNavigation(GetAllNavigationRequest) returns (Empty) {
    }

    rpc AddOneNavigation(AddOneNavigationRequest) returns (Empty) {
    }

    rpc QueryNavigationGroups(QueryNavigationGroupsRequest) returns (GroupNames) {
    }

    rpc ResetAndInvalidUserData(ResetAndInvalidUserDataRequest) returns (Empty) {
    }

    rpc IsPrivilegedForNetRaw(Empty) returns (IsPrivilegedForNetRawResponse) {
    }

    rpc PromotePermissionForUserPcap(Empty) returns (Empty) {
    }

    rpc GetMachineID(Empty) returns (GetMachineIDResponse) {
    }

    rpc MITM(stream MITMRequest) returns (stream MITMResponse) {
    }

    rpc DownloadMITMCert(Empty) returns (MITMCert) {
    }

    rpc GetCurrentRules(Empty) returns (MITMContentReplacers) {
    }

    rpc SetCurrentRules(MITMContentReplacers) returns (Empty) {
    }

    rpc ExportMITMReplacerRules(Empty) returns (ExportMITMReplacerRulesResponse) {
    }

    rpc ImportMITMReplacerRules(ImportMITMReplacerRulesRequest) returns (Empty) {
    }

    rpc QueryMITMRuleExtractedData(QueryMITMRuleExtractedDataRequest) returns (QueryMITMRuleExtractedDataResponse) {
    }

    rpc SetMITMFilter(SetMITMFilterRequest) returns (SetMITMFilterResponse) {
    }

    rpc GetMITMFilter(Empty) returns (SetMITMFilterRequest) {
    }

    rpc GetOnlineProfile(Empty) returns (OnlineProfile) {
    }

    rpc SetOnlineProfile(OnlineProfile) returns (Empty) {
    }

    rpc DownloadOnlinePluginById(DownloadOnlinePluginByIdRequest) returns (Empty) {
    }

    rpc DownloadOnlinePluginByIds(DownloadOnlinePluginByIdsRequest) returns (Empty) {
    }

    rpc DownloadOnlinePluginAll(DownloadOnlinePluginByTokenRequest) returns (stream DownloadOnlinePluginProgress) {
    }

    rpc DeletePluginByUserID(DeletePluginByUserIDRequest) returns (Empty) {
    }

    rpc DeleteAllLocalPlugins(Empty) returns (Empty) {
    }

    rpc GetYakScriptTagsAndType(Empty) returns (GetYakScriptTagsAndTypeResponse) {
    }

    rpc DeleteLocalPluginsByWhere(DeleteLocalPluginsByWhereRequest) returns (Empty) {
    }

    rpc DownloadOnlinePluginByScriptNames(DownloadOnlinePluginByScriptNamesRequest) returns (DownloadOnlinePluginByScriptNamesResponse) {
    }

    rpc QueryPayload(QueryPayloadRequest) returns (QueryPayloadResponse) {
    }

    rpc DeletePayloadByGroup(DeletePayloadByGroupRequest) returns (Empty) {
    }

    rpc DeletePayload(DeletePayloadRequest) returns (Empty) {
    }

    rpc SavePayload(SavePayloadRequest) returns (Empty) {
    }

    rpc SavePayloadStream(SavePayloadRequest) returns (stream SavePayloadProgress) {
    }

    rpc GetAllPayloadGroup(Empty) returns (GetAllPayloadGroupResponse) {
    }

    rpc UpdatePayload(UpdatePayloadRequest) returns (Empty) {
    }

    rpc GetAllPayload(GetAllPayloadRequest) returns (GetAllPayloadResponse) {
    }

    rpc PortScan(PortScanRequest) returns (stream ExecResult) {
    }

    rpc ViewPortScanCode(Empty) returns (SimpleScript) {
    }

    rpc SimpleDetect(RecordPortScanRequest) returns (stream ExecResult) {
    }

    rpc SaveCancelSimpleDetect(RecordPortScanRequest) returns (Empty) {
    }

    rpc GetSimpleDetectUnfinishedTask(Empty) returns (GetSimpleDetectUnfinishedTaskResponse) {
    }

    rpc GetSimpleDetectUnfinishedTaskByUid(SimpleDetectYakScriptUnfinishedTaskByUidRequest) returns (RecordPortScanRequest) {
    }

    rpc PopSimpleDetectUnfinishedTaskByUid(SimpleDetectYakScriptUnfinishedTaskByUidRequest) returns (RecordPortScanRequest) {
    }

    rpc RecoverSimpleDetectUnfinishedTask(SimpleDetectYakScriptUnfinishedTaskByUidRequest) returns (stream ExecResult) {
    }

    rpc SetCurrentProject(SetCurrentProjectRequest) returns (Empty) {
    }

    rpc GetCurrentProject(Empty) returns (ProjectDescription) {
    }

    rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse) {
    }

    rpc NewProject(NewProjectRequest) returns (NewProjectResponse) {
    }

    rpc IsProjectNameValid(IsProjectNameValidRequest) returns (Empty) {
    }

    rpc RemoveProject(RemoveProjectRequest) returns (Empty) {
    }

    rpc DeleteProject(DeleteProjectRequest) returns (Empty) {
    }

    rpc GetDefaultProject(Empty) returns (ProjectDescription) {
    }

    rpc QueryProjectDetail(QueryProjectDetailRequest) returns (ProjectDescription) {
    }

    rpc ExportProject(ExportProjectRequest) returns (stream ProjectIOProgress) {
    }

    rpc ImportProject(ImportProjectRequest) returns (stream ProjectIOProgress) {
    }

    rpc MigrateLegacyDatabase(Empty) returns (Empty) {
    }

    rpc GetProjectKey(GetKeyRequest) returns (GetKeyResult) {
    }

    rpc SetProjectKey(SetKeyRequest) returns (Empty) {
    }

    rpc GetEngineDefaultProxy(Empty) returns (DefaultProxyResult) {
    }

    rpc SetEngineDefaultProxy(DefaultProxyResult) returns (Empty) {
    }

    rpc QueryReports(QueryReportsRequest) returns (QueryReportsResponse) {
    }

    rpc QueryReport(QueryReportRequest) returns (Report) {
    }

    rpc DeleteReport(DeleteReportRequest) returns (Empty) {
    }

    rpc QueryAvailableReportFrom(Empty) returns (Fields) {
    }

    rpc DownloadReport(DownloadReportRequest) returns (Empty) {
    }

    rpc QueryRisks(QueryRisksRequest) returns (QueryRisksResponse) {
    }

    rpc QueryRisk(QueryRiskRequest) returns (Risk) {
    }

    rpc DeleteRisk(DeleteRiskRequest) returns (Empty) {
    }

    rpc QueryAvailableRiskType(Empty) returns (Fields) {
    }

    rpc QueryAvailableRiskLevel(Empty) returns (Fields) {
    }

    rpc QueryRiskTableStats(Empty) returns (RiskTableStats) {
    }

    rpc ResetRiskTableStats(Empty) returns (Empty) {
    }

    rpc QueryAvailableTarget(Empty) returns (Fields) {
    }

    rpc QueryNewRisk(QueryNewRiskRequest) returns (QueryNewRiskResponse) {
    }

    rpc NewRiskRead(NewRiskReadRequest) returns (Empty) {
    }

    rpc UploadRiskToOnline(UploadRiskToOnlineRequest) returns (Empty) {
    }

    rpc IsScrecorderReady(IsScrecorderReadyRequest) returns (IsScrecorderReadyResponse) {
    }

    rpc InstallScrecorder(InstallScrecorderRequest) returns (stream ExecResult) {
    }

    rpc StartScrecorder(StartScrecorderRequest) returns (stream ExecResult) {
    }

    rpc QueryScreenRecorders(QueryScreenRecorderRequest) returns (QueryScreenRecorderResponse) {
    }

    rpc DeleteScreenRecorders(QueryScreenRecorderRequest) returns (Empty) {
    }

    rpc UploadScreenRecorders(UploadScreenRecorderRequest) returns (Empty) {
    }

    rpc GetOneScreenRecorders(GetOneScreenRecorderRequest) returns (ScreenRecorder) {
    }

    rpc UpdateScreenRecorders(UpdateScreenRecorderRequest) returns (Empty) {
    }

    rpc GetKey(GetKeyRequest) returns (GetKeyResult) {
    }

    rpc SetKey(SetKeyRequest) returns (Empty) {
    }

    rpc DelKey(GetKeyRequest) returns (Empty) {
    }

    rpc GetAllProcessEnvKey(Empty) returns (GetProcessEnvKeyResult) {
    }

    rpc SetProcessEnvKey(SetKeyRequest) returns (Empty) {
    }

    rpc GetSystemProxy(Empty) returns (GetSystemProxyResult) {
    }

    rpc SetSystemProxy(SetSystemProxyRequest) returns (Empty) {
    }

    rpc GetTunnelServerExternalIP(GetTunnelServerExternalIPParams) returns (GetTunnelServerExternalIPResponse) {
    }

    rpc VerifyTunnelServerDomain(VerifyTunnelServerDomainParams) returns (VerifyTunnelServerDomainResponse) {
    }

    rpc SetYakBridgeLogServer(YakDNSLogBridgeAddr) returns (Empty) {
    }

    rpc GetCurrentYakBridgeLogServer(Empty) returns (YakDNSLogBridgeAddr) {
    }

    rpc RequireDNSLogDomain(YakDNSLogBridgeAddr) returns (DNSLogRootDomain) {
    }

    rpc QueryDNSLogByToken(QueryDNSLogByTokenRequest) returns (QueryDNSLogByTokenResponse) {
    }

    rpc RequireICMPRandomLength(Empty) returns (RequireICMPRandomLengthResponse) {
    }

    rpc QueryICMPTrigger(QueryICMPTriggerRequest) returns (QueryICMPTriggerResponse) {
    }

    rpc RequireRandomPortToken(Empty) returns (RandomPortInfo) {
    }

    rpc QueryRandomPortTrigger(QueryRandomPortTriggerRequest) returns (RandomPortTriggerNotification) {
    }

    rpc UpdateFromYakitResource(UpdateFromYakitResourceRequest) returns (Empty) {
    }

    rpc UpdateFromGithub(UpdateFromGithubRequest) returns (Empty) {
    }

    rpc IsVulinboxReady(IsVulinboxReadyRequest) returns (IsVulinboxReadyResponse) {
    }

    rpc InstallVulinbox(InstallVulinboxRequest) returns (stream ExecResult) {
    }

    rpc StartVulinbox(StartVulinboxRequest) returns (stream ExecResult) {
    }

    rpc CreateWebsocketFuzzer(stream ClientWebsocketRequest) returns (stream ClientWebsocketResponse) {
    }

    rpc QueryWebsocketFlowByHTTPFlowWebsocketHash(QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) returns (WebsocketFlows) {
    }

    rpc DeleteWebsocketFlowByHTTPFlowWebsocketHash(DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) returns (Empty) {
    }

    rpc DeleteWebsocketFlowAll(Empty) returns (Empty) {
    }

    rpc Version(Empty) returns (VersionResponse) {
    }

    rpc Echo(EchoRequest) returns (EchoResposne) {
    }

    rpc OpenPort(stream Input) returns (stream Output) {
    }

    rpc QueryYakScript(QueryYakScriptRequest) returns (QueryYakScriptResponse) {
    }

    rpc QueryYakScriptByYakScriptName(QueryYakScriptRequest) returns (stream YakScript) {
    }

    rpc SaveYakScript(YakScript) returns (YakScript) {
    }

    rpc DeleteYakScript(DeleteYakScriptRequest) returns (Empty) {
    }

    rpc GetYakScriptById(GetYakScriptByIdRequest) returns (YakScript) {
    }

    rpc GetYakScriptByName(GetYakScriptByNameRequest) returns (YakScript) {
    }

    rpc GetYakScriptByOnlineID(GetYakScriptByOnlineIDRequest) returns (YakScript) {
    }

    rpc IgnoreYakScript(DeleteYakScriptRequest) returns (Empty) {
    }

    rpc UnIgnoreYakScript(DeleteYakScriptRequest) returns (Empty) {
    }

    rpc ExportYakScript(ExportYakScriptRequest) returns (ExportYakScriptResponse) {
    }

    rpc GetYakScriptTags(Empty) returns (GetYakScriptTagsResponse) {
    }

    rpc QueryYakScriptLocalAndUser(QueryYakScriptLocalAndUserRequest) returns (QueryYakScriptLocalAndUserResponse) {
    }

    rpc QueryYakScriptByOnlineGroup(QueryYakScriptByOnlineGroupRequest) returns (QueryYakScriptLocalAndUserResponse) {
    }

    rpc QueryYakScriptLocalAll(Empty) returns (QueryYakScriptLocalAndUserResponse) {
    }

    rpc QueryYakScriptByNames(QueryYakScriptByNamesRequest) returns (QueryYakScriptByNamesResponse) {
    }

    rpc QueryYakScriptExecResult(QueryYakScriptExecResultRequest) returns (QueryYakScriptExecResultResponse) {
    }

    rpc QueryYakScriptNameInExecResult(Empty) returns (YakScriptNames) {
    }

    rpc DeleteYakScriptExecResult(DeleteYakScriptExecResultRequest) returns (Empty) {
    }

    rpc DeleteYakScriptExec(Empty) returns (Empty) {
    }

    rpc GetAvailableYakScriptTags(Empty) returns (Fields) {
    }

    rpc ForceUpdateAvailableYakScriptTags(Empty) returns (Empty) {
    }

    rpc CreateYaklangShell(stream YaklangShellRequest) returns (stream YaklangShellResponse) {
    }

    rpc GetAllYsoGadgetOptions(Empty) returns (YsoOptionsWithVerbose) {
    }

    rpc GetAllYsoClassOptions(YsoOptionsRequerstWithVerbose) returns (YsoOptionsWithVerbose) {
    }

    rpc GetAllYsoClassGeneraterOptions(YsoOptionsRequerstWithVerbose) returns (YsoClassOptionsResponseWithVerbose) {
    }

    rpc GenerateYsoCode(YsoOptionsRequerstWithVerbose) returns (YsoCodeResponse) {
    }

    rpc GenerateYsoBytes(YsoOptionsRequerstWithVerbose) returns (YsoBytesResponse) {
    }

    rpc YsoDump(YsoBytesObject) returns (YsoDumpResponse) {
    }

}
message HTTPRequestParamItem {
    string TypePosition = 1;
    string ParamOriginValue = 2;
    string ParamName = 3;
    string TypePositionVerbose = 4;

}

message HTTPRequestAnalysis {
    repeated HTTPRequestParamItem Params = 1;
    repeated string Requests = 2;
    bool IsHTTPS = 3;

}

message HTTPRequestAnalysisMaterial {
    string Request = 1;
    bool IsHTTPS = 2;
    string Response = 3;

}


message GroupList {
    string ServiceType = 1;
    string ShowServiceType = 2;
    int32 Total = 3;

}

message PortsGroup {
    string GroupName = 1;
    repeated GroupList GroupLists = 2;

}

message QueryPortsGroupResponse {
    repeated PortsGroup PortsGroupList = 1;

}

message QueryPortsRequest {
    Paging Pagination = 1;
    string Hosts = 2;
    string Ports = 3;
    string Service = 4;
    string State = 5;
    string Title = 6;
    bool All = 7;
    string Keywords = 8;
    bool TitleEffective = 9;
    string ComplexSelect = 10;
    string Proto = 11;

}

message Port {
    string Host = 1;
    int64 IPInteger = 2;
    int64 Port = 3;
    string Proto = 4;
    string ServiceType = 5;
    string State = 6;
    string Reason = 7;
    string Fingerprint = 8;
    repeated string CPE = 9;
    string HtmlTitle = 10;
    int64 Id = 11;
    int64 CreatedAt = 12;
    int64 UpdatedAt = 13;
    string TaskName = 14;

}

message QueryPortsResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated Port Data = 3;

}

message DeletePortsRequest {
    string Hosts = 1;
    string Ports = 2;
    repeated int64 Id = 3;
    bool All = 4;
    repeated int64 Ids = 5;
    bool DeleteAll = 6;
    QueryPortsRequest Filter = 7;

}

message QueryHostsRequest {
    Paging Pagination = 1;
    string DomainKeyword = 2;
    string Network = 3;

}

message Host {
    int64 Id = 1;
    string IP = 2;
    int64 IPInteger = 3;
    bool IsInPublicNet = 4;
    repeated string Domains = 5;

}

message QueryHostsResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated Host Data = 3;

}

message DeleteHostsRequest {
    bool DeleteAll = 1;
    string DomainKeyword = 2;
    string Network = 3;
    int64 ID = 4;

}

message QueryDomainsRequest {
    Paging Pagination = 1;
    string Network = 2;
    string DomainKeyword = 3;
    string Title = 4;
    bool All = 5;

}

message Domain {
    int64 ID = 1;
    string DomainName = 2;
    string IPAddr = 3;
    string HTTPTitle = 4;

}

message QueryDomainsResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated Domain Data = 3;

}

message DeleteDomainsRequest {
    bool DeleteAll = 1;
    string DomainKeyword = 2;
    string Network = 3;
    int64 ID = 4;
    QueryDomainsRequest Filter = 5;
    repeated int64 IDs = 6;

}


message AttachCombinedOutputRequest {

}

message SaveTextToTemporalFileRequest {
    bytes Text = 1;

}

message SaveTextToTemporalFileResponse {
    string FileName = 1;

}


message GetAvailableBruteTypesResponse {
    repeated string Types = 1;

}

message StartBruteParams {
    string Type = 1;
    string Targets = 2;
    string TargetFile = 3;
    repeated string Usernames = 4;
    repeated string Passwords = 5;
    repeated string Prefix = 6;
    float Timeout = 7;
    int64 Concurrent = 8;
    int64 Retry = 9;
    int64 TargetTaskConcurrent = 10;
    bool OkToStop = 11;
    int64 DelayMin = 12;
    int64 DelayMax = 13;
    string PluginScriptName = 14;
    string UsernameFile = 24;
    string PasswordFile = 25;
    bool ReplaceDefaultUsernameDict = 28;
    bool ReplaceDefaultPasswordDict = 29;

}


message IsRemoteAddrAvailableResponse {
    string Addr = 1;
    bool IsAvailable = 2;
    string Reason = 3;
    string Status = 4;

}

message IsRemoteAddrAvailableRequest {
    string Addr = 1;
    int64 Timeout = 2;
    string Probe = 3;

}

message ChaosMakerRuleGroup {
    string Title = 1;
    string Description = 2;
    string Keywords = 3;
    repeated string Protocols = 4;
    string Solution = 5;

}

message ExecuteChaosMakerRuleRequest {
    repeated ChaosMakerRuleGroup Groups = 1;
    repeated string ExtraOverrideDestinationAddress = 2;
    int64 Concurrent = 3;
    int32 TrafficDelayMinSeconds = 4;
    int32 TrafficDelayMaxSeconds = 5;
    int64 ExtraRepeat = 6;
    int64 GroupGapSeconds = 7;

}

message DeleteChaosMakerRuleByIDRequest {
    int64 Id = 1;

}

message ChaosMakerRule {
    int64 Id = 1;
    string RawTrafficBeyondIpPacketBase64 = 2;
    string RawTrafficBeyondLinkLayerBase64 = 3;
    string RawTrafficBeyondHttpBase64 = 4;
    string RuleType = 5;
    string SuricataRaw = 6;
    string Protocol = 7;
    string Action = 8;
    string Name = 9;
    string NameZh = 10;
    string ClassType = 11;
    string ClassTypeZh = 12;
    string Group = 13;
    string Keywords = 15;
    string KeywordsZh = 16;
    string Description = 17;
    string DescriptionZh = 18;
    repeated string CVE = 19;

}

message QueryChaosMakerRuleResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated ChaosMakerRule Data = 3;

}

message QueryChaosMakerRuleRequest {
    Paging Pagination = 1;
    string RuleType = 2;
    repeated string Keywords = 3;

}

message ImportChaosMakerRulesRequest {
    string Content = 1;
    string RuleType = 2;

}


message AutoDecodeResult {
    string Type = 1;
    string TypeVerbose = 2;
    bytes Origin = 3;
    bytes Result = 4;

}

message AutoDecodeResponse {
    repeated AutoDecodeResult Results = 1;

}

message AutoDecodeRequest {
    string Data = 1;

}

message CodecRequest {
    string Text = 1;
    string Type = 2;
    bool Auto = 3;
    repeated ExecParamItem Params = 4;
    string ScriptName = 5;
    bytes InputBytes = 6;

}

message CodecResponse {
    string Result = 1;

}


message StaticAnalyzeErrorResult {
    bytes Message = 1;
    int64 StartLineNumber = 2;
    int64 EndLineNumber = 3;
    int64 StartColumn = 4;
    int64 EndColumn = 5;
    bytes RawMessage = 6;
    string Severity = 7;

}

message SuggestionDescription {
    string Label = 1;
    string Description = 2;
    string InsertText = 3;
    bool JustAppend = 4;
    string DefinitionVerbose = 5;

}

message MethodSuggestion {
    repeated string ExactKeywords = 1;
    repeated string FuzzKeywords = 2;
    repeated string Regexp = 3;
    repeated SuggestionDescription Suggestions = 4;
    string Verbose = 5;

}

message GetYakVMBuildInMethodCompletionResponse {
    repeated MethodSuggestion Suggestions = 1;

}

message YaklangCompileAndFormatResponse {
    string Code = 1;
    repeated StaticAnalyzeErrorResult Errors = 2;

}

message YaklangCompileAndFormatRequest {
    string Code = 1;

}

message StaticAnalyzeErrorResponse {
    repeated StaticAnalyzeErrorResult Result = 1;

}

message StaticAnalyzeErrorRequest {
    bytes Code = 1;

}

message YakitCompletionRawResponse {
    bytes RawJson = 1;

}

message GetYakVMBuildInMethodCompletionRequest {

}


message HTTPCookie {
    string Key = 1;
    string Value = 2;
    bool AllowOverride = 3;

}

message StartBasicCrawlerRequest {
    string Targets = 1;
    string TargetsFile = 2;
    string MaxDepth = 3;
    string MaxCountOfLinks = 4;
    string MaxCountOfRequest = 5;
    string DisallowSuffix = 6;
    string StartFromParentPath = 7;
    string MaxRetryTimes = 8;
    string AllowMethods = 9;
    string AllowDomains = 10;
    string ForbiddenDomain = 11;
    string AllowUrlRegexp = 12;
    string ForbiddenUrlRegexp = 13;
    string UserAgent = 14;
    string BasicAuth = 15;
    string BasicAuthUsername = 16;
    string BasicAuthPassword = 17;
    repeated string Proxies = 18;
    int64 Concurrent = 19;
    int64 MaxRedirectTimes = 20;
    int64 ConnectTimeoutSeconds = 21;
    int64 ResponseTimeoutSeconds = 22;
    repeated HTTPHeader Headers = 23;
    repeated HTTPCookie Cookies = 24;

}

message GenerateWebsiteTreeRequest {
    string Targets = 1;

}

message GenerateWebsiteTreeResponse {
    bytes TreeDataJson = 1;

}


message CWEDetail {
    string CWE = 1;
    string Name = 2;
    string NameZh = 3;
    string Status = 5;
    bool Stable = 6;
    bool Incomplete = 7;
    string Description = 8;
    string DescriptionZh = 9;
    string LongDescription = 10;
    string LongDescriptionZh = 11;
    repeated string RelativeLanguage = 12;
    string Solution = 13;
    repeated string RelativeCVE = 14;

}

message CVEDetail {
    string CVE = 1;
    string DescriptionZh = 2;
    string DescriptionOrigin = 3;
    string Title = 4;
    string Solution = 5;
    string References = 6;
    string AccessVector = 7;
    string AccessComplexity = 8;
    string Authentication = 9;
    string ConfidentialityImpact = 10;
    string IntegrityImpact = 11;
    string AvailabilityImpact = 12;
    string Severity = 14;
    int64 PublishedAt = 15;
    string CWE = 16;
    string CVSSVersion = 17;
    string CVSSVectorString = 18;
    double BaseCVSSv2Score = 19;
    double ExploitabilityScore = 20;
    bool ObtainAllPrivileged = 21;
    bool ObtainUserPrivileged = 22;
    bool ObtainOtherPrivileged = 23;
    bool UserInteractionRequired = 24;
    string Product = 25;
    int64 UpdatedAt = 26;
    int64 LastModifiedData = 27;

}

message CVEDetailEx {
    CVEDetail CVE = 1;
    repeated CWEDetail CWE = 2;

}

message GetCVERequest {
    string CVE = 1;

}

message QueryCVEResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated CVEDetail Data = 3;

}

message QueryCVERequest {
    Paging Pagination = 1;
    string AccessVector = 2;
    string AccessComplexity = 3;
    string CWE = 4;
    string Year = 5;
    string Severity = 6;
    double Score = 7;
    string Product = 8;
    string AfterYear = 9;
    bool ChineseTranslationFirst = 10;
    string Keywords = 11;

}

message ImportsProfileDatabaseRequest {
    string LocalProfileFile = 1;

}

message ExportsProfileDatabaseRequest {
    string LocalProfileFile = 1;

}

message UpdateCVEDatabaseRequest {
    string Proxy = 1;
    bool JustUpdateLatestCVE = 2;

}

message IsCVEDatabaseReadyResponse {
    bool Ok = 1;
    string Reason = 2;
    bool ShouldUpdate = 3;

}

message IsCVEDatabaseReadyRequest {

}


message HTTPRequestBuilderParams {
    bool IsRawHTTPRequest = 1;
    bool IsHttps = 2;
    bytes RawHTTPRequest = 3;
    string Method = 4;
    repeated string Path = 6;
    repeated KVPair Headers = 7;
    repeated KVPair Cookie = 8;
    repeated KVPair GetParams = 9;
    bytes Body = 10;
    repeated KVPair PostParams = 11;
    repeated KVPair MultipartParams = 12;
    repeated KVPair MultipartFileParams = 13;

}

message SmokingEvaluatePluginRequest {
    repeated HTTPRequestBuilderParams Requests = 1;
    string PluginName = 2;
    string Code = 3;
    string PluginType = 4;

}

message SmokingEvaluateResult {
    string Item = 1;
    string Suggestion = 2;
    bytes ExtraInfo = 3;

}

message SmokingEvaluatePluginResponse {
    int64 Score = 1;
    repeated SmokingEvaluateResult Results = 2;

}

message DebugPluginRequest {
    string Code = 1;
    string PluginType = 2;
    string Input = 3;
    HTTPRequestBuilderParams HTTPRequestTemplate = 4;

}

message HTTPRequestBuilderResult {
    bool IsHttps = 1;
    string Url = 2;
    bytes HTTPRequest = 3;

}

message HTTPRequestBuilderResponse {
    repeated HTTPRequestBuilderResult Results = 1;
    string Templates = 2;

}


message GetMarkdownDocumentResponse {
    YakScript Script = 1;
    string Markdown = 2;

}

message GetMarkdownDocumentRequest {
    string YakScriptName = 1;
    int64 YakScriptId = 2;

}

message SaveMarkdownDocumentRequest {
    string YakScriptName = 1;
    int64 YakScriptId = 2;
    string Markdown = 3;

}


message ExecYakitPluginsByYakScriptFilterRequest {
    QueryYakScriptRequest Filter = 1;
    string Target = 2;
    string Ports = 3;
    repeated ExecParamItem ExtraParams = 4;
    string TargetFile = 5;

}

message ExecPacketScanRequest {
    repeated int64 HTTPFlow = 1;
    bytes HTTPRequest = 2;
    bool HTTPS = 3;
    bool AllowFuzzTag = 5;
    int64 TotalTimeoutSeconds = 6;
    int64 Timeout = 7;
    int64 PluginConcurrent = 8;
    int64 PacketConcurrent = 9;
    repeated string PluginList = 10;
    string Proxy = 11;

}

message ExecRequest {
    repeated ExecParamItem Params = 1;
    string Script = 2;
    string ScriptId = 3;
    int64 YakScriptId = 5;
    string RunnerParamRaw = 6;

}

message ExecHistoryRequest {
    Paging Pagination = 1;
    int64 YakScriptId = 3;
    string YakScriptName = 4;

}

message ExecHistoryRecord {
    string Script = 1;
    string ScriptId = 2;
    int64 Timestamp = 3;
    int64 DurationMs = 4;
    string Params = 5;
    bool Ok = 7;
    string Reason = 8;
    string Id = 9;
    bytes Stdout = 10;
    bytes Stderr = 11;
    string RuntimeId = 12;
    string FromYakModule = 13;
    int64 StdoutLen = 14;
    int64 StderrLen = 15;
    bytes Messages = 16;

}

message ExecHistoryRecordResponse {
    repeated ExecHistoryRecord Data = 1;
    Paging Pagination = 2;
    int64 Total = 3;

}

message ExecBatchYakScriptRequest {
    string Target = 1;
    string Keyword = 2;
    int64 Limit = 3;
    int64 TotalTimeoutSeconds = 4;
    string Type = 5;
    int64 Concurrent = 6;
    repeated ExecParamItem ExtraParams = 7;
    repeated string ScriptNames = 8;
    string TargetFile = 11;
    QueryYakScriptRequest PluginFilter = 12;
    bool EnablePluginFilter = 13;
    string Proxy = 14;
    int64 ProgressTaskCount = 15;
    double BaseProgress = 16;
    bool FromRecover = 17;
    string YakScriptOnlineGroup = 18;
    string TaskName = 19;
    repeated string ExcludedYakScript = 22;
    bool DisableNucleiWorkflow = 23;

}

message ExecBatchYakScriptResult {
    string Id = 1;
    string Status = 2;
    bool Ok = 4;
    string Reason = 5;
    bool Exploitable = 6;
    YakScript PoC = 7;
    ExecResult Result = 8;
    bool ProgressMessage = 9;
    double ProgressPercent = 10;
    int64 ProgressTotal = 11;
    int64 ProgressCount = 12;
    string Target = 13;
    repeated ExecParamItem ExtraParam = 14;
    string TaskId = 15;
    int64 Timestamp = 16;
    int64 ProgressRunning = 17;
    int64 ScanTaskExecutingCount = 18;

}

message ExecBatchYakScriptUnfinishedTask {
    double Percent = 1;
    int64 CreatedAt = 2;
    string Uid = 3;
    string YakScriptOnlineGroup = 4;
    string TaskName = 5;

}

message GetExecBatchYakScriptUnfinishedTaskResponse {
    repeated ExecBatchYakScriptUnfinishedTask Tasks = 1;

}

message GetExecBatchYakScriptUnfinishedTaskByUidRequest {
    string Uid = 1;

}

message RecoverExecBatchYakScriptUnfinishedTaskRequest {
    string Uid = 1;

}


message ExtractableData {
    string StringValue = 1;
    bytes BytesValue = 2;

}

message ExtractDataToFileRequest {
    bool JsonOutput = 1;
    bool CSVOutput = 2;
    string DirName = 3;
    map<string,ExtractableData> Data = 4;
    string FileNamePattern = 5;
    bool Finished = 6;

}

message ExtractDataToFileResult {
    string FilePath = 1;

}


message RegisterFacadesHTTPResponse {
    string FacadesUrl = 1;

}

message RegisterFacadesHTTPRequest {
    int64 HTTPFlowID = 1;
    bytes HTTPResponse = 2;
    string Url = 3;

}

message StartFacadesParams {
    bool EnableDNSLogServer = 3;
    int32 DNSLogLocalPort = 4;
    GetTunnelServerExternalIPParams ConnectParam = 5;
    int32 DNSLogRemotePort = 7;
    string ExternalDomain = 8;
    bool Verify = 9;
    int32 FacadeRemotePort = 16;
    string LocalFacadeHost = 41;
    int32 LocalFacadePort = 42;

}

message StartFacadesWithYsoParams {
    bool IsRemote = 1;
    int32 ReversePort = 2;
    string ReverseHost = 4;
    string Token = 5;
    GetTunnelServerExternalIPParams BridgeParam = 6;
    YsoOptionsRequest GenerateClassParams = 7;

}

message ApplyClassToFacadesParamsWithVerbose {
    YsoOptionsRequerstWithVerbose GenerateClassParams = 1;
    string Token = 2;

}

message BytesToBase64Request {
    bytes Bytes = 1;

}

message BytesToBase64Response {
    string Base64 = 1;

}

message ConfigGlobalReverseParams {
    GetTunnelServerExternalIPParams ConnectParams = 1;
    string LocalAddr = 2;

}

message NetInterface {
    string Name = 1;
    string Addr = 2;
    string IP = 3;

}

message AvailableLocalAddrResponse {
    repeated NetInterface Interfaces = 1;

}

message GetGlobalReverseServerResponse {
    string PublicReverseIP = 1;
    int32 PublicReversePort = 2;
    string LocalReverseAddr = 3;
    int32 LocalReversePort = 4;

}


message SaveFuzzerLabelRequest {
    repeated FuzzerLabel Data = 1;

}

message QueryFuzzerLabelResponse {
    repeated FuzzerLabel Data = 1;

}

message FuzzerLabel {
    int64 Id = 1;
    string Label = 2;
    string Description = 3;
    string DefaultDescription = 4;
    string Hash = 5;

}

message DeleteFuzzerLabelRequest {
    string Hash = 1;

}

message StringFuzzerResponse {
    repeated bytes Results = 1;

}

message StringFuzzerRequest {
    string Template = 1;
    string HotPatchCode = 2;
    string HotPatchCodeWithParamGetter = 3;
    int64 Limit = 4;
    int64 TimeoutSeconds = 5;

}

message ExtractedUrl {
    string Url = 1;

}

message QueryHTTPFuzzerResponseByTaskIdResponse {
    Paging Pagination = 1;
    repeated FuzzerResponse Data = 2;
    int64 Total = 3;
    int64 TotalPage = 4;

}

message QueryHTTPFuzzerResponseByTaskIdRequest {
    int64 TaskId = 1;
    string FuzzRequestToken = 2;
    int64 LastResponseTimestamp = 3;
    Paging Pagination = 4;

}

message ExtractDataResponse {
    string Token = 1;
    bytes Extracted = 2;

}

message ExtractDataRequest {
    bytes Data = 1;
    string Mode = 2;
    string PrefixRegexp = 3;
    string SuffixRegexp = 4;
    string MatchRegexp = 5;
    string Token = 6;
    bool End = 7;

}

message GenerateExtractRuleResponse {
    string PrefixRegexp = 1;
    string SuffixRegexp = 2;
    string SelectedRegexp = 3;

}

message IsMultipartFormDataRequestResult {
    bool IsMultipartFormData = 1;

}

message GenerateExtractRuleRequest {
    bytes Data = 1;
    bytes Selected = 2;
    int64 OffsetSize = 3;

}

message FixUploadPacketResponse {
    bytes Request = 1;

}

message FixUploadPacketRequest {
    bytes Request = 1;

}

message HTTPResponseMutateParams {
    bytes Response = 2;

}

message MutateResult {
    bytes Result = 1;
    repeated bytes ExtraResults = 2;

}

message HTTPRequestMutateParams {
    bytes Request = 1;
    repeated string FuzzMethods = 2;
    bool ChunkEncode = 3;
    bool UploadEncode = 4;

}

message RedirectRequestParams {
    string Request = 1;
    string Response = 2;
    bool IsHttps = 3;
    double PerRequestTimeoutSeconds = 4;
    string Proxy = 5;
    repeated HTTPResponseExtractor Extractors = 6;
    repeated HTTPResponseMatcher Matchers = 7;
    string MatchersCondition = 8;
    string HitColor = 9;
    repeated FuzzerParamItem Params = 10;
    bool IsGmTLS = 11;

}

message ExtractHTTPResponseResult {
    repeated FuzzerParamItem Values = 1;

}

message HTTPResponseExtractor {
    string Name = 1;
    string Type = 2;
    string Scope = 3;
    repeated string Groups = 4;
    repeated int64 RegexpMatchGroup = 5;
    string XPathAttribute = 6;

}

message ExtractHTTPResponseParams {
    repeated HTTPResponseExtractor Extractors = 1;
    string HTTPResponse = 2;

}

message MatchHTTPResponseResult {
    bool Matched = 1;

}

message HTTPResponseMatcher {
    repeated HTTPResponseMatcher SubMatchers = 1;
    string SubMatcherCondition = 2;
    string MatcherType = 3;
    string Scope = 4;
    string Condition = 5;
    repeated string Group = 6;
    string GroupEncoding = 7;
    bool Negative = 8;
    string ExprType = 9;

}

message MatchHTTPResponseParams {
    repeated HTTPResponseMatcher Matchers = 1;
    string MatcherCondition = 2;
    bool IsHTTPS = 3;
    string HTTPResponse = 4;
    string HTTPRequest = 5;

}

message RenderVariablesResponse {
    repeated KVPair Results = 1;

}

message RenderVariablesRequest {
    repeated KVPair Params = 1;
    bool IsHTTPS = 2;
    bool IsGmTLS = 3;
    bytes HTTPResponse = 4;
    bytes HTTPRequest = 5;

}

message FuzzerParamItem {
    string Key = 1;
    string Value = 2;
    string Type = 3;

}

message PreloadHTTPFuzzerParamsResponse {
    repeated FuzzerParamItem Values = 2;

}

message PreloadHTTPFuzzerParamsRequest {
    repeated FuzzerParamItem Params = 1;

}

message FuzzerResponse {
    string Method = 1;
    int32 StatusCode = 2;
    string Host = 3;
    string ContentType = 4;
    repeated HTTPHeader Headers = 5;
    bytes ResponseRaw = 6;
    int64 BodyLength = 7;
    int64 DurationMs = 8;
    string UUID = 9;
    int64 Timestamp = 10;
    bytes RequestRaw = 11;
    string GuessResponseEncoding = 12;
    bool Ok = 31;
    string Reason = 32;
    bool IsHTTPS = 33;
    repeated string Payloads = 34;
    double BodySimilarity = 35;
    double HeaderSimilarity = 36;
    bool MatchedByFilter = 37;
    string Url = 38;
    int64 TaskId = 39;
    int64 DNSDurationMs = 40;
    int64 FirstByteDurationMs = 41;
    int64 TotalDurationMs = 42;
    string Proxy = 43;
    string RemoteAddr = 44;
    repeated KVPair ExtractedResults = 45;
    bool MatchedByMatcher = 46;
    string HitColor = 47;

}

message FuzzerResponseFilter {
    int64 MinBodySize = 1;
    int64 MaxBodySize = 2;
    repeated string Regexps = 3;
    repeated string Keywords = 4;
    repeated string StatusCode = 6;

}

message FuzzerRequest {
    string Request = 1;
    repeated FuzzerParamItem Params = 2;
    int64 Concurrent = 3;
    bool IsHTTPS = 4;
    bool ForceFuzz = 5;
    string Proxy = 6;
    double PerRequestTimeoutSeconds = 7;
    string ActualAddr = 8;
    bool NoFollowRedirect = 9;
    bool NoFollowMetaRedirect = 10;
    bool FollowJSRedirect = 11;
    int32 HistoryWebFuzzerId = 12;
    bool NoFixContentLength = 13;
    string HotPatchCode = 14;
    FuzzerResponseFilter Filter = 15;
    bytes RequestRaw = 16;
    double DelayMinSeconds = 17;
    double DelayMaxSeconds = 18;
    string HotPatchCodeWithParamGetter = 19;
    int64 MaxRetryTimes = 20;
    string RetryInStatusCode = 21;
    string RetryNotInStatusCode = 22;
    string ResponseCharset = 23;
    string Verbose = 24;
    double RetryWaitSeconds = 25;
    double RetryMaxWaitSeconds = 26;
    double RedirectTimes = 27;
    repeated string DNSServers = 28;
    repeated KVPair EtcHosts = 29;
    bool NoSystemProxy = 30;
    int64 RepeatTimes = 31;
    repeated HTTPResponseExtractor Extractors = 32;
    repeated HTTPResponseMatcher Matchers = 33;
    string MatchersCondition = 34;
    bool IsGmTLS = 35;
    string HitColor = 36;

}

message DeleteHistoryHTTPFuzzerTaskRequest {
    int32 Id = 1;

}

message GetHistoryHTTPFuzzerTaskRequest {
    int32 Id = 1;

}

message HistoryHTTPFuzzerTaskDetail {
    HistoryHTTPFuzzerTask BasicInfo = 1;
    FuzzerRequest OriginRequest = 2;

}

message HistoryHTTPFuzzerTask {
    int32 Id = 1;
    int64 CreatedAt = 2;
    int32 HTTPFlowTotal = 3;
    int32 HTTPFlowSuccessCount = 4;
    int32 HTTPFlowFailedCount = 5;
    string Host = 6;
    int32 Port = 7;

}

message HistoryHTTPFuzzerTasks {
    repeated HistoryHTTPFuzzerTask Tasks = 1;

}

message HistoryHTTPFuzzerTasksResponse {
    repeated HistoryHTTPFuzzerTaskDetail Data = 1;
    int64 Total = 2;
    int64 TotalPage = 3;
    Paging Pagination = 4;

}

message QueryHistoryHTTPFuzzerTaskExParams {
    Paging Pagination = 1;
    string Keyword = 2;

}


message GenerateCSRFPocByPacketResponse {
    bytes Code = 1;

}

message GenerateCSRFPocByPacketRequest {
    bool IsHttps = 1;
    bytes Request = 2;

}

message GenerateYakCodeByPacketResponse {
    bytes Code = 1;

}

message GenerateYakCodeByPacketRequest {
    bool IsHttps = 1;
    bytes Request = 2;
    Template CodeTemplate = 3;

    enum Template {
        Ordinary  = 0;
        Batch  = 1;
    }

}


message HTTPFlowsExtractRequest {
    string ShareExtractContent = 1;

}

message HTTPFlowsShareRequest {
    repeated int64 Ids = 1;
    int64 LimitNum = 2;
    int64 ExpiredTime = 3;
    bool Pwd = 4;
    string ShareId = 5;
    string Token = 6;
    string Module = 7;

}

message HTTPFlowsShareResponse {
    string ShareId = 1;
    string ExtractCode = 2;

}

message Bytes {
    bytes Raw = 1;

}

message GetHTTPPacketBodyRequest {
    string Packet = 1;
    bytes PacketRaw = 2;

}

message DownloadBodyByHTTPFlowIDRequest {
    int64 Id = 1;

}

message TagsCode {
    string Value = 1;
    int32 Total = 2;

}

message HTTPFlowsFieldGroupResponse {
    repeated TagsCode Tags = 1;
    repeated TagsCode StatusCode = 2;

}

message HTTPFlowsFieldGroupRequest {
    bool RefreshRequest = 1;

}

message SetTagForHTTPFlowRequest {
    int64 Id = 1;
    string Hash = 2;
    repeated string Tags = 3;
    repeated CheckSetTagsHTTPFlow CheckTags = 4;

}

message CheckSetTagsHTTPFlow {
    int64 Id = 1;
    string Hash = 2;
    repeated string Tags = 3;

}

message QueryHTTPFlowResponse {
    Paging Pagination = 1;
    repeated HTTPFlow Data = 2;
    int64 Total = 3;

}

message QueryHTTPFlowRequest {
    Paging Pagination = 1;
    string SourceType = 2;
    string Methods = 3;
    string SearchURL = 4;
    string StatusCode = 5;
    bool HaveCommonParams = 6;
    bool HaveBody = 7;
    string SearchContentType = 9;
    int64 BeforeUpdatedAt = 10;
    int64 AfterUpdatedAt = 11;
    int64 AfterId = 12;
    int64 BeforeId = 13;
    string Keyword = 14;
    bool OnlyWebsocket = 15;
    repeated string IncludeInUrl = 16;
    repeated string ExcludeInUrl = 17;
    repeated string IncludeInIP = 18;
    repeated string ExcludeInIP = 19;
    repeated int64 ExcludeId = 20;
    repeated string IncludeInWhere = 21;
    repeated int64 IncludeId = 22;
    repeated string Tags = 23;
    string HaveParamsTotal = 24;
    repeated string Color = 25;
    int64 OffsetId = 26;
    int64 AfterBodyLength = 27;
    int64 BeforeBodyLength = 28;
    string IsWebsocket = 29;

}

message DeleteHTTPFlowRequest {
    bool DeleteAll = 1;
    repeated string ItemHash = 2;
    string URLPrefix = 3;
    repeated int64 Id = 4;
    QueryHTTPFlowRequest Filter = 5;
    repeated string URLPrefixBatch = 6;

}

message QueryHTTPFlowsIdsRequest {
    repeated string IncludeInWhere = 1;
    string SourceType = 2;

}

message QueryHTTPFlowsIdsResponse {
    repeated HTTPFlow Data = 1;

}

message GetHTTPFlowByIdsRequest {
    repeated int64 Ids = 2;

}

message GetHTTPFlowByIdRequest {
    int64 Id = 1;

}

message GetHTTPFlowByHashRequest {
    string Hash = 1;

}

message FuzzableParam {
    string Position = 1;
    string ParamName = 2;
    bytes OriginValue = 3;
    bytes AutoTemplate = 4;
    bool IsHTTPS = 5;

}

message HTTPFlow {
    bool IsHTTPS = 2;
    string Url = 3;
    repeated HTTPHeader RequestHeader = 4;
    bytes Request = 5;
    repeated HTTPHeader ResponseHeader = 6;
    bytes Response = 7;
    string SourceType = 8;
    string Path = 9;
    string Method = 10;
    int64 BodyLength = 11;
    string ContentType = 12;
    int64 StatusCode = 13;
    int64 GetParamsTotal = 14;
    int64 PostParamsTotal = 15;
    int64 UpdatedAt = 16;
    int64 CreatedAt = 17;
    string Hash = 18;
    string BodySizeVerbose = 19;
    repeated FuzzableParam GetParams = 20;
    repeated FuzzableParam PostParams = 21;
    int64 CookieParamsTotal = 22;
    repeated FuzzableParam CookieParams = 23;
    string HostPort = 24;
    string IPAddress = 25;
    string HtmlTitle = 26;
    string Tags = 27;
    bool NoFixContentLength = 28;
    uint64 Id = 29;
    bool IsWebsocket = 30;
    int64 RequestLength = 31;
    string RequestSizeVerbose = 32;
    string WebsocketHash = 33;
    bool InvalidForUTF8Request = 34;
    bool InvalidForUTF8Response = 35;
    string RawRequestBodyBase64 = 36;
    string RawResponseBodyBase64 = 37;
    string SafeHTTPRequest = 38;
    repeated string Domains = 40;
    repeated string RootDomains = 41;
    repeated string JsonObjects = 42;

}

message HTTPFlows {
    repeated HTTPFlow Data = 1;

}


message GetLicenseResponse {
    string License = 1;

}

message CheckLicenseRequest {
    string LicenseActivation = 1;
    string CompanyVersion = 2;

}


message AddToNavigationRequest {
    repeated NavigationList Data = 1;

}

message NavigationList {
    string Group = 1;
    repeated NavigationItem Items = 2;
    int64 GroupSort = 3;
    string Mode = 4;
    string GroupLabel = 5;

}

message NavigationItem {
    int64 YakScriptId = 1;
    string Group = 2;
    string Mode = 3;
    int64 VerboseSort = 4;
    int64 GroupSort = 5;
    string Route = 6;
    string YakScriptName = 7;
    string Verbose = 8;
    string VerboseLabel = 9;
    string GroupLabel = 10;
    string HeadImg = 11;

}

message GetAllNavigationRequest {
    string Mode = 1;
    string Group = 2;
    string YakScriptName = 3;

}

message GetAllNavigationItemResponse {
    repeated NavigationList Data = 1;

}

message AddOneNavigationRequest {
    string YakScriptName = 1;
    string Group = 2;
    string Verbose = 3;
    string Mode = 4;
    int64 VerboseSort = 5;
    int64 GroupSort = 6;
    string GroupLabel = 7;
    string VerboseLabel = 8;
    string Route = 9;

}

message QueryNavigationGroupsRequest {
    string YakScriptName = 1;
    string Mode = 2;

}

message GroupNames {
    repeated string Groups = 1;

}

message QueryAllMenuItemRequest {
    string Mode = 1;
    string Group = 2;
    string Verbose = 3;

}

message MenuItemGroup {
    string Group = 1;
    repeated MenuItem Items = 2;
    int64 MenuSort = 3;
    string Mode = 4;

}

message AddMenuRequest {
    repeated MenuItemGroup Data = 1;

}

message QueryGroupsByYakScriptIdRequest {
    int64 YakScriptId = 1;
    string Mode = 2;

}

message BatchExecutionPluginFilter {
    string type = 1;
    string tags = 2;
    repeated string include = 3;
    repeated string exclude = 4;

}

message MenuItem {
    string Group = 1;
    string Verbose = 2;
    int64 YakScriptId = 3;
    BatchExecutionPluginFilter Query = 4;
    uint64 MenuItemId = 5;
    int64 GroupSort = 6;
    string YakScriptName = 7;

}

message GetMenuItemByIdRequest {
    uint64 ID = 1;

}

message ExportMenuItemResult {
    string RawJson = 1;

}

message ImportMenuItemRequest {
    string RawJson = 1;
    string JsonFileName = 2;

}

message MenuByGroup {
    repeated MenuItemGroup Groups = 1;

}

message YakScriptIsInMenuRequest {
    string Group = 1;
    int64 YakScriptId = 2;

}

message RemoveFromMenuRequest {
    int64 YakScriptId = 1;
    string Group = 2;
    string Mode = 3;

}

message AddToMenuRequest {
    int64 YakScriptId = 1;
    string Group = 2;
    string Verbose = 3;
    string Mode = 4;
    int64 MenuSort = 5;
    int64 GroupSort = 6;

}


message Empty {

}

message KVPair {
    string Key = 1;
    string Value = 2;

}

message ExecParamItem {
    string Key = 1;
    string Value = 2;

}

message ExecResult {
    string Hash = 1;
    string OutputJson = 2;
    bytes Raw = 3;
    bool IsMessage = 4;
    bytes Message = 5;
    int64 Id = 6;
    string RuntimeID = 7;
    float Progress = 8;

}

message Paging {
    int64 Page = 51;
    int64 Limit = 52;
    string OrderBy = 53;
    string Order = 54;

}

message HTTPHeader {
    string Header = 1;
    string Value = 2;

}

message FieldName {
    string Name = 1;
    string Verbose = 2;
    int32 Total = 3;
    int32 Delta = 4;

}

message Fields {
    repeated FieldName Values = 1;

}

message SimpleScript {
    string Content = 1;

}


message GetMachineIDResponse {
    string MachineID = 1;

}

message ResetAndInvalidUserDataRequest {

}

message IsPrivilegedForNetRawResponse {
    bool IsPrivileged = 1;
    string Advice = 2;
    string AdviceVerbose = 3;

}


message MITMRuleExtractedData {
    int64 Id = 1;
    int64 CreatedAt = 2;
    string SourceType = 3;
    string TraceId = 4;
    string Regexp = 5;
    string RuleName = 6;
    string Data = 7;

}

message QueryMITMRuleExtractedDataResponse {
    repeated MITMRuleExtractedData Data = 1;
    int64 Total = 2;
    Paging Pagination = 3;

}

message QueryMITMRuleExtractedDataRequest {
    Paging Pagination = 1;
    string HTTPFlowHash = 2;

}

message MITMContentReplacers {
    repeated MITMContentReplacer Rules = 1;

}

message ImportMITMReplacerRulesRequest {
    bytes JsonRaw = 1;
    bool ReplaceAll = 2;

}

message ExportMITMReplacerRulesResponse {
    bytes JsonRaw = 1;

}

message MITMCert {
    bytes CaCerts = 1;
    string LocalFile = 2;

}

message SetMITMFilterResponse {

}

message SetMITMFilterRequest {
    repeated string includeHostname = 7;
    repeated string excludeHostname = 8;
    repeated string excludeSuffix = 9;
    repeated string includeSuffix = 10;
    repeated string excludeMethod = 11;
    repeated string excludeContentTypes = 40;
    repeated string excludeUri = 43;
    repeated string includeUri = 44;

}

message HTTPCookieSetting {
    string Key = 1;
    string Value = 2;
    string Path = 3;
    string Domain = 4;
    int64 Expires = 5;
    int64 MaxAge = 6;
    bool Secure = 7;
    bool HttpOnly = 8;
    string SameSiteMode = 9;

}

message MITMContentReplacer {
    string Rule = 1;
    bool NoReplace = 2;
    string Result = 3;
    string Color = 4;
    bool EnableForRequest = 5;
    bool EnableForResponse = 6;
    int32 Index = 7;
    repeated string ExtraTag = 8;
    bool EnableForHeader = 9;
    bool EnableForBody = 10;
    bool Disabled = 11;
    string VerboseName = 12;
    repeated HTTPHeader ExtraHeaders = 13;
    repeated HTTPCookieSetting ExtraCookies = 14;
    bool EnableForURI = 15;
    bool ExtraRepeat = 16;
    bool Drop = 17;

}

message YakScriptHookItem {
    int64 YakScriptId = 1;
    string YakScriptName = 2;
    string Verbose = 3;

}

message YakScriptHooks {
    string HookName = 1;
    repeated YakScriptHookItem Hooks = 2;

}

message MITMResponse {
    bytes request = 1;
    bool refresh = 2;
    bool isHttps = 3;
    string url = 4;
    int64 id = 5;
    bool justFilter = 16;
    repeated string includeHostname = 17;
    repeated string excludeHostname = 18;
    repeated string excludeSuffix = 19;
    HTTPFlow historyHTTPFlow = 22;
    bool forResponse = 23;
    bytes response = 24;
    int64 responseId = 26;
    bool haveMessage = 27;
    ExecResult message = 28;
    bool getCurrentHook = 30;
    repeated YakScriptHooks hooks = 31;
    string RemoteAddr = 32;
    bytes notificationContent = 33;
    bool haveNotification = 34;
    bool haveLoadingSetter = 35;
    bool loadingFlag = 36;
    bool isWebsocket = 37;
    repeated string websocketEncode = 38;
    repeated string includeSuffix = 110;
    repeated string excludeMethod = 111;
    repeated string excludeContentTypes = 113;
    repeated string excludeUri = 114;
    repeated string includeUri = 115;
    bool justContentReplacer = 120;
    repeated MITMContentReplacer replacers = 121;

}

message RemoveHookParams {
    bool ClearAll = 1;
    repeated string HookName = 2;
    repeated string RemoveHookID = 3;

}

message Certificate {
    bytes CrtPem = 1;
    bytes KeyPem = 2;
    repeated bytes CaCertificates = 3;

}

message MITMRequest {
    bytes request = 1;
    string host = 2;
    uint32 port = 3;
    string downstreamProxy = 4;
    int64 id = 5;
    bool recover = 6;
    repeated string includeHostname = 7;
    repeated string excludeHostname = 8;
    repeated string excludeSuffix = 9;
    repeated string includeSuffix = 10;
    repeated string excludeMethod = 11;
    bool updateFilter = 12;
    bool hijackResponse = 13;
    bool drop = 14;
    bool forward = 15;
    int64 responseId = 16;
    bool setYakScript = 21;
    repeated ExecParamItem yakScriptParams = 22;
    int64 yakScriptID = 23;
    string yakScriptContent = 25;
    bool getCurrentHook = 30;
    bool removeHook = 31;
    RemoveHookParams removeHookParams = 32;
    bool setAutoForward = 33;
    bool autoForwardValue = 34;
    bool setClearMITMPluginContext = 35;
    bool setPluginMode = 36;
    repeated string initPluginNames = 37;
    bool setContentReplacers = 38;
    repeated MITMContentReplacer replacers = 39;
    repeated string excludeContentTypes = 40;
    bool setResetFilter = 41;
    bool enableHttp2 = 42;
    repeated string excludeUri = 43;
    repeated string includeUri = 44;
    repeated Certificate certificates = 45;
    bool enableGMTLS = 46;
    bool onlyEnableGMTLS = 47;
    bool preferGMTLS = 48;
    string proxyUsername = 49;
    string proxyPassword = 50;
    bool enableProxyAuth = 51;
    repeated string dnsServers = 52;
    repeated KVPair hosts = 53;
    bytes response = 111;

}


message DownloadOnlinePluginByScriptName {
    string ScriptName = 1;
    int64 Id = 2;
    string HeadImg = 3;

}

message DownloadOnlinePluginByScriptNamesResponse {
    repeated DownloadOnlinePluginByScriptName Data = 1;

}

message DownloadOnlinePluginProgress {
    double Progress = 1;
    string Log = 2;

}

message DownloadOnlinePluginByScriptNamesRequest {
    repeated string ScriptNames = 1;
    string Token = 2;

}

message DeleteLocalPluginsByWhereRequest {
    string Keywords = 1;
    string Type = 2;
    int64 UserId = 3;
    string UserName = 4;

}

message TagsAndType {
    string Value = 1;
    int32 Total = 2;

}

message GetYakScriptTagsAndTypeResponse {
    repeated TagsAndType Type = 1;
    repeated TagsAndType Tag = 2;

}

message DeletePluginByUserIDRequest {
    int64 UserID = 1;
    string OnlineBaseUrl = 2;

}

message DownloadOnlinePluginByTokenRequest {
    string Token = 1;
    bool BindMe = 2;
    string Keywords = 3;
    string PluginType = 4;
    string Status = 5;
    string IsPrivate = 6;
    string Tags = 7;
    string UserName = 8;
    int64 UserId = 9;
    string TimeSearch = 10;
    string Group = 11;

}

message DownloadOnlinePluginByIdsRequest {
    repeated int64 OnlineIDs = 1;
    string Token = 2;
    repeated string UUID = 3;

}

message DownloadOnlinePluginByIdRequest {
    int64 OnlineID = 1;
    string Token = 2;
    string UUID = 3;

}

message OnlineProfile {
    string BaseUrl = 1;
    string Password = 2;
    string Proxy = 3;
    bool IsCompany = 4;

}


message GetAllPayloadGroupResponse {
    repeated string Groups = 1;

}

message SavePayloadProgress {
    double Progress = 1;
    int64 HandledBytes = 2;
    string HandledBytesVerbose = 3;
    int64 TotalBytes = 4;
    string TotalBytesVerbose = 5;
    double CostDuration = 6;
    string CostDurationVerbose = 7;

}

message DeletePayloadRequest {
    int64 Id = 1;
    repeated int64 Ids = 2;

}

message SavePayloadRequest {
    bool IsFile = 1;
    string Group = 2;
    string Content = 3;
    repeated string FileName = 4;

}

message UpdatePayloadRequest {
    string Group = 1;
    string OldGroup = 2;

}

message QueryPayloadRequest {
    Paging Pagination = 1;
    string Group = 2;
    string Keyword = 3;

}

message QueryPayloadResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated Payload Data = 3;

}

message Payload {
    int64 Id = 1;
    string Group = 2;
    bytes ContentBytes = 3;
    string Content = 4;

}

message GetAllPayloadRequest {
    string Group = 1;

}

message GetAllPayloadResponse {
    repeated Payload Data = 1;

}

message DeletePayloadByGroupRequest {
    string Group = 1;

}


message LastRecord {
    int64 LastRecordPtr = 1;
    double Percent = 2;
    string YakScriptOnlineGroup = 3;
    string ExtraInfo = 4;

}

message SimpleDetectUnfinishedTask {
    double Percent = 1;
    int64 CreatedAt = 2;
    string Uid = 3;
    string YakScriptOnlineGroup = 4;
    string TaskName = 5;
    int64 LastRecordPtr = 6;

}

message GetSimpleDetectUnfinishedTaskResponse {
    repeated SimpleDetectUnfinishedTask Tasks = 1;

}

message RecordPortScanRequest {
    LastRecord LastRecord = 1;
    PortScanRequest PortScanRequest = 2;

}

message PortScanRequest {
    string Targets = 1;
    string Ports = 2;
    string Mode = 3;
    repeated string Proto = 4;
    int64 Concurrent = 5;
    bool Active = 6;
    string FingerprintMode = 7;
    bool SaveToDB = 8;
    bool SaveClosedPorts = 9;
    string TargetsFile = 10;
    repeated string ScriptNames = 11;
    repeated string Proxy = 12;
    double ProbeTimeout = 13;
    int32 ProbeMax = 14;
    bool EnableCClassScan = 15;
    bool SkippedHostAliveScan = 16;
    double HostAliveTimeout = 17;
    int32 HostAliveConcurrent = 18;
    string HostAlivePorts = 19;
    string ExcludeHosts = 20;
    string ExcludePorts = 21;
    bool EnableBasicCrawler = 22;
    int64 BasicCrawlerRequestMax = 23;
    int64 SynConcurrent = 24;
    string TaskName = 25;

}

message SimpleDetectYakScriptUnfinishedTaskByUidRequest {
    string Uid = 1;

}


message SetKeyRequest {
    string Key = 1;
    string Value = 2;
    int64 TTL = 3;

}

message GetKeyRequest {
    string Key = 1;

}

message GetKeyResult {
    string Value = 1;

}

message ImportProjectRequest {
    string LocalProjectName = 1;
    string ProjectFilePath = 2;
    string Password = 3;
    int64 FolderId = 4;
    int64 ChildFolderId = 5;

}

message ExportProjectRequest {
    string ProjectName = 1;
    string Password = 2;
    int64 Id = 3;

}

message ProjectIOProgress {
    string TargetPath = 1;
    double Percent = 2;
    string Verbose = 4;

}

message QueryProjectDetailRequest {
    int64 Id = 1;

}

message RemoveProjectRequest {
    string ProjectName = 1;

}

message IsProjectNameValidRequest {
    string ProjectName = 1;
    int64 FolderId = 2;
    int64 ChildFolderId = 3;
    string Type = 4;

}

message NewProjectResponse {
    int64 Id = 1;
    string ProjectName = 2;

}

message NewProjectRequest {
    string ProjectName = 1;
    string Description = 2;
    int64 FolderId = 3;
    int64 ChildFolderId = 4;
    string Type = 5;
    int64 Id = 6;

}

message ProjectDescription {
    string ProjectName = 1;
    string Description = 2;
    int64 Id = 3;
    string DatabasePath = 4;
    int64 CreatedAt = 5;
    int64 FolderId = 6;
    int64 ChildFolderId = 7;
    string Type = 8;
    int64 UpdateAt = 9;
    string FolderName = 10;
    string ChildFolderName = 11;

}

message GetProjectsRequest {
    string ProjectName = 1;
    string Description = 2;
    Paging Pagination = 3;
    int64 FolderId = 4;
    int64 ChildFolderId = 5;
    string Type = 6;

}

message DeleteProjectRequest {
    int64 Id = 1;
    bool IsDeleteLocal = 2;

}

message GetProjectsResponse {
    repeated ProjectDescription Projects = 1;
    Paging Pagination = 2;
    int64 Total = 3;
    int64 TotalPage = 4;
    int64 ProjectToTal = 9;

}

message SetCurrentProjectRequest {
    string ProjectName = 1;
    int64 Id = 2;

}


message DefaultProxyResult {
    string Proxy = 1;

}


message DownloadReportRequest {
    string FileData = 1;
    string FileName = 2;
    string FileDir = 3;

}

message DeleteReportRequest {
    int64 Id = 1;
    string Hash = 2;
    QueryReportsRequest Filter = 3;
    repeated int64 IDs = 4;
    bool DeleteAll = 5;

}

message Report {
    string Title = 1;
    uint64 PublishedAt = 2;
    string Hash = 3;
    uint64 Id = 4;
    string Owner = 5;
    string From = 6;
    string JsonRaw = 7;

}

message QueryReportRequest {
    int64 Id = 1;
    string Hash = 2;

}

message QueryReportsResponse {
    repeated Report Data = 1;
    int64 Total = 2;
    Paging Pagination = 3;

}

message QueryReportsRequest {
    Paging Pagination = 1;
    string Owner = 2;
    string From = 3;
    string Keyword = 4;
    string Title = 5;

}


message UploadRiskToOnlineRequest {
    string Token = 1;

}

message NewRiskReadRequest {
    int64 AfterId = 1;
    repeated int64 Ids = 2;

}

message NewRisk {
    string Title = 1;
    int64 Id = 2;
    int64 CreatedAt = 3;
    int64 UpdatedAt = 4;
    string Verbose = 5;
    string TitleVerbose = 6;
    bool IsRead = 7;

}

message QueryNewRiskResponse {
    repeated NewRisk Data = 1;
    int64 NewRiskTotal = 2;
    int64 Total = 3;

}

message QueryNewRiskRequest {
    int64 AfterId = 1;

}

message RiskTableStats {
    int64 LatestCreatedAtTimestamp = 1;
    Fields RiskTypeStats = 2;
    Fields RiskLevelStats = 3;

}

message DeleteRiskRequest {
    int64 Id = 1;
    string Hash = 2;
    QueryRisksRequest Filter = 3;
    repeated int64 Ids = 4;
    bool DeleteAll = 5;
    bool DeleteRepetition = 6;

}

message Risk {
    string Hash = 1;
    string IP = 2;
    string Url = 3;
    int32 Port = 4;
    string Host = 5;
    string Title = 6;
    string TitleVerbose = 7;
    string RiskType = 8;
    string RiskTypeVerbose = 9;
    string Parameter = 10;
    string Payload = 11;
    string Details = 12;
    string FromYakScript = 13;
    bool WaitingVerified = 14;
    string ReverseToken = 15;
    int64 CreatedAt = 16;
    int64 UpdatedAt = 17;
    int64 Id = 18;
    string Severity = 19;
    bytes Request = 20;
    bytes Response = 21;
    string RuntimeId = 22;
    string CVE = 23;
    string Description = 24;
    string Solution = 25;
    string TaskName = 26;

}

message QueryRiskRequest {
    int64 Id = 1;
    string Hash = 2;
    QueryRisksRequest Filter = 3;
    repeated int64 Ids = 4;

}

message QueryRisksResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated Risk Data = 3;

}

message QueryRisksRequest {
    Paging Pagination = 1;
    string Search = 2;
    string Network = 3;
    string Ports = 4;
    string RiskType = 5;
    string Token = 6;
    bool WaitingVerified = 7;
    string Severity = 8;

}


message UploadScreenRecorderRequest {
    string Project = 1;
    string Token = 2;
    string Keywords = 3;
    repeated int64 Ids = 4;

}

message GetOneScreenRecorderRequest {
    int64 Id = 1;
    string Order = 2;

}

message UpdateScreenRecorderRequest {
    int64 Id = 1;
    string VideoName = 2;
    string NoteInfo = 3;

}

message ScreenRecorder {
    int64 Id = 1;
    string Filename = 2;
    string NoteInfo = 3;
    string Project = 4;
    int64 CreatedAt = 5;
    int64 UpdatedAt = 6;
    string VideoName = 7;
    string Cover = 8;
    string Duration = 9;
    bool Before = 10;
    bool After = 11;

}

message QueryScreenRecorderResponse {
    repeated ScreenRecorder Data = 1;
    Paging Pagination = 2;
    int64 Total = 3;

}

message IsScrecorderReadyResponse {
    bool Ok = 1;
    string Reason = 2;

}

message QueryScreenRecorderRequest {
    string Project = 1;
    Paging Pagination = 2;
    string Keywords = 3;
    repeated int64 Ids = 4;

}

message StartScrecorderRequest {
    int64 Framerate = 1;
    string ResolutionSize = 2;
    double CoefficientPTS = 3;
    bool DisableMouse = 4;

}

message InstallScrecorderRequest {
    string Proxy = 1;

}

message IsScrecorderReadyRequest {

}


message GeneralStorage {
    string Key = 1;
    string Value = 2;
    int64 ExpiredAt = 3;
    bool ProcessEnv = 4;
    string Verbose = 5;
    string Group = 6;

}

message GetProcessEnvKeyResult {
    repeated GeneralStorage Results = 1;

}


message SetSystemProxyRequest {
    string HttpProxy = 1;
    bool Enable = 2;

}

message GetSystemProxyResult {
    string CurrentProxy = 1;
    bool Enable = 2;

}


message RandomPortTriggerNotification {
    string RemoteAddr = 1;
    string RemoteIP = 2;
    int32 RemotePort = 3;
    int32 LocalPort = 4;
    repeated string History = 5;
    int32 CurrentRemoteCachedConnectionCount = 6;
    int32 LocalPortCachedHistoryConnectionCount = 7;
    int64 TriggerTimestamp = 8;
    int64 Timestamp = 9;

}

message QueryRandomPortTriggerRequest {
    string Token = 1;

}

message RandomPortInfo {
    string Token = 1;
    string Addr = 2;
    int32 Port = 3;

}

message ICMPTriggerNotification {
    int32 Size = 1;
    string CurrentRemoteAddr = 2;
    repeated string Histories = 3;
    int32 CurrentRemoteCachedConnectionCount = 4;
    int32 SizedCachedHistoryConnectionCount = 5;
    int64 TriggerTimestamp = 7;
    int64 Timestamp = 8;

}

message QueryICMPTriggerResponse {
    repeated ICMPTriggerNotification Notification = 1;

}

message QueryICMPTriggerRequest {
    int32 Length = 1;

}

message RequireICMPRandomLengthResponse {
    int32 Length = 1;
    string ExternalHost = 2;

}

message DNSLogEvent {
    string DNSType = 1;
    string Token = 2;
    string Domain = 3;
    string RemoteAddr = 4;
    string RemoteIP = 5;
    int32 RemotePort = 6;
    bytes Raw = 7;
    int64 Timestamp = 8;

}

message QueryDNSLogByTokenResponse {
    repeated DNSLogEvent Events = 1;

}

message QueryDNSLogByTokenRequest {
    string Token = 1;
    string DNSLogAddr = 2;

}

message DNSLogRootDomain {
    string Domain = 1;
    string Token = 2;

}

message YakDNSLogBridgeAddr {
    string DNSLogAddr = 1;
    string DNSLogAddrSecret = 2;

}

message GetTunnelServerExternalIPParams {
    string Addr = 1;
    string Secret = 2;

}

message GetTunnelServerExternalIPResponse {
    string IP = 1;

}

message VerifyTunnelServerDomainParams {
    GetTunnelServerExternalIPParams ConnectParams = 1;
    string Domain = 2;

}

message VerifyTunnelServerDomainResponse {
    string Domain = 1;
    bool Ok = 2;
    string Reason = 3;

}


message UpdateFromGithubRequest {
    string Proxy = 1;
    string GithubUrl = 2;

}

message UpdateFromYakitResourceRequest {
    string Proxy = 1;
    string BaseSourceUrl = 2;

}


message IsVulinboxReadyRequest {

}

message IsVulinboxReadyResponse {
    bool Ok = 1;
    string Reason = 2;

}

message InstallVulinboxRequest {
    string Proxy = 1;

}

message StartVulinboxRequest {
    string Host = 1;
    string Port = 2;
    bool NoHttps = 3;
    bool SafeMode = 4;

}


message DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest {
    string WebsocketRequestHash = 1;

}

message WebsocketFlow {
    int64 ID = 1;
    int64 CreatedAt = 2;
    string WebsocketRequestHash = 3;
    int64 FrameIndex = 4;
    bool FromServer = 5;
    string MessageType = 6;
    bytes Data = 7;
    string DataSizeVerbose = 8;
    int64 DataLength = 9;
    string DataVerbose = 10;
    bool IsJson = 11;
    bool IsProtobuf = 12;

}

message WebsocketFlows {
    Paging Pagination = 1;
    repeated WebsocketFlow Data = 2;
    int64 Total = 4;

}

message QueryWebsocketFlowByHTTPFlowWebsocketHashRequest {
    string WebsocketRequestHash = 1;
    Paging Pagination = 2;

}

message ClientWebsocketResponse {
    bool IsDataFrame = 1;
    bool SwitchProtocolSucceeded = 2;
    bool FromServer = 4;
    repeated string GuessEncode = 5;
    string StatusVerbose = 6;
    string ReasonVerbose = 7;
    int64 DataLength = 8;
    bytes Data = 9;
    bool IsJson = 10;
    bool IsProtobuf = 11;
    int64 DataFrameIndex = 12;
    string WebsocketHash = 13;
    string DataSizeVerbose = 14;
    string DataVerbose = 15;
    bool IsUpgradeResponse = 16;
    bytes UpgradeResponse = 17;

}

message ClientWebsocketRequest {
    bool IsTLS = 1;
    bytes UpgradeRequest = 2;
    bytes ToServer = 3;
    repeated string Encode = 4;
    bool AllowToFuzz = 5;
    int64 TotalTimeoutSeconds = 6;
    string Proxy = 7;

}


message Input {
    bytes raw = 1;
    string host = 2;
    uint32 port = 3;

}

message Output {
    bytes raw = 1;
    bool control = 2;
    bool closed = 3;
    bool waiting = 4;
    string remoteAddr = 11;
    string localAddr = 12;

}

message EchoResposne {
    string result = 1;

}

message EchoRequest {
    string text = 1;

}

message VersionResponse {
    string Version = 1;

}


message QueryYakScriptByNamesRequest {
    repeated string YakScriptName = 1;

}

message QueryYakScriptByNamesResponse {
    repeated YakScript Data = 1;

}

message YakScriptNames {
    repeated string YakScriptNames = 1;

}

message DeleteYakScriptExecResultRequest {
    repeated int64 Id = 1;
    string YakScriptName = 2;

}

message QueryYakScriptExecResultResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated ExecResult Data = 3;

}

message QueryYakScriptExecResultRequest {
    Paging Pagination = 1;
    string YakScriptName = 2;

}

message QueryYakScriptByOnlineGroupRequest {
    string OnlineGroup = 1;

}

message QueryYakScriptLocalAndUserResponse {
    repeated YakScript Data = 1;

}

message QueryYakScriptLocalAndUserRequest {
    string OnlineBaseUrl = 1;
    int64 UserId = 2;

}

message Tags {
    string Value = 1;
    int32 Total = 2;

}

message GetYakScriptTagsResponse {
    repeated Tags Tag = 1;

}

message ExportYakScriptResponse {
    string OutputDir = 2;

}

message ExecuteBatchPacketYakScriptParams {
    repeated string ScriptName = 1;
    bool IsHttps = 2;
    bytes Request = 3;
    bytes Response = 4;
    int32 Concurrent = 5;
    double PerTaskTimeout = 6;

}

message ExecutePacketYakScriptParams {
    string ScriptName = 1;
    bool IsHttps = 2;
    bytes Request = 3;
    bytes Response = 4;

}

message ExportYakScriptRequest {
    int64 YakScriptId = 1;
    string OutputDir = 2;
    string OutputPluginDir = 3;
    repeated int64 YakScriptIds = 4;
    bool All = 5;

}

message GetYakScriptByOnlineIDRequest {
    string UUID = 1;
    int64 OnlineID = 2;

}

message GetYakScriptByNameRequest {
    string Name = 1;

}

message QueryYakScriptRequest {
    Paging Pagination = 1;
    string Type = 2;
    string Keyword = 3;
    bool IsHistory = 4;
    bool IsIgnore = 5;
    bool IsGeneralModule = 6;
    bool IsBatch = 7;
    bool ExcludeNucleiWorkflow = 8;
    repeated string ExcludeScriptNames = 9;
    repeated string IncludedScriptNames = 10;
    repeated string Tag = 11;
    bool NoResultReturn = 12;
    int64 UserId = 13;
    string UserName = 14;
    bool IgnoreGeneralModuleOrder = 15;
    repeated string Family = 16;

}

message QueryYakScriptResponse {
    Paging Pagination = 1;
    int64 Total = 2;
    repeated YakScript Data = 3;

}

message YakScriptParam {
    string Field = 1;
    string DefaultValue = 2;
    string TypeVerbose = 3;
    string FieldVerbose = 4;
    string Help = 5;
    bool Required = 6;
    string Group = 7;
    string ExtraSetting = 8;

}

message YakScript {
    int64 Id = 1;
    string Content = 2;
    string Type = 3;
    repeated YakScriptParam Params = 4;
    int64 CreatedAt = 5;
    string ScriptName = 6;
    string Help = 7;
    string Level = 8;
    string Author = 9;
    string Tags = 10;
    bool IsHistory = 11;
    bool IsIgnore = 12;
    bool IsGeneralModule = 13;
    string GeneralModuleVerbose = 14;
    string GeneralModuleKey = 15;
    string FromGit = 16;
    bool EnablePluginSelector = 17;
    string PluginSelectorTypes = 18;
    int64 OnlineId = 19;
    int64 UserId = 20;
    string OnlineScriptName = 21;
    string OnlineContributors = 22;
    string UUID = 23;
    bool OnlineIsPrivate = 24;
    string HeadImg = 25;
    string OnlineBaseUrl = 26;
    int64 BaseOnlineId = 27;
    bool OnlineOfficial = 28;
    string OnlineGroup = 29;

}

message DeleteYakScriptRequest {
    int64 Id = 3;
    repeated int64 Ids = 4;

}

message GetYakScriptByIdRequest {
    int64 Id = 1;

}


message YaklangShellRequest {
    string Input = 1;

}

message YaklangShellKVPair {
    string Key = 1;
    bytes Value = 2;
    string ValueVerbose = 3;
    int64 SymbolId = 4;

}

message YaklangShellResponse {
    ExecResult RawResult = 1;
    repeated YaklangShellKVPair Scope = 2;

}


message YsoClassGeneraterOptions {
    string Key = 1;
    string Value = 2;
    string Type = 3;

}

message YsoOptionsRequest {
    string Gadget = 1;
    string Class = 2;
    repeated YsoClassGeneraterOptions Options = 3;

}

message YsoClassOptionsResponseWithVerbose {
    repeated YsoClassGeneraterOptionsWithVerbose Options = 1;

}

message YsoDumpResponse {
    string Data = 1;

}

message YsoBytesResponse {
    string FileName = 1;
    bytes Bytes = 2;

}

message YsoBytesObject {
    bytes Data = 1;

}

message YsoCodeResponse {
    string Code = 1;

}

message YsoOption {
    string Name = 1;
    string NameVerbose = 2;
    string Help = 3;

}

message YsoOptionsWithVerbose {
    repeated YsoOption Options = 1;

}

message YsoOptionsRequerstWithVerbose {
    string Gadget = 1;
    string Class = 2;
    repeated YsoClassGeneraterOptionsWithVerbose Options = 3;

}

message YsoClassGeneraterOptionsWithVerbose {
    string Key = 1;
    string KeyVerbose = 2;
    string Help = 3;
    string Value = 4;
    string Type = 5;
    map<string,YsoClassOptionsResponseWithVerbose> BindOptions = 6;

}



