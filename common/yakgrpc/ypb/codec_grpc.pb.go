// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: codec.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodecService_Codec_FullMethodName      = "/ypb.CodecService/Codec"
	CodecService_AutoDecode_FullMethodName = "/ypb.CodecService/AutoDecode"
)

// CodecServiceClient is the client API for CodecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodecServiceClient interface {
	// 编码解码
	Codec(ctx context.Context, in *CodecRequest, opts ...grpc.CallOption) (*CodecResponse, error)
	// 尝试自动解码
	AutoDecode(ctx context.Context, in *AutoDecodeRequest, opts ...grpc.CallOption) (*AutoDecodeResponse, error)
}

type codecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodecServiceClient(cc grpc.ClientConnInterface) CodecServiceClient {
	return &codecServiceClient{cc}
}

func (c *codecServiceClient) Codec(ctx context.Context, in *CodecRequest, opts ...grpc.CallOption) (*CodecResponse, error) {
	out := new(CodecResponse)
	err := c.cc.Invoke(ctx, CodecService_Codec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codecServiceClient) AutoDecode(ctx context.Context, in *AutoDecodeRequest, opts ...grpc.CallOption) (*AutoDecodeResponse, error) {
	out := new(AutoDecodeResponse)
	err := c.cc.Invoke(ctx, CodecService_AutoDecode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodecServiceServer is the server API for CodecService service.
// All implementations must embed UnimplementedCodecServiceServer
// for forward compatibility
type CodecServiceServer interface {
	// 编码解码
	Codec(context.Context, *CodecRequest) (*CodecResponse, error)
	// 尝试自动解码
	AutoDecode(context.Context, *AutoDecodeRequest) (*AutoDecodeResponse, error)
	mustEmbedUnimplementedCodecServiceServer()
}

// UnimplementedCodecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCodecServiceServer struct {
}

func (UnimplementedCodecServiceServer) Codec(context.Context, *CodecRequest) (*CodecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Codec not implemented")
}
func (UnimplementedCodecServiceServer) AutoDecode(context.Context, *AutoDecodeRequest) (*AutoDecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoDecode not implemented")
}
func (UnimplementedCodecServiceServer) mustEmbedUnimplementedCodecServiceServer() {}

// UnsafeCodecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodecServiceServer will
// result in compilation errors.
type UnsafeCodecServiceServer interface {
	mustEmbedUnimplementedCodecServiceServer()
}

func RegisterCodecServiceServer(s grpc.ServiceRegistrar, srv CodecServiceServer) {
	s.RegisterService(&CodecService_ServiceDesc, srv)
}

func _CodecService_Codec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServiceServer).Codec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodecService_Codec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServiceServer).Codec(ctx, req.(*CodecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodecService_AutoDecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoDecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServiceServer).AutoDecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodecService_AutoDecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServiceServer).AutoDecode(ctx, req.(*AutoDecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodecService_ServiceDesc is the grpc.ServiceDesc for CodecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.CodecService",
	HandlerType: (*CodecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Codec",
			Handler:    _CodecService_Codec_Handler,
		},
		{
			MethodName: "AutoDecode",
			Handler:    _CodecService_AutoDecode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codec.proto",
}
