// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: completion_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompletionApi_GetYakitCompletionRaw_FullMethodName           = "/ypb.CompletionApi/GetYakitCompletionRaw"
	CompletionApi_GetYakVMBuildInMethodCompletion_FullMethodName = "/ypb.CompletionApi/GetYakVMBuildInMethodCompletion"
	CompletionApi_StaticAnalyzeError_FullMethodName              = "/ypb.CompletionApi/StaticAnalyzeError"
	CompletionApi_YaklangCompileAndFormat_FullMethodName         = "/ypb.CompletionApi/YaklangCompileAndFormat"
)

// CompletionApiClient is the client API for CompletionApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompletionApiClient interface {
	// 自动生成补全
	GetYakitCompletionRaw(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakitCompletionRawResponse, error)
	GetYakVMBuildInMethodCompletion(ctx context.Context, in *GetYakVMBuildInMethodCompletionRequest, opts ...grpc.CallOption) (*GetYakVMBuildInMethodCompletionResponse, error)
	StaticAnalyzeError(ctx context.Context, in *StaticAnalyzeErrorRequest, opts ...grpc.CallOption) (*StaticAnalyzeErrorResponse, error)
	YaklangCompileAndFormat(ctx context.Context, in *YaklangCompileAndFormatRequest, opts ...grpc.CallOption) (*YaklangCompileAndFormatResponse, error)
}

type completionApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCompletionApiClient(cc grpc.ClientConnInterface) CompletionApiClient {
	return &completionApiClient{cc}
}

func (c *completionApiClient) GetYakitCompletionRaw(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakitCompletionRawResponse, error) {
	out := new(YakitCompletionRawResponse)
	err := c.cc.Invoke(ctx, CompletionApi_GetYakitCompletionRaw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *completionApiClient) GetYakVMBuildInMethodCompletion(ctx context.Context, in *GetYakVMBuildInMethodCompletionRequest, opts ...grpc.CallOption) (*GetYakVMBuildInMethodCompletionResponse, error) {
	out := new(GetYakVMBuildInMethodCompletionResponse)
	err := c.cc.Invoke(ctx, CompletionApi_GetYakVMBuildInMethodCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *completionApiClient) StaticAnalyzeError(ctx context.Context, in *StaticAnalyzeErrorRequest, opts ...grpc.CallOption) (*StaticAnalyzeErrorResponse, error) {
	out := new(StaticAnalyzeErrorResponse)
	err := c.cc.Invoke(ctx, CompletionApi_StaticAnalyzeError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *completionApiClient) YaklangCompileAndFormat(ctx context.Context, in *YaklangCompileAndFormatRequest, opts ...grpc.CallOption) (*YaklangCompileAndFormatResponse, error) {
	out := new(YaklangCompileAndFormatResponse)
	err := c.cc.Invoke(ctx, CompletionApi_YaklangCompileAndFormat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompletionApiServer is the server API for CompletionApi service.
// All implementations must embed UnimplementedCompletionApiServer
// for forward compatibility
type CompletionApiServer interface {
	// 自动生成补全
	GetYakitCompletionRaw(context.Context, *Empty) (*YakitCompletionRawResponse, error)
	GetYakVMBuildInMethodCompletion(context.Context, *GetYakVMBuildInMethodCompletionRequest) (*GetYakVMBuildInMethodCompletionResponse, error)
	StaticAnalyzeError(context.Context, *StaticAnalyzeErrorRequest) (*StaticAnalyzeErrorResponse, error)
	YaklangCompileAndFormat(context.Context, *YaklangCompileAndFormatRequest) (*YaklangCompileAndFormatResponse, error)
	mustEmbedUnimplementedCompletionApiServer()
}

// UnimplementedCompletionApiServer must be embedded to have forward compatible implementations.
type UnimplementedCompletionApiServer struct {
}

func (UnimplementedCompletionApiServer) GetYakitCompletionRaw(context.Context, *Empty) (*YakitCompletionRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakitCompletionRaw not implemented")
}
func (UnimplementedCompletionApiServer) GetYakVMBuildInMethodCompletion(context.Context, *GetYakVMBuildInMethodCompletionRequest) (*GetYakVMBuildInMethodCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakVMBuildInMethodCompletion not implemented")
}
func (UnimplementedCompletionApiServer) StaticAnalyzeError(context.Context, *StaticAnalyzeErrorRequest) (*StaticAnalyzeErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticAnalyzeError not implemented")
}
func (UnimplementedCompletionApiServer) YaklangCompileAndFormat(context.Context, *YaklangCompileAndFormatRequest) (*YaklangCompileAndFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YaklangCompileAndFormat not implemented")
}
func (UnimplementedCompletionApiServer) mustEmbedUnimplementedCompletionApiServer() {}

// UnsafeCompletionApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompletionApiServer will
// result in compilation errors.
type UnsafeCompletionApiServer interface {
	mustEmbedUnimplementedCompletionApiServer()
}

func RegisterCompletionApiServer(s grpc.ServiceRegistrar, srv CompletionApiServer) {
	s.RegisterService(&CompletionApi_ServiceDesc, srv)
}

func _CompletionApi_GetYakitCompletionRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletionApiServer).GetYakitCompletionRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompletionApi_GetYakitCompletionRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletionApiServer).GetYakitCompletionRaw(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompletionApi_GetYakVMBuildInMethodCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYakVMBuildInMethodCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletionApiServer).GetYakVMBuildInMethodCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompletionApi_GetYakVMBuildInMethodCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletionApiServer).GetYakVMBuildInMethodCompletion(ctx, req.(*GetYakVMBuildInMethodCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompletionApi_StaticAnalyzeError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticAnalyzeErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletionApiServer).StaticAnalyzeError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompletionApi_StaticAnalyzeError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletionApiServer).StaticAnalyzeError(ctx, req.(*StaticAnalyzeErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompletionApi_YaklangCompileAndFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YaklangCompileAndFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletionApiServer).YaklangCompileAndFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompletionApi_YaklangCompileAndFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletionApiServer).YaklangCompileAndFormat(ctx, req.(*YaklangCompileAndFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompletionApi_ServiceDesc is the grpc.ServiceDesc for CompletionApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompletionApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.CompletionApi",
	HandlerType: (*CompletionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetYakitCompletionRaw",
			Handler:    _CompletionApi_GetYakitCompletionRaw_Handler,
		},
		{
			MethodName: "GetYakVMBuildInMethodCompletion",
			Handler:    _CompletionApi_GetYakVMBuildInMethodCompletion_Handler,
		},
		{
			MethodName: "StaticAnalyzeError",
			Handler:    _CompletionApi_StaticAnalyzeError_Handler,
		},
		{
			MethodName: "YaklangCompileAndFormat",
			Handler:    _CompletionApi_YaklangCompileAndFormat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "completion_api.proto",
}
