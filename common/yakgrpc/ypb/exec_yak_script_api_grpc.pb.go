// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: exec_yak_script_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecYakScriptApi_Exec_FullMethodName                                     = "/ypb.ExecYakScriptApi/Exec"
	ExecYakScriptApi_QueryExecHistory_FullMethodName                         = "/ypb.ExecYakScriptApi/QueryExecHistory"
	ExecYakScriptApi_RemoveExecHistory_FullMethodName                        = "/ypb.ExecYakScriptApi/RemoveExecHistory"
	ExecYakScriptApi_LoadNucleiTemplates_FullMethodName                      = "/ypb.ExecYakScriptApi/LoadNucleiTemplates"
	ExecYakScriptApi_AutoUpdateYakModule_FullMethodName                      = "/ypb.ExecYakScriptApi/AutoUpdateYakModule"
	ExecYakScriptApi_ExecYakScript_FullMethodName                            = "/ypb.ExecYakScriptApi/ExecYakScript"
	ExecYakScriptApi_ExecBatchYakScript_FullMethodName                       = "/ypb.ExecYakScriptApi/ExecBatchYakScript"
	ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTask_FullMethodName      = "/ypb.ExecYakScriptApi/GetExecBatchYakScriptUnfinishedTask"
	ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTaskByUid_FullMethodName = "/ypb.ExecYakScriptApi/GetExecBatchYakScriptUnfinishedTaskByUid"
	ExecYakScriptApi_PopExecBatchYakScriptUnfinishedTaskByUid_FullMethodName = "/ypb.ExecYakScriptApi/PopExecBatchYakScriptUnfinishedTaskByUid"
	ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTask_FullMethodName  = "/ypb.ExecYakScriptApi/RecoverExecBatchYakScriptUnfinishedTask"
	ExecYakScriptApi_ExecutePacketYakScript_FullMethodName                   = "/ypb.ExecYakScriptApi/ExecutePacketYakScript"
	ExecYakScriptApi_ExecuteBatchPacketYakScript_FullMethodName              = "/ypb.ExecYakScriptApi/ExecuteBatchPacketYakScript"
	ExecYakScriptApi_ExecPacketScan_FullMethodName                           = "/ypb.ExecYakScriptApi/ExecPacketScan"
	ExecYakScriptApi_ExecYakitPluginsByYakScriptFilter_FullMethodName        = "/ypb.ExecYakScriptApi/ExecYakitPluginsByYakScriptFilter"
)

// ExecYakScriptApiClient is the client API for ExecYakScriptApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecYakScriptApiClient interface {
	// Exec
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecClient, error)
	QueryExecHistory(ctx context.Context, in *ExecHistoryRequest, opts ...grpc.CallOption) (*ExecHistoryRecordResponse, error)
	RemoveExecHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	LoadNucleiTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AutoUpdateYakModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ExecYakScriptApi_AutoUpdateYakModuleClient, error)
	ExecYakScript(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecYakScriptClient, error)
	ExecBatchYakScript(ctx context.Context, in *ExecBatchYakScriptRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecBatchYakScriptClient, error)
	GetExecBatchYakScriptUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetExecBatchYakScriptUnfinishedTaskResponse, error)
	GetExecBatchYakScriptUnfinishedTaskByUid(ctx context.Context, in *GetExecBatchYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*ExecBatchYakScriptRequest, error)
	PopExecBatchYakScriptUnfinishedTaskByUid(ctx context.Context, in *GetExecBatchYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*ExecBatchYakScriptRequest, error)
	RecoverExecBatchYakScriptUnfinishedTask(ctx context.Context, in *RecoverExecBatchYakScriptUnfinishedTaskRequest, opts ...grpc.CallOption) (ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskClient, error)
	ExecutePacketYakScript(ctx context.Context, in *ExecutePacketYakScriptParams, opts ...grpc.CallOption) (ExecYakScriptApi_ExecutePacketYakScriptClient, error)
	ExecuteBatchPacketYakScript(ctx context.Context, in *ExecuteBatchPacketYakScriptParams, opts ...grpc.CallOption) (ExecYakScriptApi_ExecuteBatchPacketYakScriptClient, error)
	// 新的扫描模式
	ExecPacketScan(ctx context.Context, in *ExecPacketScanRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecPacketScanClient, error)
	// 通用的漏洞检测技术方案
	ExecYakitPluginsByYakScriptFilter(ctx context.Context, in *ExecYakitPluginsByYakScriptFilterRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterClient, error)
}

type execYakScriptApiClient struct {
	cc grpc.ClientConnInterface
}

func NewExecYakScriptApiClient(cc grpc.ClientConnInterface) ExecYakScriptApiClient {
	return &execYakScriptApiClient{cc}
}

func (c *execYakScriptApiClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[0], ExecYakScriptApi_Exec_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) QueryExecHistory(ctx context.Context, in *ExecHistoryRequest, opts ...grpc.CallOption) (*ExecHistoryRecordResponse, error) {
	out := new(ExecHistoryRecordResponse)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_QueryExecHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) RemoveExecHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_RemoveExecHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) LoadNucleiTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_LoadNucleiTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) AutoUpdateYakModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ExecYakScriptApi_AutoUpdateYakModuleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[1], ExecYakScriptApi_AutoUpdateYakModule_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiAutoUpdateYakModuleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_AutoUpdateYakModuleClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiAutoUpdateYakModuleClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiAutoUpdateYakModuleClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecYakScript(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[2], ExecYakScriptApi_ExecYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecYakScriptClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecYakScriptClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecYakScriptClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecBatchYakScript(ctx context.Context, in *ExecBatchYakScriptRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecBatchYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[3], ExecYakScriptApi_ExecBatchYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecBatchYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecBatchYakScriptClient interface {
	Recv() (*ExecBatchYakScriptResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecBatchYakScriptClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecBatchYakScriptClient) Recv() (*ExecBatchYakScriptResult, error) {
	m := new(ExecBatchYakScriptResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) GetExecBatchYakScriptUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetExecBatchYakScriptUnfinishedTaskResponse, error) {
	out := new(GetExecBatchYakScriptUnfinishedTaskResponse)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) GetExecBatchYakScriptUnfinishedTaskByUid(ctx context.Context, in *GetExecBatchYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*ExecBatchYakScriptRequest, error) {
	out := new(ExecBatchYakScriptRequest)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) PopExecBatchYakScriptUnfinishedTaskByUid(ctx context.Context, in *GetExecBatchYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*ExecBatchYakScriptRequest, error) {
	out := new(ExecBatchYakScriptRequest)
	err := c.cc.Invoke(ctx, ExecYakScriptApi_PopExecBatchYakScriptUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execYakScriptApiClient) RecoverExecBatchYakScriptUnfinishedTask(ctx context.Context, in *RecoverExecBatchYakScriptUnfinishedTaskRequest, opts ...grpc.CallOption) (ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[4], ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskClient interface {
	Recv() (*ExecBatchYakScriptResult, error)
	grpc.ClientStream
}

type execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskClient) Recv() (*ExecBatchYakScriptResult, error) {
	m := new(ExecBatchYakScriptResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecutePacketYakScript(ctx context.Context, in *ExecutePacketYakScriptParams, opts ...grpc.CallOption) (ExecYakScriptApi_ExecutePacketYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[5], ExecYakScriptApi_ExecutePacketYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecutePacketYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecutePacketYakScriptClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecutePacketYakScriptClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecutePacketYakScriptClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecuteBatchPacketYakScript(ctx context.Context, in *ExecuteBatchPacketYakScriptParams, opts ...grpc.CallOption) (ExecYakScriptApi_ExecuteBatchPacketYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[6], ExecYakScriptApi_ExecuteBatchPacketYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecuteBatchPacketYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecuteBatchPacketYakScriptClient interface {
	Recv() (*ExecBatchYakScriptResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecuteBatchPacketYakScriptClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecuteBatchPacketYakScriptClient) Recv() (*ExecBatchYakScriptResult, error) {
	m := new(ExecBatchYakScriptResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecPacketScan(ctx context.Context, in *ExecPacketScanRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecPacketScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[7], ExecYakScriptApi_ExecPacketScan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecPacketScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecPacketScanClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecPacketScanClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecPacketScanClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *execYakScriptApiClient) ExecYakitPluginsByYakScriptFilter(ctx context.Context, in *ExecYakitPluginsByYakScriptFilterRequest, opts ...grpc.CallOption) (ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecYakScriptApi_ServiceDesc.Streams[8], ExecYakScriptApi_ExecYakitPluginsByYakScriptFilter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execYakScriptApiExecYakitPluginsByYakScriptFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type execYakScriptApiExecYakitPluginsByYakScriptFilterClient struct {
	grpc.ClientStream
}

func (x *execYakScriptApiExecYakitPluginsByYakScriptFilterClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecYakScriptApiServer is the server API for ExecYakScriptApi service.
// All implementations must embed UnimplementedExecYakScriptApiServer
// for forward compatibility
type ExecYakScriptApiServer interface {
	// Exec
	Exec(*ExecRequest, ExecYakScriptApi_ExecServer) error
	QueryExecHistory(context.Context, *ExecHistoryRequest) (*ExecHistoryRecordResponse, error)
	RemoveExecHistory(context.Context, *Empty) (*Empty, error)
	LoadNucleiTemplates(context.Context, *Empty) (*Empty, error)
	AutoUpdateYakModule(*Empty, ExecYakScriptApi_AutoUpdateYakModuleServer) error
	ExecYakScript(*ExecRequest, ExecYakScriptApi_ExecYakScriptServer) error
	ExecBatchYakScript(*ExecBatchYakScriptRequest, ExecYakScriptApi_ExecBatchYakScriptServer) error
	GetExecBatchYakScriptUnfinishedTask(context.Context, *Empty) (*GetExecBatchYakScriptUnfinishedTaskResponse, error)
	GetExecBatchYakScriptUnfinishedTaskByUid(context.Context, *GetExecBatchYakScriptUnfinishedTaskByUidRequest) (*ExecBatchYakScriptRequest, error)
	PopExecBatchYakScriptUnfinishedTaskByUid(context.Context, *GetExecBatchYakScriptUnfinishedTaskByUidRequest) (*ExecBatchYakScriptRequest, error)
	RecoverExecBatchYakScriptUnfinishedTask(*RecoverExecBatchYakScriptUnfinishedTaskRequest, ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskServer) error
	ExecutePacketYakScript(*ExecutePacketYakScriptParams, ExecYakScriptApi_ExecutePacketYakScriptServer) error
	ExecuteBatchPacketYakScript(*ExecuteBatchPacketYakScriptParams, ExecYakScriptApi_ExecuteBatchPacketYakScriptServer) error
	// 新的扫描模式
	ExecPacketScan(*ExecPacketScanRequest, ExecYakScriptApi_ExecPacketScanServer) error
	// 通用的漏洞检测技术方案
	ExecYakitPluginsByYakScriptFilter(*ExecYakitPluginsByYakScriptFilterRequest, ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterServer) error
	mustEmbedUnimplementedExecYakScriptApiServer()
}

// UnimplementedExecYakScriptApiServer must be embedded to have forward compatible implementations.
type UnimplementedExecYakScriptApiServer struct {
}

func (UnimplementedExecYakScriptApiServer) Exec(*ExecRequest, ExecYakScriptApi_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedExecYakScriptApiServer) QueryExecHistory(context.Context, *ExecHistoryRequest) (*ExecHistoryRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExecHistory not implemented")
}
func (UnimplementedExecYakScriptApiServer) RemoveExecHistory(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveExecHistory not implemented")
}
func (UnimplementedExecYakScriptApiServer) LoadNucleiTemplates(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadNucleiTemplates not implemented")
}
func (UnimplementedExecYakScriptApiServer) AutoUpdateYakModule(*Empty, ExecYakScriptApi_AutoUpdateYakModuleServer) error {
	return status.Errorf(codes.Unimplemented, "method AutoUpdateYakModule not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecYakScript(*ExecRequest, ExecYakScriptApi_ExecYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecYakScript not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecBatchYakScript(*ExecBatchYakScriptRequest, ExecYakScriptApi_ExecBatchYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecBatchYakScript not implemented")
}
func (UnimplementedExecYakScriptApiServer) GetExecBatchYakScriptUnfinishedTask(context.Context, *Empty) (*GetExecBatchYakScriptUnfinishedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecBatchYakScriptUnfinishedTask not implemented")
}
func (UnimplementedExecYakScriptApiServer) GetExecBatchYakScriptUnfinishedTaskByUid(context.Context, *GetExecBatchYakScriptUnfinishedTaskByUidRequest) (*ExecBatchYakScriptRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecBatchYakScriptUnfinishedTaskByUid not implemented")
}
func (UnimplementedExecYakScriptApiServer) PopExecBatchYakScriptUnfinishedTaskByUid(context.Context, *GetExecBatchYakScriptUnfinishedTaskByUidRequest) (*ExecBatchYakScriptRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopExecBatchYakScriptUnfinishedTaskByUid not implemented")
}
func (UnimplementedExecYakScriptApiServer) RecoverExecBatchYakScriptUnfinishedTask(*RecoverExecBatchYakScriptUnfinishedTaskRequest, ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RecoverExecBatchYakScriptUnfinishedTask not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecutePacketYakScript(*ExecutePacketYakScriptParams, ExecYakScriptApi_ExecutePacketYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePacketYakScript not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecuteBatchPacketYakScript(*ExecuteBatchPacketYakScriptParams, ExecYakScriptApi_ExecuteBatchPacketYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteBatchPacketYakScript not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecPacketScan(*ExecPacketScanRequest, ExecYakScriptApi_ExecPacketScanServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecPacketScan not implemented")
}
func (UnimplementedExecYakScriptApiServer) ExecYakitPluginsByYakScriptFilter(*ExecYakitPluginsByYakScriptFilterRequest, ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecYakitPluginsByYakScriptFilter not implemented")
}
func (UnimplementedExecYakScriptApiServer) mustEmbedUnimplementedExecYakScriptApiServer() {}

// UnsafeExecYakScriptApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecYakScriptApiServer will
// result in compilation errors.
type UnsafeExecYakScriptApiServer interface {
	mustEmbedUnimplementedExecYakScriptApiServer()
}

func RegisterExecYakScriptApiServer(s grpc.ServiceRegistrar, srv ExecYakScriptApiServer) {
	s.RegisterService(&ExecYakScriptApi_ServiceDesc, srv)
}

func _ExecYakScriptApi_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).Exec(m, &execYakScriptApiExecServer{stream})
}

type ExecYakScriptApi_ExecServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiExecServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_QueryExecHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).QueryExecHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_QueryExecHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).QueryExecHistory(ctx, req.(*ExecHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_RemoveExecHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).RemoveExecHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_RemoveExecHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).RemoveExecHistory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_LoadNucleiTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).LoadNucleiTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_LoadNucleiTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).LoadNucleiTemplates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_AutoUpdateYakModule_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).AutoUpdateYakModule(m, &execYakScriptApiAutoUpdateYakModuleServer{stream})
}

type ExecYakScriptApi_AutoUpdateYakModuleServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiAutoUpdateYakModuleServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiAutoUpdateYakModuleServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecYakScript(m, &execYakScriptApiExecYakScriptServer{stream})
}

type ExecYakScriptApi_ExecYakScriptServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiExecYakScriptServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecYakScriptServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecBatchYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecBatchYakScriptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecBatchYakScript(m, &execYakScriptApiExecBatchYakScriptServer{stream})
}

type ExecYakScriptApi_ExecBatchYakScriptServer interface {
	Send(*ExecBatchYakScriptResult) error
	grpc.ServerStream
}

type execYakScriptApiExecBatchYakScriptServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecBatchYakScriptServer) Send(m *ExecBatchYakScriptResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).GetExecBatchYakScriptUnfinishedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).GetExecBatchYakScriptUnfinishedTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecBatchYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).GetExecBatchYakScriptUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).GetExecBatchYakScriptUnfinishedTaskByUid(ctx, req.(*GetExecBatchYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_PopExecBatchYakScriptUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecBatchYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecYakScriptApiServer).PopExecBatchYakScriptUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecYakScriptApi_PopExecBatchYakScriptUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecYakScriptApiServer).PopExecBatchYakScriptUnfinishedTaskByUid(ctx, req.(*GetExecBatchYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecoverExecBatchYakScriptUnfinishedTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).RecoverExecBatchYakScriptUnfinishedTask(m, &execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskServer{stream})
}

type ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTaskServer interface {
	Send(*ExecBatchYakScriptResult) error
	grpc.ServerStream
}

type execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiRecoverExecBatchYakScriptUnfinishedTaskServer) Send(m *ExecBatchYakScriptResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecutePacketYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutePacketYakScriptParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecutePacketYakScript(m, &execYakScriptApiExecutePacketYakScriptServer{stream})
}

type ExecYakScriptApi_ExecutePacketYakScriptServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiExecutePacketYakScriptServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecutePacketYakScriptServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecuteBatchPacketYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteBatchPacketYakScriptParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecuteBatchPacketYakScript(m, &execYakScriptApiExecuteBatchPacketYakScriptServer{stream})
}

type ExecYakScriptApi_ExecuteBatchPacketYakScriptServer interface {
	Send(*ExecBatchYakScriptResult) error
	grpc.ServerStream
}

type execYakScriptApiExecuteBatchPacketYakScriptServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecuteBatchPacketYakScriptServer) Send(m *ExecBatchYakScriptResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecPacketScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecPacketScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecPacketScan(m, &execYakScriptApiExecPacketScanServer{stream})
}

type ExecYakScriptApi_ExecPacketScanServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiExecPacketScanServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecPacketScanServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecYakScriptApi_ExecYakitPluginsByYakScriptFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecYakitPluginsByYakScriptFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecYakScriptApiServer).ExecYakitPluginsByYakScriptFilter(m, &execYakScriptApiExecYakitPluginsByYakScriptFilterServer{stream})
}

type ExecYakScriptApi_ExecYakitPluginsByYakScriptFilterServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type execYakScriptApiExecYakitPluginsByYakScriptFilterServer struct {
	grpc.ServerStream
}

func (x *execYakScriptApiExecYakitPluginsByYakScriptFilterServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

// ExecYakScriptApi_ServiceDesc is the grpc.ServiceDesc for ExecYakScriptApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecYakScriptApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.ExecYakScriptApi",
	HandlerType: (*ExecYakScriptApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryExecHistory",
			Handler:    _ExecYakScriptApi_QueryExecHistory_Handler,
		},
		{
			MethodName: "RemoveExecHistory",
			Handler:    _ExecYakScriptApi_RemoveExecHistory_Handler,
		},
		{
			MethodName: "LoadNucleiTemplates",
			Handler:    _ExecYakScriptApi_LoadNucleiTemplates_Handler,
		},
		{
			MethodName: "GetExecBatchYakScriptUnfinishedTask",
			Handler:    _ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTask_Handler,
		},
		{
			MethodName: "GetExecBatchYakScriptUnfinishedTaskByUid",
			Handler:    _ExecYakScriptApi_GetExecBatchYakScriptUnfinishedTaskByUid_Handler,
		},
		{
			MethodName: "PopExecBatchYakScriptUnfinishedTaskByUid",
			Handler:    _ExecYakScriptApi_PopExecBatchYakScriptUnfinishedTaskByUid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _ExecYakScriptApi_Exec_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoUpdateYakModule",
			Handler:       _ExecYakScriptApi_AutoUpdateYakModule_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecYakScript",
			Handler:       _ExecYakScriptApi_ExecYakScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecBatchYakScript",
			Handler:       _ExecYakScriptApi_ExecBatchYakScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecoverExecBatchYakScriptUnfinishedTask",
			Handler:       _ExecYakScriptApi_RecoverExecBatchYakScriptUnfinishedTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecutePacketYakScript",
			Handler:       _ExecYakScriptApi_ExecutePacketYakScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteBatchPacketYakScript",
			Handler:       _ExecYakScriptApi_ExecuteBatchPacketYakScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecPacketScan",
			Handler:       _ExecYakScriptApi_ExecPacketScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecYakitPluginsByYakScriptFilter",
			Handler:       _ExecYakScriptApi_ExecYakitPluginsByYakScriptFilter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exec_yak_script_api.proto",
}
