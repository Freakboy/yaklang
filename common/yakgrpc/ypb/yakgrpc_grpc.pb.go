// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: yakgrpc.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Yak_Version_FullMethodName                           = "/ypb.Yak/Version"
	Yak_GetMachineID_FullMethodName                      = "/ypb.Yak/GetMachineID"
	Yak_Echo_FullMethodName                              = "/ypb.Yak/Echo"
	Yak_OpenPort_FullMethodName                          = "/ypb.Yak/OpenPort"
	Yak_ExecYakitPluginsByYakScriptFilter_FullMethodName = "/ypb.Yak/ExecYakitPluginsByYakScriptFilter"
	Yak_ExtractDataToFile_FullMethodName                 = "/ypb.Yak/ExtractDataToFile"
	Yak_ExecPacketScan_FullMethodName                    = "/ypb.Yak/ExecPacketScan"
	Yak_CreateYaklangShell_FullMethodName                = "/ypb.Yak/CreateYaklangShell"
)

// YakClient is the client API for Yak service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YakClient interface {
	// version
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// machine id
	GetMachineID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMachineIDResponse, error)
	// echo 通常用于测试服务是否通畅
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResposne, error)
	// 开启端口
	OpenPort(ctx context.Context, opts ...grpc.CallOption) (Yak_OpenPortClient, error)
	// 通用的漏洞检测技术方案
	ExecYakitPluginsByYakScriptFilter(ctx context.Context, in *ExecYakitPluginsByYakScriptFilterRequest, opts ...grpc.CallOption) (Yak_ExecYakitPluginsByYakScriptFilterClient, error)
	ExtractDataToFile(ctx context.Context, opts ...grpc.CallOption) (Yak_ExtractDataToFileClient, error)
	// 新的扫描模式
	ExecPacketScan(ctx context.Context, in *ExecPacketScanRequest, opts ...grpc.CallOption) (Yak_ExecPacketScanClient, error)
	// Yaklang Shell
	// 创建一个交互式 Shell
	CreateYaklangShell(ctx context.Context, opts ...grpc.CallOption) (Yak_CreateYaklangShellClient, error)
}

type yakClient struct {
	cc grpc.ClientConnInterface
}

func NewYakClient(cc grpc.ClientConnInterface) YakClient {
	return &yakClient{cc}
}

func (c *yakClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, Yak_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakClient) GetMachineID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMachineIDResponse, error) {
	out := new(GetMachineIDResponse)
	err := c.cc.Invoke(ctx, Yak_GetMachineID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResposne, error) {
	out := new(EchoResposne)
	err := c.cc.Invoke(ctx, Yak_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakClient) OpenPort(ctx context.Context, opts ...grpc.CallOption) (Yak_OpenPortClient, error) {
	stream, err := c.cc.NewStream(ctx, &Yak_ServiceDesc.Streams[0], Yak_OpenPort_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakOpenPortClient{stream}
	return x, nil
}

type Yak_OpenPortClient interface {
	Send(*Input) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type yakOpenPortClient struct {
	grpc.ClientStream
}

func (x *yakOpenPortClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yakOpenPortClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakClient) ExecYakitPluginsByYakScriptFilter(ctx context.Context, in *ExecYakitPluginsByYakScriptFilterRequest, opts ...grpc.CallOption) (Yak_ExecYakitPluginsByYakScriptFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Yak_ServiceDesc.Streams[1], Yak_ExecYakitPluginsByYakScriptFilter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakExecYakitPluginsByYakScriptFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Yak_ExecYakitPluginsByYakScriptFilterClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type yakExecYakitPluginsByYakScriptFilterClient struct {
	grpc.ClientStream
}

func (x *yakExecYakitPluginsByYakScriptFilterClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakClient) ExtractDataToFile(ctx context.Context, opts ...grpc.CallOption) (Yak_ExtractDataToFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Yak_ServiceDesc.Streams[2], Yak_ExtractDataToFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakExtractDataToFileClient{stream}
	return x, nil
}

type Yak_ExtractDataToFileClient interface {
	Send(*ExtractDataToFileRequest) error
	Recv() (*ExtractDataToFileResult, error)
	grpc.ClientStream
}

type yakExtractDataToFileClient struct {
	grpc.ClientStream
}

func (x *yakExtractDataToFileClient) Send(m *ExtractDataToFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yakExtractDataToFileClient) Recv() (*ExtractDataToFileResult, error) {
	m := new(ExtractDataToFileResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakClient) ExecPacketScan(ctx context.Context, in *ExecPacketScanRequest, opts ...grpc.CallOption) (Yak_ExecPacketScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Yak_ServiceDesc.Streams[3], Yak_ExecPacketScan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakExecPacketScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Yak_ExecPacketScanClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type yakExecPacketScanClient struct {
	grpc.ClientStream
}

func (x *yakExecPacketScanClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakClient) CreateYaklangShell(ctx context.Context, opts ...grpc.CallOption) (Yak_CreateYaklangShellClient, error) {
	stream, err := c.cc.NewStream(ctx, &Yak_ServiceDesc.Streams[4], Yak_CreateYaklangShell_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakCreateYaklangShellClient{stream}
	return x, nil
}

type Yak_CreateYaklangShellClient interface {
	Send(*YaklangShellRequest) error
	Recv() (*YaklangShellResponse, error)
	grpc.ClientStream
}

type yakCreateYaklangShellClient struct {
	grpc.ClientStream
}

func (x *yakCreateYaklangShellClient) Send(m *YaklangShellRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yakCreateYaklangShellClient) Recv() (*YaklangShellResponse, error) {
	m := new(YaklangShellResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YakServer is the server API for Yak service.
// All implementations must embed UnimplementedYakServer
// for forward compatibility
type YakServer interface {
	// version
	Version(context.Context, *Empty) (*VersionResponse, error)
	// machine id
	GetMachineID(context.Context, *Empty) (*GetMachineIDResponse, error)
	// echo 通常用于测试服务是否通畅
	Echo(context.Context, *EchoRequest) (*EchoResposne, error)
	// 开启端口
	OpenPort(Yak_OpenPortServer) error
	// 通用的漏洞检测技术方案
	ExecYakitPluginsByYakScriptFilter(*ExecYakitPluginsByYakScriptFilterRequest, Yak_ExecYakitPluginsByYakScriptFilterServer) error
	ExtractDataToFile(Yak_ExtractDataToFileServer) error
	// 新的扫描模式
	ExecPacketScan(*ExecPacketScanRequest, Yak_ExecPacketScanServer) error
	// Yaklang Shell
	// 创建一个交互式 Shell
	CreateYaklangShell(Yak_CreateYaklangShellServer) error
	mustEmbedUnimplementedYakServer()
}

// UnimplementedYakServer must be embedded to have forward compatible implementations.
type UnimplementedYakServer struct {
}

func (UnimplementedYakServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedYakServer) GetMachineID(context.Context, *Empty) (*GetMachineIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineID not implemented")
}
func (UnimplementedYakServer) Echo(context.Context, *EchoRequest) (*EchoResposne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedYakServer) OpenPort(Yak_OpenPortServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenPort not implemented")
}
func (UnimplementedYakServer) ExecYakitPluginsByYakScriptFilter(*ExecYakitPluginsByYakScriptFilterRequest, Yak_ExecYakitPluginsByYakScriptFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecYakitPluginsByYakScriptFilter not implemented")
}
func (UnimplementedYakServer) ExtractDataToFile(Yak_ExtractDataToFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtractDataToFile not implemented")
}
func (UnimplementedYakServer) ExecPacketScan(*ExecPacketScanRequest, Yak_ExecPacketScanServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecPacketScan not implemented")
}
func (UnimplementedYakServer) CreateYaklangShell(Yak_CreateYaklangShellServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateYaklangShell not implemented")
}
func (UnimplementedYakServer) mustEmbedUnimplementedYakServer() {}

// UnsafeYakServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YakServer will
// result in compilation errors.
type UnsafeYakServer interface {
	mustEmbedUnimplementedYakServer()
}

func RegisterYakServer(s grpc.ServiceRegistrar, srv YakServer) {
	s.RegisterService(&Yak_ServiceDesc, srv)
}

func _Yak_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yak_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yak_GetMachineID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakServer).GetMachineID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yak_GetMachineID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakServer).GetMachineID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yak_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yak_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yak_OpenPort_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YakServer).OpenPort(&yakOpenPortServer{stream})
}

type Yak_OpenPortServer interface {
	Send(*Output) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type yakOpenPortServer struct {
	grpc.ServerStream
}

func (x *yakOpenPortServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yakOpenPortServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Yak_ExecYakitPluginsByYakScriptFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecYakitPluginsByYakScriptFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YakServer).ExecYakitPluginsByYakScriptFilter(m, &yakExecYakitPluginsByYakScriptFilterServer{stream})
}

type Yak_ExecYakitPluginsByYakScriptFilterServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type yakExecYakitPluginsByYakScriptFilterServer struct {
	grpc.ServerStream
}

func (x *yakExecYakitPluginsByYakScriptFilterServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Yak_ExtractDataToFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YakServer).ExtractDataToFile(&yakExtractDataToFileServer{stream})
}

type Yak_ExtractDataToFileServer interface {
	Send(*ExtractDataToFileResult) error
	Recv() (*ExtractDataToFileRequest, error)
	grpc.ServerStream
}

type yakExtractDataToFileServer struct {
	grpc.ServerStream
}

func (x *yakExtractDataToFileServer) Send(m *ExtractDataToFileResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yakExtractDataToFileServer) Recv() (*ExtractDataToFileRequest, error) {
	m := new(ExtractDataToFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Yak_ExecPacketScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecPacketScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YakServer).ExecPacketScan(m, &yakExecPacketScanServer{stream})
}

type Yak_ExecPacketScanServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type yakExecPacketScanServer struct {
	grpc.ServerStream
}

func (x *yakExecPacketScanServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Yak_CreateYaklangShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YakServer).CreateYaklangShell(&yakCreateYaklangShellServer{stream})
}

type Yak_CreateYaklangShellServer interface {
	Send(*YaklangShellResponse) error
	Recv() (*YaklangShellRequest, error)
	grpc.ServerStream
}

type yakCreateYaklangShellServer struct {
	grpc.ServerStream
}

func (x *yakCreateYaklangShellServer) Send(m *YaklangShellResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yakCreateYaklangShellServer) Recv() (*YaklangShellRequest, error) {
	m := new(YaklangShellRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Yak_ServiceDesc is the grpc.ServiceDesc for Yak service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Yak_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.Yak",
	HandlerType: (*YakServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Yak_Version_Handler,
		},
		{
			MethodName: "GetMachineID",
			Handler:    _Yak_GetMachineID_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Yak_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenPort",
			Handler:       _Yak_OpenPort_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecYakitPluginsByYakScriptFilter",
			Handler:       _Yak_ExecYakitPluginsByYakScriptFilter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExtractDataToFile",
			Handler:       _Yak_ExtractDataToFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecPacketScan",
			Handler:       _Yak_ExecPacketScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateYaklangShell",
			Handler:       _Yak_CreateYaklangShell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yakgrpc.proto",
}
