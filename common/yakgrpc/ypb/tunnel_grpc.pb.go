// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tunnel.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TunnelService_GetTunnelServerExternalIP_FullMethodName    = "/ypb.TunnelService/GetTunnelServerExternalIP"
	TunnelService_VerifyTunnelServerDomain_FullMethodName     = "/ypb.TunnelService/VerifyTunnelServerDomain"
	TunnelService_SetYakBridgeLogServer_FullMethodName        = "/ypb.TunnelService/SetYakBridgeLogServer"
	TunnelService_GetCurrentYakBridgeLogServer_FullMethodName = "/ypb.TunnelService/GetCurrentYakBridgeLogServer"
	TunnelService_RequireDNSLogDomain_FullMethodName          = "/ypb.TunnelService/RequireDNSLogDomain"
	TunnelService_QueryDNSLogByToken_FullMethodName           = "/ypb.TunnelService/QueryDNSLogByToken"
	TunnelService_RequireICMPRandomLength_FullMethodName      = "/ypb.TunnelService/RequireICMPRandomLength"
	TunnelService_QueryICMPTrigger_FullMethodName             = "/ypb.TunnelService/QueryICMPTrigger"
	TunnelService_RequireRandomPortToken_FullMethodName       = "/ypb.TunnelService/RequireRandomPortToken"
	TunnelService_QueryRandomPortTrigger_FullMethodName       = "/ypb.TunnelService/QueryRandomPortTrigger"
)

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelServiceClient interface {
	// Tunnel Server
	GetTunnelServerExternalIP(ctx context.Context, in *GetTunnelServerExternalIPParams, opts ...grpc.CallOption) (*GetTunnelServerExternalIPResponse, error)
	VerifyTunnelServerDomain(ctx context.Context, in *VerifyTunnelServerDomainParams, opts ...grpc.CallOption) (*VerifyTunnelServerDomainResponse, error)
	// DNSLog / ICMP / RandomTrigger
	SetYakBridgeLogServer(ctx context.Context, in *YakDNSLogBridgeAddr, opts ...grpc.CallOption) (*Empty, error)
	GetCurrentYakBridgeLogServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakDNSLogBridgeAddr, error)
	RequireDNSLogDomain(ctx context.Context, in *YakDNSLogBridgeAddr, opts ...grpc.CallOption) (*DNSLogRootDomain, error)
	QueryDNSLogByToken(ctx context.Context, in *QueryDNSLogByTokenRequest, opts ...grpc.CallOption) (*QueryDNSLogByTokenResponse, error)
	RequireICMPRandomLength(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequireICMPRandomLengthResponse, error)
	QueryICMPTrigger(ctx context.Context, in *QueryICMPTriggerRequest, opts ...grpc.CallOption) (*QueryICMPTriggerResponse, error)
	RequireRandomPortToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RandomPortInfo, error)
	QueryRandomPortTrigger(ctx context.Context, in *QueryRandomPortTriggerRequest, opts ...grpc.CallOption) (*RandomPortTriggerNotification, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) GetTunnelServerExternalIP(ctx context.Context, in *GetTunnelServerExternalIPParams, opts ...grpc.CallOption) (*GetTunnelServerExternalIPResponse, error) {
	out := new(GetTunnelServerExternalIPResponse)
	err := c.cc.Invoke(ctx, TunnelService_GetTunnelServerExternalIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) VerifyTunnelServerDomain(ctx context.Context, in *VerifyTunnelServerDomainParams, opts ...grpc.CallOption) (*VerifyTunnelServerDomainResponse, error) {
	out := new(VerifyTunnelServerDomainResponse)
	err := c.cc.Invoke(ctx, TunnelService_VerifyTunnelServerDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) SetYakBridgeLogServer(ctx context.Context, in *YakDNSLogBridgeAddr, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TunnelService_SetYakBridgeLogServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) GetCurrentYakBridgeLogServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakDNSLogBridgeAddr, error) {
	out := new(YakDNSLogBridgeAddr)
	err := c.cc.Invoke(ctx, TunnelService_GetCurrentYakBridgeLogServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) RequireDNSLogDomain(ctx context.Context, in *YakDNSLogBridgeAddr, opts ...grpc.CallOption) (*DNSLogRootDomain, error) {
	out := new(DNSLogRootDomain)
	err := c.cc.Invoke(ctx, TunnelService_RequireDNSLogDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) QueryDNSLogByToken(ctx context.Context, in *QueryDNSLogByTokenRequest, opts ...grpc.CallOption) (*QueryDNSLogByTokenResponse, error) {
	out := new(QueryDNSLogByTokenResponse)
	err := c.cc.Invoke(ctx, TunnelService_QueryDNSLogByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) RequireICMPRandomLength(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequireICMPRandomLengthResponse, error) {
	out := new(RequireICMPRandomLengthResponse)
	err := c.cc.Invoke(ctx, TunnelService_RequireICMPRandomLength_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) QueryICMPTrigger(ctx context.Context, in *QueryICMPTriggerRequest, opts ...grpc.CallOption) (*QueryICMPTriggerResponse, error) {
	out := new(QueryICMPTriggerResponse)
	err := c.cc.Invoke(ctx, TunnelService_QueryICMPTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) RequireRandomPortToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RandomPortInfo, error) {
	out := new(RandomPortInfo)
	err := c.cc.Invoke(ctx, TunnelService_RequireRandomPortToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelServiceClient) QueryRandomPortTrigger(ctx context.Context, in *QueryRandomPortTriggerRequest, opts ...grpc.CallOption) (*RandomPortTriggerNotification, error) {
	out := new(RandomPortTriggerNotification)
	err := c.cc.Invoke(ctx, TunnelService_QueryRandomPortTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServiceServer is the server API for TunnelService service.
// All implementations must embed UnimplementedTunnelServiceServer
// for forward compatibility
type TunnelServiceServer interface {
	// Tunnel Server
	GetTunnelServerExternalIP(context.Context, *GetTunnelServerExternalIPParams) (*GetTunnelServerExternalIPResponse, error)
	VerifyTunnelServerDomain(context.Context, *VerifyTunnelServerDomainParams) (*VerifyTunnelServerDomainResponse, error)
	// DNSLog / ICMP / RandomTrigger
	SetYakBridgeLogServer(context.Context, *YakDNSLogBridgeAddr) (*Empty, error)
	GetCurrentYakBridgeLogServer(context.Context, *Empty) (*YakDNSLogBridgeAddr, error)
	RequireDNSLogDomain(context.Context, *YakDNSLogBridgeAddr) (*DNSLogRootDomain, error)
	QueryDNSLogByToken(context.Context, *QueryDNSLogByTokenRequest) (*QueryDNSLogByTokenResponse, error)
	RequireICMPRandomLength(context.Context, *Empty) (*RequireICMPRandomLengthResponse, error)
	QueryICMPTrigger(context.Context, *QueryICMPTriggerRequest) (*QueryICMPTriggerResponse, error)
	RequireRandomPortToken(context.Context, *Empty) (*RandomPortInfo, error)
	QueryRandomPortTrigger(context.Context, *QueryRandomPortTriggerRequest) (*RandomPortTriggerNotification, error)
	mustEmbedUnimplementedTunnelServiceServer()
}

// UnimplementedTunnelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServiceServer struct {
}

func (UnimplementedTunnelServiceServer) GetTunnelServerExternalIP(context.Context, *GetTunnelServerExternalIPParams) (*GetTunnelServerExternalIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelServerExternalIP not implemented")
}
func (UnimplementedTunnelServiceServer) VerifyTunnelServerDomain(context.Context, *VerifyTunnelServerDomainParams) (*VerifyTunnelServerDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTunnelServerDomain not implemented")
}
func (UnimplementedTunnelServiceServer) SetYakBridgeLogServer(context.Context, *YakDNSLogBridgeAddr) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetYakBridgeLogServer not implemented")
}
func (UnimplementedTunnelServiceServer) GetCurrentYakBridgeLogServer(context.Context, *Empty) (*YakDNSLogBridgeAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentYakBridgeLogServer not implemented")
}
func (UnimplementedTunnelServiceServer) RequireDNSLogDomain(context.Context, *YakDNSLogBridgeAddr) (*DNSLogRootDomain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireDNSLogDomain not implemented")
}
func (UnimplementedTunnelServiceServer) QueryDNSLogByToken(context.Context, *QueryDNSLogByTokenRequest) (*QueryDNSLogByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDNSLogByToken not implemented")
}
func (UnimplementedTunnelServiceServer) RequireICMPRandomLength(context.Context, *Empty) (*RequireICMPRandomLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireICMPRandomLength not implemented")
}
func (UnimplementedTunnelServiceServer) QueryICMPTrigger(context.Context, *QueryICMPTriggerRequest) (*QueryICMPTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryICMPTrigger not implemented")
}
func (UnimplementedTunnelServiceServer) RequireRandomPortToken(context.Context, *Empty) (*RandomPortInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireRandomPortToken not implemented")
}
func (UnimplementedTunnelServiceServer) QueryRandomPortTrigger(context.Context, *QueryRandomPortTriggerRequest) (*RandomPortTriggerNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRandomPortTrigger not implemented")
}
func (UnimplementedTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {}

// UnsafeTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServiceServer will
// result in compilation errors.
type UnsafeTunnelServiceServer interface {
	mustEmbedUnimplementedTunnelServiceServer()
}

func RegisterTunnelServiceServer(s grpc.ServiceRegistrar, srv TunnelServiceServer) {
	s.RegisterService(&TunnelService_ServiceDesc, srv)
}

func _TunnelService_GetTunnelServerExternalIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelServerExternalIPParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).GetTunnelServerExternalIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_GetTunnelServerExternalIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).GetTunnelServerExternalIP(ctx, req.(*GetTunnelServerExternalIPParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_VerifyTunnelServerDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTunnelServerDomainParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).VerifyTunnelServerDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_VerifyTunnelServerDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).VerifyTunnelServerDomain(ctx, req.(*VerifyTunnelServerDomainParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_SetYakBridgeLogServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YakDNSLogBridgeAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).SetYakBridgeLogServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_SetYakBridgeLogServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).SetYakBridgeLogServer(ctx, req.(*YakDNSLogBridgeAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_GetCurrentYakBridgeLogServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).GetCurrentYakBridgeLogServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_GetCurrentYakBridgeLogServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).GetCurrentYakBridgeLogServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_RequireDNSLogDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YakDNSLogBridgeAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).RequireDNSLogDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_RequireDNSLogDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).RequireDNSLogDomain(ctx, req.(*YakDNSLogBridgeAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_QueryDNSLogByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDNSLogByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).QueryDNSLogByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_QueryDNSLogByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).QueryDNSLogByToken(ctx, req.(*QueryDNSLogByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_RequireICMPRandomLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).RequireICMPRandomLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_RequireICMPRandomLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).RequireICMPRandomLength(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_QueryICMPTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryICMPTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).QueryICMPTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_QueryICMPTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).QueryICMPTrigger(ctx, req.(*QueryICMPTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_RequireRandomPortToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).RequireRandomPortToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_RequireRandomPortToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).RequireRandomPortToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelService_QueryRandomPortTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRandomPortTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).QueryRandomPortTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_QueryRandomPortTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).QueryRandomPortTrigger(ctx, req.(*QueryRandomPortTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelService_ServiceDesc is the grpc.ServiceDesc for TunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTunnelServerExternalIP",
			Handler:    _TunnelService_GetTunnelServerExternalIP_Handler,
		},
		{
			MethodName: "VerifyTunnelServerDomain",
			Handler:    _TunnelService_VerifyTunnelServerDomain_Handler,
		},
		{
			MethodName: "SetYakBridgeLogServer",
			Handler:    _TunnelService_SetYakBridgeLogServer_Handler,
		},
		{
			MethodName: "GetCurrentYakBridgeLogServer",
			Handler:    _TunnelService_GetCurrentYakBridgeLogServer_Handler,
		},
		{
			MethodName: "RequireDNSLogDomain",
			Handler:    _TunnelService_RequireDNSLogDomain_Handler,
		},
		{
			MethodName: "QueryDNSLogByToken",
			Handler:    _TunnelService_QueryDNSLogByToken_Handler,
		},
		{
			MethodName: "RequireICMPRandomLength",
			Handler:    _TunnelService_RequireICMPRandomLength_Handler,
		},
		{
			MethodName: "QueryICMPTrigger",
			Handler:    _TunnelService_QueryICMPTrigger_Handler,
		},
		{
			MethodName: "RequireRandomPortToken",
			Handler:    _TunnelService_RequireRandomPortToken_Handler,
		},
		{
			MethodName: "QueryRandomPortTrigger",
			Handler:    _TunnelService_QueryRandomPortTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnel.proto",
}
