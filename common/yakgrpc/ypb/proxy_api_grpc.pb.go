// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proxy_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyApi_GetEngineDefaultProxy_FullMethodName = "/ypb.ProxyApi/GetEngineDefaultProxy"
	ProxyApi_SetEngineDefaultProxy_FullMethodName = "/ypb.ProxyApi/SetEngineDefaultProxy"
)

// ProxyApiClient is the client API for ProxyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyApiClient interface {
	GetEngineDefaultProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DefaultProxyResult, error)
	SetEngineDefaultProxy(ctx context.Context, in *DefaultProxyResult, opts ...grpc.CallOption) (*Empty, error)
}

type proxyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyApiClient(cc grpc.ClientConnInterface) ProxyApiClient {
	return &proxyApiClient{cc}
}

func (c *proxyApiClient) GetEngineDefaultProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DefaultProxyResult, error) {
	out := new(DefaultProxyResult)
	err := c.cc.Invoke(ctx, ProxyApi_GetEngineDefaultProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyApiClient) SetEngineDefaultProxy(ctx context.Context, in *DefaultProxyResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProxyApi_SetEngineDefaultProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyApiServer is the server API for ProxyApi service.
// All implementations must embed UnimplementedProxyApiServer
// for forward compatibility
type ProxyApiServer interface {
	GetEngineDefaultProxy(context.Context, *Empty) (*DefaultProxyResult, error)
	SetEngineDefaultProxy(context.Context, *DefaultProxyResult) (*Empty, error)
	mustEmbedUnimplementedProxyApiServer()
}

// UnimplementedProxyApiServer must be embedded to have forward compatible implementations.
type UnimplementedProxyApiServer struct {
}

func (UnimplementedProxyApiServer) GetEngineDefaultProxy(context.Context, *Empty) (*DefaultProxyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineDefaultProxy not implemented")
}
func (UnimplementedProxyApiServer) SetEngineDefaultProxy(context.Context, *DefaultProxyResult) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEngineDefaultProxy not implemented")
}
func (UnimplementedProxyApiServer) mustEmbedUnimplementedProxyApiServer() {}

// UnsafeProxyApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyApiServer will
// result in compilation errors.
type UnsafeProxyApiServer interface {
	mustEmbedUnimplementedProxyApiServer()
}

func RegisterProxyApiServer(s grpc.ServiceRegistrar, srv ProxyApiServer) {
	s.RegisterService(&ProxyApi_ServiceDesc, srv)
}

func _ProxyApi_GetEngineDefaultProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyApiServer).GetEngineDefaultProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyApi_GetEngineDefaultProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyApiServer).GetEngineDefaultProxy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyApi_SetEngineDefaultProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultProxyResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyApiServer).SetEngineDefaultProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyApi_SetEngineDefaultProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyApiServer).SetEngineDefaultProxy(ctx, req.(*DefaultProxyResult))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyApi_ServiceDesc is the grpc.ServiceDesc for ProxyApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.ProxyApi",
	HandlerType: (*ProxyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEngineDefaultProxy",
			Handler:    _ProxyApi_GetEngineDefaultProxy_Handler,
		},
		{
			MethodName: "SetEngineDefaultProxy",
			Handler:    _ProxyApi_SetEngineDefaultProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_api.proto",
}
