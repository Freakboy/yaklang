// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: assets_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetsApi_QueryPorts_FullMethodName    = "/ypb.AssetsApi/QueryPorts"
	AssetsApi_DeletePorts_FullMethodName   = "/ypb.AssetsApi/DeletePorts"
	AssetsApi_QueryHosts_FullMethodName    = "/ypb.AssetsApi/QueryHosts"
	AssetsApi_DeleteHosts_FullMethodName   = "/ypb.AssetsApi/DeleteHosts"
	AssetsApi_QueryDomains_FullMethodName  = "/ypb.AssetsApi/QueryDomains"
	AssetsApi_DeleteDomains_FullMethodName = "/ypb.AssetsApi/DeleteDomains"
)

// AssetsApiClient is the client API for AssetsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsApiClient interface {
	// 资产管理
	QueryPorts(ctx context.Context, in *QueryPortsRequest, opts ...grpc.CallOption) (*QueryPortsResponse, error)
	DeletePorts(ctx context.Context, in *DeletePortsRequest, opts ...grpc.CallOption) (*Empty, error)
	QueryHosts(ctx context.Context, in *QueryHostsRequest, opts ...grpc.CallOption) (*QueryHostsResponse, error)
	DeleteHosts(ctx context.Context, in *DeleteHostsRequest, opts ...grpc.CallOption) (*Empty, error)
	QueryDomains(ctx context.Context, in *QueryDomainsRequest, opts ...grpc.CallOption) (*QueryDomainsResponse, error)
	DeleteDomains(ctx context.Context, in *DeleteDomainsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type assetsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsApiClient(cc grpc.ClientConnInterface) AssetsApiClient {
	return &assetsApiClient{cc}
}

func (c *assetsApiClient) QueryPorts(ctx context.Context, in *QueryPortsRequest, opts ...grpc.CallOption) (*QueryPortsResponse, error) {
	out := new(QueryPortsResponse)
	err := c.cc.Invoke(ctx, AssetsApi_QueryPorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) DeletePorts(ctx context.Context, in *DeletePortsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AssetsApi_DeletePorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) QueryHosts(ctx context.Context, in *QueryHostsRequest, opts ...grpc.CallOption) (*QueryHostsResponse, error) {
	out := new(QueryHostsResponse)
	err := c.cc.Invoke(ctx, AssetsApi_QueryHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) DeleteHosts(ctx context.Context, in *DeleteHostsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AssetsApi_DeleteHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) QueryDomains(ctx context.Context, in *QueryDomainsRequest, opts ...grpc.CallOption) (*QueryDomainsResponse, error) {
	out := new(QueryDomainsResponse)
	err := c.cc.Invoke(ctx, AssetsApi_QueryDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsApiClient) DeleteDomains(ctx context.Context, in *DeleteDomainsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AssetsApi_DeleteDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsApiServer is the server API for AssetsApi service.
// All implementations must embed UnimplementedAssetsApiServer
// for forward compatibility
type AssetsApiServer interface {
	// 资产管理
	QueryPorts(context.Context, *QueryPortsRequest) (*QueryPortsResponse, error)
	DeletePorts(context.Context, *DeletePortsRequest) (*Empty, error)
	QueryHosts(context.Context, *QueryHostsRequest) (*QueryHostsResponse, error)
	DeleteHosts(context.Context, *DeleteHostsRequest) (*Empty, error)
	QueryDomains(context.Context, *QueryDomainsRequest) (*QueryDomainsResponse, error)
	DeleteDomains(context.Context, *DeleteDomainsRequest) (*Empty, error)
	mustEmbedUnimplementedAssetsApiServer()
}

// UnimplementedAssetsApiServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsApiServer struct {
}

func (UnimplementedAssetsApiServer) QueryPorts(context.Context, *QueryPortsRequest) (*QueryPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPorts not implemented")
}
func (UnimplementedAssetsApiServer) DeletePorts(context.Context, *DeletePortsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePorts not implemented")
}
func (UnimplementedAssetsApiServer) QueryHosts(context.Context, *QueryHostsRequest) (*QueryHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHosts not implemented")
}
func (UnimplementedAssetsApiServer) DeleteHosts(context.Context, *DeleteHostsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHosts not implemented")
}
func (UnimplementedAssetsApiServer) QueryDomains(context.Context, *QueryDomainsRequest) (*QueryDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDomains not implemented")
}
func (UnimplementedAssetsApiServer) DeleteDomains(context.Context, *DeleteDomainsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomains not implemented")
}
func (UnimplementedAssetsApiServer) mustEmbedUnimplementedAssetsApiServer() {}

// UnsafeAssetsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsApiServer will
// result in compilation errors.
type UnsafeAssetsApiServer interface {
	mustEmbedUnimplementedAssetsApiServer()
}

func RegisterAssetsApiServer(s grpc.ServiceRegistrar, srv AssetsApiServer) {
	s.RegisterService(&AssetsApi_ServiceDesc, srv)
}

func _AssetsApi_QueryPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).QueryPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_QueryPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).QueryPorts(ctx, req.(*QueryPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_DeletePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).DeletePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_DeletePorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).DeletePorts(ctx, req.(*DeletePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_QueryHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).QueryHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_QueryHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).QueryHosts(ctx, req.(*QueryHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_DeleteHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).DeleteHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_DeleteHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).DeleteHosts(ctx, req.(*DeleteHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_QueryDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).QueryDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_QueryDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).QueryDomains(ctx, req.(*QueryDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsApi_DeleteDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsApiServer).DeleteDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsApi_DeleteDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsApiServer).DeleteDomains(ctx, req.(*DeleteDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsApi_ServiceDesc is the grpc.ServiceDesc for AssetsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.AssetsApi",
	HandlerType: (*AssetsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPorts",
			Handler:    _AssetsApi_QueryPorts_Handler,
		},
		{
			MethodName: "DeletePorts",
			Handler:    _AssetsApi_DeletePorts_Handler,
		},
		{
			MethodName: "QueryHosts",
			Handler:    _AssetsApi_QueryHosts_Handler,
		},
		{
			MethodName: "DeleteHosts",
			Handler:    _AssetsApi_DeleteHosts_Handler,
		},
		{
			MethodName: "QueryDomains",
			Handler:    _AssetsApi_QueryDomains_Handler,
		},
		{
			MethodName: "DeleteDomains",
			Handler:    _AssetsApi_DeleteDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets_api.proto",
}
