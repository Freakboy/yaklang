// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: brute.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BruteService_StartBrute_FullMethodName             = "/ypb.BruteService/StartBrute"
	BruteService_GetAvailableBruteTypes_FullMethodName = "/ypb.BruteService/GetAvailableBruteTypes"
)

// BruteServiceClient is the client API for BruteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BruteServiceClient interface {
	// Bruter
	StartBrute(ctx context.Context, in *StartBruteParams, opts ...grpc.CallOption) (BruteService_StartBruteClient, error)
	GetAvailableBruteTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAvailableBruteTypesResponse, error)
}

type bruteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBruteServiceClient(cc grpc.ClientConnInterface) BruteServiceClient {
	return &bruteServiceClient{cc}
}

func (c *bruteServiceClient) StartBrute(ctx context.Context, in *StartBruteParams, opts ...grpc.CallOption) (BruteService_StartBruteClient, error) {
	stream, err := c.cc.NewStream(ctx, &BruteService_ServiceDesc.Streams[0], BruteService_StartBrute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bruteServiceStartBruteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BruteService_StartBruteClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type bruteServiceStartBruteClient struct {
	grpc.ClientStream
}

func (x *bruteServiceStartBruteClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bruteServiceClient) GetAvailableBruteTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAvailableBruteTypesResponse, error) {
	out := new(GetAvailableBruteTypesResponse)
	err := c.cc.Invoke(ctx, BruteService_GetAvailableBruteTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BruteServiceServer is the server API for BruteService service.
// All implementations must embed UnimplementedBruteServiceServer
// for forward compatibility
type BruteServiceServer interface {
	// Bruter
	StartBrute(*StartBruteParams, BruteService_StartBruteServer) error
	GetAvailableBruteTypes(context.Context, *Empty) (*GetAvailableBruteTypesResponse, error)
	mustEmbedUnimplementedBruteServiceServer()
}

// UnimplementedBruteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBruteServiceServer struct {
}

func (UnimplementedBruteServiceServer) StartBrute(*StartBruteParams, BruteService_StartBruteServer) error {
	return status.Errorf(codes.Unimplemented, "method StartBrute not implemented")
}
func (UnimplementedBruteServiceServer) GetAvailableBruteTypes(context.Context, *Empty) (*GetAvailableBruteTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBruteTypes not implemented")
}
func (UnimplementedBruteServiceServer) mustEmbedUnimplementedBruteServiceServer() {}

// UnsafeBruteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BruteServiceServer will
// result in compilation errors.
type UnsafeBruteServiceServer interface {
	mustEmbedUnimplementedBruteServiceServer()
}

func RegisterBruteServiceServer(s grpc.ServiceRegistrar, srv BruteServiceServer) {
	s.RegisterService(&BruteService_ServiceDesc, srv)
}

func _BruteService_StartBrute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartBruteParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BruteServiceServer).StartBrute(m, &bruteServiceStartBruteServer{stream})
}

type BruteService_StartBruteServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type bruteServiceStartBruteServer struct {
	grpc.ServerStream
}

func (x *bruteServiceStartBruteServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _BruteService_GetAvailableBruteTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteServiceServer).GetAvailableBruteTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteService_GetAvailableBruteTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteServiceServer).GetAvailableBruteTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BruteService_ServiceDesc is the grpc.ServiceDesc for BruteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BruteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.BruteService",
	HandlerType: (*BruteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableBruteTypes",
			Handler:    _BruteService_GetAvailableBruteTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartBrute",
			Handler:       _BruteService_StartBrute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "brute.proto",
}
