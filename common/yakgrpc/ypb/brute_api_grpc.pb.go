// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: brute_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BruteApi_StartBrute_FullMethodName             = "/ypb.BruteApi/StartBrute"
	BruteApi_GetAvailableBruteTypes_FullMethodName = "/ypb.BruteApi/GetAvailableBruteTypes"
)

// BruteApiClient is the client API for BruteApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BruteApiClient interface {
	// Bruter
	StartBrute(ctx context.Context, in *StartBruteParams, opts ...grpc.CallOption) (BruteApi_StartBruteClient, error)
	GetAvailableBruteTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAvailableBruteTypesResponse, error)
}

type bruteApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBruteApiClient(cc grpc.ClientConnInterface) BruteApiClient {
	return &bruteApiClient{cc}
}

func (c *bruteApiClient) StartBrute(ctx context.Context, in *StartBruteParams, opts ...grpc.CallOption) (BruteApi_StartBruteClient, error) {
	stream, err := c.cc.NewStream(ctx, &BruteApi_ServiceDesc.Streams[0], BruteApi_StartBrute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bruteApiStartBruteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BruteApi_StartBruteClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type bruteApiStartBruteClient struct {
	grpc.ClientStream
}

func (x *bruteApiStartBruteClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bruteApiClient) GetAvailableBruteTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAvailableBruteTypesResponse, error) {
	out := new(GetAvailableBruteTypesResponse)
	err := c.cc.Invoke(ctx, BruteApi_GetAvailableBruteTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BruteApiServer is the server API for BruteApi service.
// All implementations must embed UnimplementedBruteApiServer
// for forward compatibility
type BruteApiServer interface {
	// Bruter
	StartBrute(*StartBruteParams, BruteApi_StartBruteServer) error
	GetAvailableBruteTypes(context.Context, *Empty) (*GetAvailableBruteTypesResponse, error)
	mustEmbedUnimplementedBruteApiServer()
}

// UnimplementedBruteApiServer must be embedded to have forward compatible implementations.
type UnimplementedBruteApiServer struct {
}

func (UnimplementedBruteApiServer) StartBrute(*StartBruteParams, BruteApi_StartBruteServer) error {
	return status.Errorf(codes.Unimplemented, "method StartBrute not implemented")
}
func (UnimplementedBruteApiServer) GetAvailableBruteTypes(context.Context, *Empty) (*GetAvailableBruteTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBruteTypes not implemented")
}
func (UnimplementedBruteApiServer) mustEmbedUnimplementedBruteApiServer() {}

// UnsafeBruteApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BruteApiServer will
// result in compilation errors.
type UnsafeBruteApiServer interface {
	mustEmbedUnimplementedBruteApiServer()
}

func RegisterBruteApiServer(s grpc.ServiceRegistrar, srv BruteApiServer) {
	s.RegisterService(&BruteApi_ServiceDesc, srv)
}

func _BruteApi_StartBrute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartBruteParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BruteApiServer).StartBrute(m, &bruteApiStartBruteServer{stream})
}

type BruteApi_StartBruteServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type bruteApiStartBruteServer struct {
	grpc.ServerStream
}

func (x *bruteApiStartBruteServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _BruteApi_GetAvailableBruteTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteApiServer).GetAvailableBruteTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BruteApi_GetAvailableBruteTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteApiServer).GetAvailableBruteTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BruteApi_ServiceDesc is the grpc.ServiceDesc for BruteApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BruteApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.BruteApi",
	HandlerType: (*BruteApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableBruteTypes",
			Handler:    _BruteApi_GetAvailableBruteTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartBrute",
			Handler:       _BruteApi_StartBrute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "brute_api.proto",
}
