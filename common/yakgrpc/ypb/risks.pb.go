// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: risks.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadRiskToOnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *UploadRiskToOnlineRequest) Reset() {
	*x = UploadRiskToOnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRiskToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRiskToOnlineRequest) ProtoMessage() {}

func (x *UploadRiskToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRiskToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadRiskToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{0}
}

func (x *UploadRiskToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type NewRiskReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64   `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	Ids     []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *NewRiskReadRequest) Reset() {
	*x = NewRiskReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRiskReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRiskReadRequest) ProtoMessage() {}

func (x *NewRiskReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRiskReadRequest.ProtoReflect.Descriptor instead.
func (*NewRiskReadRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{1}
}

func (x *NewRiskReadRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *NewRiskReadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NewRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt    int64  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Verbose      string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	TitleVerbose string `protobuf:"bytes,6,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	IsRead       bool   `protobuf:"varint,7,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
}

func (x *NewRisk) Reset() {
	*x = NewRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRisk) ProtoMessage() {}

func (x *NewRisk) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRisk.ProtoReflect.Descriptor instead.
func (*NewRisk) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{2}
}

func (x *NewRisk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewRisk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewRisk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NewRisk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NewRisk) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NewRisk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *NewRisk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type QueryNewRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*NewRisk `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	NewRiskTotal int64      `protobuf:"varint,2,opt,name=NewRiskTotal,proto3" json:"NewRiskTotal,omitempty"`
	Total        int64      `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryNewRiskResponse) Reset() {
	*x = QueryNewRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskResponse) ProtoMessage() {}

func (x *QueryNewRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskResponse.ProtoReflect.Descriptor instead.
func (*QueryNewRiskResponse) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{3}
}

func (x *QueryNewRiskResponse) GetData() []*NewRisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNewRiskResponse) GetNewRiskTotal() int64 {
	if x != nil {
		return x.NewRiskTotal
	}
	return 0
}

func (x *QueryNewRiskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNewRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64 `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
}

func (x *QueryNewRiskRequest) Reset() {
	*x = QueryNewRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskRequest) ProtoMessage() {}

func (x *QueryNewRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryNewRiskRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{4}
}

func (x *QueryNewRiskRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

type RiskTableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最近一次更新的漏洞信息
	LatestCreatedAtTimestamp int64   `protobuf:"varint,1,opt,name=LatestCreatedAtTimestamp,proto3" json:"LatestCreatedAtTimestamp,omitempty"`
	RiskTypeStats            *Fields `protobuf:"bytes,2,opt,name=RiskTypeStats,proto3" json:"RiskTypeStats,omitempty"`
	RiskLevelStats           *Fields `protobuf:"bytes,3,opt,name=RiskLevelStats,proto3" json:"RiskLevelStats,omitempty"`
}

func (x *RiskTableStats) Reset() {
	*x = RiskTableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskTableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTableStats) ProtoMessage() {}

func (x *RiskTableStats) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTableStats.ProtoReflect.Descriptor instead.
func (*RiskTableStats) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{5}
}

func (x *RiskTableStats) GetLatestCreatedAtTimestamp() int64 {
	if x != nil {
		return x.LatestCreatedAtTimestamp
	}
	return 0
}

func (x *RiskTableStats) GetRiskTypeStats() *Fields {
	if x != nil {
		return x.RiskTypeStats
	}
	return nil
}

func (x *RiskTableStats) GetRiskLevelStats() *Fields {
	if x != nil {
		return x.RiskLevelStats
	}
	return nil
}

type DeleteRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash             string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids              []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter           *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	DeleteAll        bool               `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DeleteRepetition bool               `protobuf:"varint,6,opt,name=DeleteRepetition,proto3" json:"DeleteRepetition,omitempty"`
}

func (x *DeleteRiskRequest) Reset() {
	*x = DeleteRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRiskRequest) ProtoMessage() {}

func (x *DeleteRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteRiskRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteRiskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteRiskRequest) GetDeleteRepetition() bool {
	if x != nil {
		return x.DeleteRepetition
	}
	return false
}

type Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	IP              string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Url             string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	Port            int32  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Host            string `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Title           string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleVerbose    string `protobuf:"bytes,7,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	RiskType        string `protobuf:"bytes,8,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	RiskTypeVerbose string `protobuf:"bytes,9,opt,name=RiskTypeVerbose,proto3" json:"RiskTypeVerbose,omitempty"`
	Parameter       string `protobuf:"bytes,10,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Payload         string `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Details         string `protobuf:"bytes,12,opt,name=Details,proto3" json:"Details,omitempty"`
	FromYakScript   string `protobuf:"bytes,13,opt,name=FromYakScript,proto3" json:"FromYakScript,omitempty"`
	WaitingVerified bool   `protobuf:"varint,14,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	ReverseToken    string `protobuf:"bytes,15,opt,name=ReverseToken,proto3" json:"ReverseToken,omitempty"`
	Id              int64  `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt       int64  `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64  `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Severity        string `protobuf:"bytes,19,opt,name=Severity,proto3" json:"Severity,omitempty"`
	// 数据包提取出来！
	Request  []byte `protobuf:"bytes,20,opt,name=Request,proto3" json:"Request,omitempty"`
	Response []byte `protobuf:"bytes,21,opt,name=Response,proto3" json:"Response,omitempty"`
	// 这个一般用于生成报告追踪报告中产生的漏洞
	RuntimeId   string `protobuf:"bytes,22,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	CVE         string `protobuf:"bytes,23,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description string `protobuf:"bytes,24,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution    string `protobuf:"bytes,25,opt,name=Solution,proto3" json:"Solution,omitempty"`
	TaskName    string `protobuf:"bytes,26,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *Risk) Reset() {
	*x = Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{7}
}

func (x *Risk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Risk) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Risk) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Risk) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Risk) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *Risk) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *Risk) GetRiskTypeVerbose() string {
	if x != nil {
		return x.RiskTypeVerbose
	}
	return ""
}

func (x *Risk) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *Risk) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Risk) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Risk) GetFromYakScript() string {
	if x != nil {
		return x.FromYakScript
	}
	return ""
}

func (x *Risk) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *Risk) GetReverseToken() string {
	if x != nil {
		return x.ReverseToken
	}
	return ""
}

func (x *Risk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Risk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Risk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Risk) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Risk) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Risk) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Risk) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *Risk) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Risk) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type QueryRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash   string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ids    []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	Filter *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *QueryRiskRequest) Reset() {
	*x = QueryRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskRequest) ProtoMessage() {}

func (x *QueryRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryRiskRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{8}
}

func (x *QueryRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *QueryRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryRisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Risk `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryRisksResponse) Reset() {
	*x = QueryRisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksResponse) ProtoMessage() {}

func (x *QueryRisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksResponse.ProtoReflect.Descriptor instead.
func (*QueryRisksResponse) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRisksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryRisksResponse) GetData() []*Risk {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryRisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Search          string  `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	Network         string  `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	Ports           string  `protobuf:"bytes,4,opt,name=Ports,proto3" json:"Ports,omitempty"`
	RiskType        string  `protobuf:"bytes,5,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Token           string  `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	WaitingVerified bool    `protobuf:"varint,7,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	Severity        string  `protobuf:"bytes,8,opt,name=Severity,proto3" json:"Severity,omitempty"`
}

func (x *QueryRisksRequest) Reset() {
	*x = QueryRisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksRequest) ProtoMessage() {}

func (x *QueryRisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_risks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksRequest.ProtoReflect.Descriptor instead.
func (*QueryRisksRequest) Descriptor() ([]byte, []int) {
	return file_risks_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRisksRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryRisksRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryRisksRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryRisksRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryRisksRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryRisksRequest) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *QueryRisksRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

var File_risks_proto protoreflect.FileDescriptor

var file_risks_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x79,
	0x70, 0x62, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x31, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52,
	0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2f,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31,
	0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x33, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x05, 0x0a,
	0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72,
	0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x78, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x32, 0xe8, 0x04, 0x0a, 0x0c, 0x52, 0x69, 0x73, 0x6b, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_risks_proto_rawDescOnce sync.Once
	file_risks_proto_rawDescData = file_risks_proto_rawDesc
)

func file_risks_proto_rawDescGZIP() []byte {
	file_risks_proto_rawDescOnce.Do(func() {
		file_risks_proto_rawDescData = protoimpl.X.CompressGZIP(file_risks_proto_rawDescData)
	})
	return file_risks_proto_rawDescData
}

var file_risks_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_risks_proto_goTypes = []interface{}{
	(*UploadRiskToOnlineRequest)(nil), // 0: ypb.UploadRiskToOnlineRequest
	(*NewRiskReadRequest)(nil),        // 1: ypb.NewRiskReadRequest
	(*NewRisk)(nil),                   // 2: ypb.NewRisk
	(*QueryNewRiskResponse)(nil),      // 3: ypb.QueryNewRiskResponse
	(*QueryNewRiskRequest)(nil),       // 4: ypb.QueryNewRiskRequest
	(*RiskTableStats)(nil),            // 5: ypb.RiskTableStats
	(*DeleteRiskRequest)(nil),         // 6: ypb.DeleteRiskRequest
	(*Risk)(nil),                      // 7: ypb.Risk
	(*QueryRiskRequest)(nil),          // 8: ypb.QueryRiskRequest
	(*QueryRisksResponse)(nil),        // 9: ypb.QueryRisksResponse
	(*QueryRisksRequest)(nil),         // 10: ypb.QueryRisksRequest
	(*Fields)(nil),                    // 11: ypb.Fields
	(*Paging)(nil),                    // 12: ypb.Paging
	(*Empty)(nil),                     // 13: ypb.Empty
}
var file_risks_proto_depIdxs = []int32{
	2,  // 0: ypb.QueryNewRiskResponse.Data:type_name -> ypb.NewRisk
	11, // 1: ypb.RiskTableStats.RiskTypeStats:type_name -> ypb.Fields
	11, // 2: ypb.RiskTableStats.RiskLevelStats:type_name -> ypb.Fields
	10, // 3: ypb.DeleteRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	10, // 4: ypb.QueryRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	12, // 5: ypb.QueryRisksResponse.Pagination:type_name -> ypb.Paging
	7,  // 6: ypb.QueryRisksResponse.Data:type_name -> ypb.Risk
	12, // 7: ypb.QueryRisksRequest.Pagination:type_name -> ypb.Paging
	10, // 8: ypb.RisksService.QueryRisks:input_type -> ypb.QueryRisksRequest
	8,  // 9: ypb.RisksService.QueryRisk:input_type -> ypb.QueryRiskRequest
	6,  // 10: ypb.RisksService.DeleteRisk:input_type -> ypb.DeleteRiskRequest
	13, // 11: ypb.RisksService.QueryAvailableRiskType:input_type -> ypb.Empty
	13, // 12: ypb.RisksService.QueryAvailableRiskLevel:input_type -> ypb.Empty
	13, // 13: ypb.RisksService.QueryRiskTableStats:input_type -> ypb.Empty
	13, // 14: ypb.RisksService.ResetRiskTableStats:input_type -> ypb.Empty
	13, // 15: ypb.RisksService.QueryAvailableTarget:input_type -> ypb.Empty
	4,  // 16: ypb.RisksService.QueryNewRisk:input_type -> ypb.QueryNewRiskRequest
	1,  // 17: ypb.RisksService.NewRiskRead:input_type -> ypb.NewRiskReadRequest
	0,  // 18: ypb.RisksService.UploadRiskToOnline:input_type -> ypb.UploadRiskToOnlineRequest
	9,  // 19: ypb.RisksService.QueryRisks:output_type -> ypb.QueryRisksResponse
	7,  // 20: ypb.RisksService.QueryRisk:output_type -> ypb.Risk
	13, // 21: ypb.RisksService.DeleteRisk:output_type -> ypb.Empty
	11, // 22: ypb.RisksService.QueryAvailableRiskType:output_type -> ypb.Fields
	11, // 23: ypb.RisksService.QueryAvailableRiskLevel:output_type -> ypb.Fields
	5,  // 24: ypb.RisksService.QueryRiskTableStats:output_type -> ypb.RiskTableStats
	13, // 25: ypb.RisksService.ResetRiskTableStats:output_type -> ypb.Empty
	11, // 26: ypb.RisksService.QueryAvailableTarget:output_type -> ypb.Fields
	3,  // 27: ypb.RisksService.QueryNewRisk:output_type -> ypb.QueryNewRiskResponse
	13, // 28: ypb.RisksService.NewRiskRead:output_type -> ypb.Empty
	13, // 29: ypb.RisksService.UploadRiskToOnline:output_type -> ypb.Empty
	19, // [19:30] is the sub-list for method output_type
	8,  // [8:19] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_risks_proto_init() }
func file_risks_proto_init() {
	if File_risks_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_risks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRiskToOnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRiskReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskTableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_risks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_risks_proto_goTypes,
		DependencyIndexes: file_risks_proto_depIdxs,
		MessageInfos:      file_risks_proto_msgTypes,
	}.Build()
	File_risks_proto = out.File
	file_risks_proto_rawDesc = nil
	file_risks_proto_goTypes = nil
	file_risks_proto_depIdxs = nil
}
