// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: yak_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YakApi_Version_FullMethodName  = "/ypb.YakApi/Version"
	YakApi_Echo_FullMethodName     = "/ypb.YakApi/Echo"
	YakApi_OpenPort_FullMethodName = "/ypb.YakApi/OpenPort"
)

// YakApiClient is the client API for YakApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YakApiClient interface {
	// version
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// echo 通常用于测试服务是否通畅
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResposne, error)
	// 开启端口
	OpenPort(ctx context.Context, opts ...grpc.CallOption) (YakApi_OpenPortClient, error)
}

type yakApiClient struct {
	cc grpc.ClientConnInterface
}

func NewYakApiClient(cc grpc.ClientConnInterface) YakApiClient {
	return &yakApiClient{cc}
}

func (c *yakApiClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, YakApi_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakApiClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResposne, error) {
	out := new(EchoResposne)
	err := c.cc.Invoke(ctx, YakApi_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakApiClient) OpenPort(ctx context.Context, opts ...grpc.CallOption) (YakApi_OpenPortClient, error) {
	stream, err := c.cc.NewStream(ctx, &YakApi_ServiceDesc.Streams[0], YakApi_OpenPort_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakApiOpenPortClient{stream}
	return x, nil
}

type YakApi_OpenPortClient interface {
	Send(*Input) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type yakApiOpenPortClient struct {
	grpc.ClientStream
}

func (x *yakApiOpenPortClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yakApiOpenPortClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YakApiServer is the server API for YakApi service.
// All implementations must embed UnimplementedYakApiServer
// for forward compatibility
type YakApiServer interface {
	// version
	Version(context.Context, *Empty) (*VersionResponse, error)
	// echo 通常用于测试服务是否通畅
	Echo(context.Context, *EchoRequest) (*EchoResposne, error)
	// 开启端口
	OpenPort(YakApi_OpenPortServer) error
	mustEmbedUnimplementedYakApiServer()
}

// UnimplementedYakApiServer must be embedded to have forward compatible implementations.
type UnimplementedYakApiServer struct {
}

func (UnimplementedYakApiServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedYakApiServer) Echo(context.Context, *EchoRequest) (*EchoResposne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedYakApiServer) OpenPort(YakApi_OpenPortServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenPort not implemented")
}
func (UnimplementedYakApiServer) mustEmbedUnimplementedYakApiServer() {}

// UnsafeYakApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YakApiServer will
// result in compilation errors.
type UnsafeYakApiServer interface {
	mustEmbedUnimplementedYakApiServer()
}

func RegisterYakApiServer(s grpc.ServiceRegistrar, srv YakApiServer) {
	s.RegisterService(&YakApi_ServiceDesc, srv)
}

func _YakApi_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakApiServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakApi_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakApiServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakApi_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakApi_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakApiServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakApi_OpenPort_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YakApiServer).OpenPort(&yakApiOpenPortServer{stream})
}

type YakApi_OpenPortServer interface {
	Send(*Output) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type yakApiOpenPortServer struct {
	grpc.ServerStream
}

func (x *yakApiOpenPortServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yakApiOpenPortServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YakApi_ServiceDesc is the grpc.ServiceDesc for YakApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YakApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.YakApi",
	HandlerType: (*YakApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _YakApi_Version_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _YakApi_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenPort",
			Handler:       _YakApi_OpenPort_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yak_api.proto",
}
