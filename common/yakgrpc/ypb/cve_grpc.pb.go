// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cve.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CVEService_IsCVEDatabaseReady_FullMethodName     = "/ypb.CVEService/IsCVEDatabaseReady"
	CVEService_UpdateCVEDatabase_FullMethodName      = "/ypb.CVEService/UpdateCVEDatabase"
	CVEService_ExportsProfileDatabase_FullMethodName = "/ypb.CVEService/ExportsProfileDatabase"
	CVEService_ImportsProfileDatabase_FullMethodName = "/ypb.CVEService/ImportsProfileDatabase"
	CVEService_QueryCVE_FullMethodName               = "/ypb.CVEService/QueryCVE"
	CVEService_GetCVE_FullMethodName                 = "/ypb.CVEService/GetCVE"
)

// CVEServiceClient is the client API for CVEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVEServiceClient interface {
	// CVE
	IsCVEDatabaseReady(ctx context.Context, in *IsCVEDatabaseReadyRequest, opts ...grpc.CallOption) (*IsCVEDatabaseReadyResponse, error)
	UpdateCVEDatabase(ctx context.Context, in *UpdateCVEDatabaseRequest, opts ...grpc.CallOption) (CVEService_UpdateCVEDatabaseClient, error)
	ExportsProfileDatabase(ctx context.Context, in *ExportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEService_ExportsProfileDatabaseClient, error)
	ImportsProfileDatabase(ctx context.Context, in *ImportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEService_ImportsProfileDatabaseClient, error)
	QueryCVE(ctx context.Context, in *QueryCVERequest, opts ...grpc.CallOption) (*QueryCVEResponse, error)
	GetCVE(ctx context.Context, in *GetCVERequest, opts ...grpc.CallOption) (*CVEDetailEx, error)
}

type cVEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCVEServiceClient(cc grpc.ClientConnInterface) CVEServiceClient {
	return &cVEServiceClient{cc}
}

func (c *cVEServiceClient) IsCVEDatabaseReady(ctx context.Context, in *IsCVEDatabaseReadyRequest, opts ...grpc.CallOption) (*IsCVEDatabaseReadyResponse, error) {
	out := new(IsCVEDatabaseReadyResponse)
	err := c.cc.Invoke(ctx, CVEService_IsCVEDatabaseReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVEServiceClient) UpdateCVEDatabase(ctx context.Context, in *UpdateCVEDatabaseRequest, opts ...grpc.CallOption) (CVEService_UpdateCVEDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEService_ServiceDesc.Streams[0], CVEService_UpdateCVEDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEServiceUpdateCVEDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEService_UpdateCVEDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEServiceUpdateCVEDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEServiceUpdateCVEDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEServiceClient) ExportsProfileDatabase(ctx context.Context, in *ExportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEService_ExportsProfileDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEService_ServiceDesc.Streams[1], CVEService_ExportsProfileDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEServiceExportsProfileDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEService_ExportsProfileDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEServiceExportsProfileDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEServiceExportsProfileDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEServiceClient) ImportsProfileDatabase(ctx context.Context, in *ImportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEService_ImportsProfileDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEService_ServiceDesc.Streams[2], CVEService_ImportsProfileDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEServiceImportsProfileDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEService_ImportsProfileDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEServiceImportsProfileDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEServiceImportsProfileDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEServiceClient) QueryCVE(ctx context.Context, in *QueryCVERequest, opts ...grpc.CallOption) (*QueryCVEResponse, error) {
	out := new(QueryCVEResponse)
	err := c.cc.Invoke(ctx, CVEService_QueryCVE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVEServiceClient) GetCVE(ctx context.Context, in *GetCVERequest, opts ...grpc.CallOption) (*CVEDetailEx, error) {
	out := new(CVEDetailEx)
	err := c.cc.Invoke(ctx, CVEService_GetCVE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CVEServiceServer is the server API for CVEService service.
// All implementations must embed UnimplementedCVEServiceServer
// for forward compatibility
type CVEServiceServer interface {
	// CVE
	IsCVEDatabaseReady(context.Context, *IsCVEDatabaseReadyRequest) (*IsCVEDatabaseReadyResponse, error)
	UpdateCVEDatabase(*UpdateCVEDatabaseRequest, CVEService_UpdateCVEDatabaseServer) error
	ExportsProfileDatabase(*ExportsProfileDatabaseRequest, CVEService_ExportsProfileDatabaseServer) error
	ImportsProfileDatabase(*ImportsProfileDatabaseRequest, CVEService_ImportsProfileDatabaseServer) error
	QueryCVE(context.Context, *QueryCVERequest) (*QueryCVEResponse, error)
	GetCVE(context.Context, *GetCVERequest) (*CVEDetailEx, error)
	mustEmbedUnimplementedCVEServiceServer()
}

// UnimplementedCVEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCVEServiceServer struct {
}

func (UnimplementedCVEServiceServer) IsCVEDatabaseReady(context.Context, *IsCVEDatabaseReadyRequest) (*IsCVEDatabaseReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCVEDatabaseReady not implemented")
}
func (UnimplementedCVEServiceServer) UpdateCVEDatabase(*UpdateCVEDatabaseRequest, CVEService_UpdateCVEDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCVEDatabase not implemented")
}
func (UnimplementedCVEServiceServer) ExportsProfileDatabase(*ExportsProfileDatabaseRequest, CVEService_ExportsProfileDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportsProfileDatabase not implemented")
}
func (UnimplementedCVEServiceServer) ImportsProfileDatabase(*ImportsProfileDatabaseRequest, CVEService_ImportsProfileDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportsProfileDatabase not implemented")
}
func (UnimplementedCVEServiceServer) QueryCVE(context.Context, *QueryCVERequest) (*QueryCVEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCVE not implemented")
}
func (UnimplementedCVEServiceServer) GetCVE(context.Context, *GetCVERequest) (*CVEDetailEx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCVE not implemented")
}
func (UnimplementedCVEServiceServer) mustEmbedUnimplementedCVEServiceServer() {}

// UnsafeCVEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVEServiceServer will
// result in compilation errors.
type UnsafeCVEServiceServer interface {
	mustEmbedUnimplementedCVEServiceServer()
}

func RegisterCVEServiceServer(s grpc.ServiceRegistrar, srv CVEServiceServer) {
	s.RegisterService(&CVEService_ServiceDesc, srv)
}

func _CVEService_IsCVEDatabaseReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCVEDatabaseReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEServiceServer).IsCVEDatabaseReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEService_IsCVEDatabaseReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEServiceServer).IsCVEDatabaseReady(ctx, req.(*IsCVEDatabaseReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CVEService_UpdateCVEDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateCVEDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEServiceServer).UpdateCVEDatabase(m, &cVEServiceUpdateCVEDatabaseServer{stream})
}

type CVEService_UpdateCVEDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEServiceUpdateCVEDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEServiceUpdateCVEDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEService_ExportsProfileDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportsProfileDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEServiceServer).ExportsProfileDatabase(m, &cVEServiceExportsProfileDatabaseServer{stream})
}

type CVEService_ExportsProfileDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEServiceExportsProfileDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEServiceExportsProfileDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEService_ImportsProfileDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImportsProfileDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEServiceServer).ImportsProfileDatabase(m, &cVEServiceImportsProfileDatabaseServer{stream})
}

type CVEService_ImportsProfileDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEServiceImportsProfileDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEServiceImportsProfileDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEService_QueryCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEServiceServer).QueryCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEService_QueryCVE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEServiceServer).QueryCVE(ctx, req.(*QueryCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CVEService_GetCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEServiceServer).GetCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEService_GetCVE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEServiceServer).GetCVE(ctx, req.(*GetCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CVEService_ServiceDesc is the grpc.ServiceDesc for CVEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.CVEService",
	HandlerType: (*CVEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsCVEDatabaseReady",
			Handler:    _CVEService_IsCVEDatabaseReady_Handler,
		},
		{
			MethodName: "QueryCVE",
			Handler:    _CVEService_QueryCVE_Handler,
		},
		{
			MethodName: "GetCVE",
			Handler:    _CVEService_GetCVE_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateCVEDatabase",
			Handler:       _CVEService_UpdateCVEDatabase_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportsProfileDatabase",
			Handler:       _CVEService_ExportsProfileDatabase_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportsProfileDatabase",
			Handler:       _CVEService_ImportsProfileDatabase_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cve.proto",
}
