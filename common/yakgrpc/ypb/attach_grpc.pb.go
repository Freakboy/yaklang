// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: attach.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttachService_AttachCombinedOutput_FullMethodName   = "/ypb.AttachService/AttachCombinedOutput"
	AttachService_SaveTextToTemporalFile_FullMethodName = "/ypb.AttachService/SaveTextToTemporalFile"
)

// AttachServiceClient is the client API for AttachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachServiceClient interface {
	// 接入标准输出和标准错误流
	AttachCombinedOutput(ctx context.Context, in *AttachCombinedOutputRequest, opts ...grpc.CallOption) (AttachService_AttachCombinedOutputClient, error)
	SaveTextToTemporalFile(ctx context.Context, in *SaveTextToTemporalFileRequest, opts ...grpc.CallOption) (*SaveTextToTemporalFileResponse, error)
}

type attachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachServiceClient(cc grpc.ClientConnInterface) AttachServiceClient {
	return &attachServiceClient{cc}
}

func (c *attachServiceClient) AttachCombinedOutput(ctx context.Context, in *AttachCombinedOutputRequest, opts ...grpc.CallOption) (AttachService_AttachCombinedOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &AttachService_ServiceDesc.Streams[0], AttachService_AttachCombinedOutput_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &attachServiceAttachCombinedOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AttachService_AttachCombinedOutputClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type attachServiceAttachCombinedOutputClient struct {
	grpc.ClientStream
}

func (x *attachServiceAttachCombinedOutputClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *attachServiceClient) SaveTextToTemporalFile(ctx context.Context, in *SaveTextToTemporalFileRequest, opts ...grpc.CallOption) (*SaveTextToTemporalFileResponse, error) {
	out := new(SaveTextToTemporalFileResponse)
	err := c.cc.Invoke(ctx, AttachService_SaveTextToTemporalFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachServiceServer is the server API for AttachService service.
// All implementations must embed UnimplementedAttachServiceServer
// for forward compatibility
type AttachServiceServer interface {
	// 接入标准输出和标准错误流
	AttachCombinedOutput(*AttachCombinedOutputRequest, AttachService_AttachCombinedOutputServer) error
	SaveTextToTemporalFile(context.Context, *SaveTextToTemporalFileRequest) (*SaveTextToTemporalFileResponse, error)
	mustEmbedUnimplementedAttachServiceServer()
}

// UnimplementedAttachServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachServiceServer struct {
}

func (UnimplementedAttachServiceServer) AttachCombinedOutput(*AttachCombinedOutputRequest, AttachService_AttachCombinedOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachCombinedOutput not implemented")
}
func (UnimplementedAttachServiceServer) SaveTextToTemporalFile(context.Context, *SaveTextToTemporalFileRequest) (*SaveTextToTemporalFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTextToTemporalFile not implemented")
}
func (UnimplementedAttachServiceServer) mustEmbedUnimplementedAttachServiceServer() {}

// UnsafeAttachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachServiceServer will
// result in compilation errors.
type UnsafeAttachServiceServer interface {
	mustEmbedUnimplementedAttachServiceServer()
}

func RegisterAttachServiceServer(s grpc.ServiceRegistrar, srv AttachServiceServer) {
	s.RegisterService(&AttachService_ServiceDesc, srv)
}

func _AttachService_AttachCombinedOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AttachCombinedOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AttachServiceServer).AttachCombinedOutput(m, &attachServiceAttachCombinedOutputServer{stream})
}

type AttachService_AttachCombinedOutputServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type attachServiceAttachCombinedOutputServer struct {
	grpc.ServerStream
}

func (x *attachServiceAttachCombinedOutputServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AttachService_SaveTextToTemporalFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTextToTemporalFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachServiceServer).SaveTextToTemporalFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachService_SaveTextToTemporalFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachServiceServer).SaveTextToTemporalFile(ctx, req.(*SaveTextToTemporalFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachService_ServiceDesc is the grpc.ServiceDesc for AttachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.AttachService",
	HandlerType: (*AttachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTextToTemporalFile",
			Handler:    _AttachService_SaveTextToTemporalFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachCombinedOutput",
			Handler:       _AttachService_AttachCombinedOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "attach.proto",
}
