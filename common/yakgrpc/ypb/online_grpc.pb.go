// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: online.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OnlineService_GetOnlineProfile_FullMethodName                  = "/ypb.OnlineService/GetOnlineProfile"
	OnlineService_SetOnlineProfile_FullMethodName                  = "/ypb.OnlineService/SetOnlineProfile"
	OnlineService_DownloadOnlinePluginById_FullMethodName          = "/ypb.OnlineService/DownloadOnlinePluginById"
	OnlineService_DownloadOnlinePluginByIds_FullMethodName         = "/ypb.OnlineService/DownloadOnlinePluginByIds"
	OnlineService_DownloadOnlinePluginAll_FullMethodName           = "/ypb.OnlineService/DownloadOnlinePluginAll"
	OnlineService_DeletePluginByUserID_FullMethodName              = "/ypb.OnlineService/DeletePluginByUserID"
	OnlineService_DeleteAllLocalPlugins_FullMethodName             = "/ypb.OnlineService/DeleteAllLocalPlugins"
	OnlineService_GetYakScriptTagsAndType_FullMethodName           = "/ypb.OnlineService/GetYakScriptTagsAndType"
	OnlineService_DeleteLocalPluginsByWhere_FullMethodName         = "/ypb.OnlineService/DeleteLocalPluginsByWhere"
	OnlineService_DownloadOnlinePluginByScriptNames_FullMethodName = "/ypb.OnlineService/DownloadOnlinePluginByScriptNames"
)

// OnlineServiceClient is the client API for OnlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineServiceClient interface {
	// Online
	GetOnlineProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OnlineProfile, error)
	SetOnlineProfile(ctx context.Context, in *OnlineProfile, opts ...grpc.CallOption) (*Empty, error)
	DownloadOnlinePluginById(ctx context.Context, in *DownloadOnlinePluginByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DownloadOnlinePluginByIds(ctx context.Context, in *DownloadOnlinePluginByIdsRequest, opts ...grpc.CallOption) (*Empty, error)
	DownloadOnlinePluginAll(ctx context.Context, in *DownloadOnlinePluginByTokenRequest, opts ...grpc.CallOption) (OnlineService_DownloadOnlinePluginAllClient, error)
	DeletePluginByUserID(ctx context.Context, in *DeletePluginByUserIDRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteAllLocalPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetYakScriptTagsAndType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetYakScriptTagsAndTypeResponse, error)
	DeleteLocalPluginsByWhere(ctx context.Context, in *DeleteLocalPluginsByWhereRequest, opts ...grpc.CallOption) (*Empty, error)
	DownloadOnlinePluginByScriptNames(ctx context.Context, in *DownloadOnlinePluginByScriptNamesRequest, opts ...grpc.CallOption) (*DownloadOnlinePluginByScriptNamesResponse, error)
}

type onlineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineServiceClient(cc grpc.ClientConnInterface) OnlineServiceClient {
	return &onlineServiceClient{cc}
}

func (c *onlineServiceClient) GetOnlineProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OnlineProfile, error) {
	out := new(OnlineProfile)
	err := c.cc.Invoke(ctx, OnlineService_GetOnlineProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) SetOnlineProfile(ctx context.Context, in *OnlineProfile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_SetOnlineProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DownloadOnlinePluginById(ctx context.Context, in *DownloadOnlinePluginByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_DownloadOnlinePluginById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DownloadOnlinePluginByIds(ctx context.Context, in *DownloadOnlinePluginByIdsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_DownloadOnlinePluginByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DownloadOnlinePluginAll(ctx context.Context, in *DownloadOnlinePluginByTokenRequest, opts ...grpc.CallOption) (OnlineService_DownloadOnlinePluginAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &OnlineService_ServiceDesc.Streams[0], OnlineService_DownloadOnlinePluginAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &onlineServiceDownloadOnlinePluginAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OnlineService_DownloadOnlinePluginAllClient interface {
	Recv() (*DownloadOnlinePluginProgress, error)
	grpc.ClientStream
}

type onlineServiceDownloadOnlinePluginAllClient struct {
	grpc.ClientStream
}

func (x *onlineServiceDownloadOnlinePluginAllClient) Recv() (*DownloadOnlinePluginProgress, error) {
	m := new(DownloadOnlinePluginProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *onlineServiceClient) DeletePluginByUserID(ctx context.Context, in *DeletePluginByUserIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_DeletePluginByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DeleteAllLocalPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_DeleteAllLocalPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) GetYakScriptTagsAndType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetYakScriptTagsAndTypeResponse, error) {
	out := new(GetYakScriptTagsAndTypeResponse)
	err := c.cc.Invoke(ctx, OnlineService_GetYakScriptTagsAndType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DeleteLocalPluginsByWhere(ctx context.Context, in *DeleteLocalPluginsByWhereRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OnlineService_DeleteLocalPluginsByWhere_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DownloadOnlinePluginByScriptNames(ctx context.Context, in *DownloadOnlinePluginByScriptNamesRequest, opts ...grpc.CallOption) (*DownloadOnlinePluginByScriptNamesResponse, error) {
	out := new(DownloadOnlinePluginByScriptNamesResponse)
	err := c.cc.Invoke(ctx, OnlineService_DownloadOnlinePluginByScriptNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServiceServer is the server API for OnlineService service.
// All implementations must embed UnimplementedOnlineServiceServer
// for forward compatibility
type OnlineServiceServer interface {
	// Online
	GetOnlineProfile(context.Context, *Empty) (*OnlineProfile, error)
	SetOnlineProfile(context.Context, *OnlineProfile) (*Empty, error)
	DownloadOnlinePluginById(context.Context, *DownloadOnlinePluginByIdRequest) (*Empty, error)
	DownloadOnlinePluginByIds(context.Context, *DownloadOnlinePluginByIdsRequest) (*Empty, error)
	DownloadOnlinePluginAll(*DownloadOnlinePluginByTokenRequest, OnlineService_DownloadOnlinePluginAllServer) error
	DeletePluginByUserID(context.Context, *DeletePluginByUserIDRequest) (*Empty, error)
	DeleteAllLocalPlugins(context.Context, *Empty) (*Empty, error)
	GetYakScriptTagsAndType(context.Context, *Empty) (*GetYakScriptTagsAndTypeResponse, error)
	DeleteLocalPluginsByWhere(context.Context, *DeleteLocalPluginsByWhereRequest) (*Empty, error)
	DownloadOnlinePluginByScriptNames(context.Context, *DownloadOnlinePluginByScriptNamesRequest) (*DownloadOnlinePluginByScriptNamesResponse, error)
	mustEmbedUnimplementedOnlineServiceServer()
}

// UnimplementedOnlineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineServiceServer struct {
}

func (UnimplementedOnlineServiceServer) GetOnlineProfile(context.Context, *Empty) (*OnlineProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineProfile not implemented")
}
func (UnimplementedOnlineServiceServer) SetOnlineProfile(context.Context, *OnlineProfile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnlineProfile not implemented")
}
func (UnimplementedOnlineServiceServer) DownloadOnlinePluginById(context.Context, *DownloadOnlinePluginByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOnlinePluginById not implemented")
}
func (UnimplementedOnlineServiceServer) DownloadOnlinePluginByIds(context.Context, *DownloadOnlinePluginByIdsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOnlinePluginByIds not implemented")
}
func (UnimplementedOnlineServiceServer) DownloadOnlinePluginAll(*DownloadOnlinePluginByTokenRequest, OnlineService_DownloadOnlinePluginAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadOnlinePluginAll not implemented")
}
func (UnimplementedOnlineServiceServer) DeletePluginByUserID(context.Context, *DeletePluginByUserIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePluginByUserID not implemented")
}
func (UnimplementedOnlineServiceServer) DeleteAllLocalPlugins(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllLocalPlugins not implemented")
}
func (UnimplementedOnlineServiceServer) GetYakScriptTagsAndType(context.Context, *Empty) (*GetYakScriptTagsAndTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakScriptTagsAndType not implemented")
}
func (UnimplementedOnlineServiceServer) DeleteLocalPluginsByWhere(context.Context, *DeleteLocalPluginsByWhereRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalPluginsByWhere not implemented")
}
func (UnimplementedOnlineServiceServer) DownloadOnlinePluginByScriptNames(context.Context, *DownloadOnlinePluginByScriptNamesRequest) (*DownloadOnlinePluginByScriptNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOnlinePluginByScriptNames not implemented")
}
func (UnimplementedOnlineServiceServer) mustEmbedUnimplementedOnlineServiceServer() {}

// UnsafeOnlineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineServiceServer will
// result in compilation errors.
type UnsafeOnlineServiceServer interface {
	mustEmbedUnimplementedOnlineServiceServer()
}

func RegisterOnlineServiceServer(s grpc.ServiceRegistrar, srv OnlineServiceServer) {
	s.RegisterService(&OnlineService_ServiceDesc, srv)
}

func _OnlineService_GetOnlineProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).GetOnlineProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_GetOnlineProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).GetOnlineProfile(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_SetOnlineProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).SetOnlineProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_SetOnlineProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).SetOnlineProfile(ctx, req.(*OnlineProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DownloadOnlinePluginById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadOnlinePluginByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DownloadOnlinePluginById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DownloadOnlinePluginById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DownloadOnlinePluginById(ctx, req.(*DownloadOnlinePluginByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DownloadOnlinePluginByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadOnlinePluginByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DownloadOnlinePluginByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DownloadOnlinePluginByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DownloadOnlinePluginByIds(ctx, req.(*DownloadOnlinePluginByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DownloadOnlinePluginAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadOnlinePluginByTokenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OnlineServiceServer).DownloadOnlinePluginAll(m, &onlineServiceDownloadOnlinePluginAllServer{stream})
}

type OnlineService_DownloadOnlinePluginAllServer interface {
	Send(*DownloadOnlinePluginProgress) error
	grpc.ServerStream
}

type onlineServiceDownloadOnlinePluginAllServer struct {
	grpc.ServerStream
}

func (x *onlineServiceDownloadOnlinePluginAllServer) Send(m *DownloadOnlinePluginProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _OnlineService_DeletePluginByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePluginByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DeletePluginByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DeletePluginByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DeletePluginByUserID(ctx, req.(*DeletePluginByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DeleteAllLocalPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DeleteAllLocalPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DeleteAllLocalPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DeleteAllLocalPlugins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_GetYakScriptTagsAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).GetYakScriptTagsAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_GetYakScriptTagsAndType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).GetYakScriptTagsAndType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DeleteLocalPluginsByWhere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocalPluginsByWhereRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DeleteLocalPluginsByWhere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DeleteLocalPluginsByWhere_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DeleteLocalPluginsByWhere(ctx, req.(*DeleteLocalPluginsByWhereRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DownloadOnlinePluginByScriptNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadOnlinePluginByScriptNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DownloadOnlinePluginByScriptNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_DownloadOnlinePluginByScriptNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DownloadOnlinePluginByScriptNames(ctx, req.(*DownloadOnlinePluginByScriptNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineService_ServiceDesc is the grpc.ServiceDesc for OnlineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.OnlineService",
	HandlerType: (*OnlineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnlineProfile",
			Handler:    _OnlineService_GetOnlineProfile_Handler,
		},
		{
			MethodName: "SetOnlineProfile",
			Handler:    _OnlineService_SetOnlineProfile_Handler,
		},
		{
			MethodName: "DownloadOnlinePluginById",
			Handler:    _OnlineService_DownloadOnlinePluginById_Handler,
		},
		{
			MethodName: "DownloadOnlinePluginByIds",
			Handler:    _OnlineService_DownloadOnlinePluginByIds_Handler,
		},
		{
			MethodName: "DeletePluginByUserID",
			Handler:    _OnlineService_DeletePluginByUserID_Handler,
		},
		{
			MethodName: "DeleteAllLocalPlugins",
			Handler:    _OnlineService_DeleteAllLocalPlugins_Handler,
		},
		{
			MethodName: "GetYakScriptTagsAndType",
			Handler:    _OnlineService_GetYakScriptTagsAndType_Handler,
		},
		{
			MethodName: "DeleteLocalPluginsByWhere",
			Handler:    _OnlineService_DeleteLocalPluginsByWhere_Handler,
		},
		{
			MethodName: "DownloadOnlinePluginByScriptNames",
			Handler:    _OnlineService_DownloadOnlinePluginByScriptNames_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadOnlinePluginAll",
			Handler:       _OnlineService_DownloadOnlinePluginAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "online.proto",
}
