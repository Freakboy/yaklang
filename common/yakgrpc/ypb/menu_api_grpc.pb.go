// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: menu_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MenuApi_AddToMenu_FullMethodName                = "/ypb.MenuApi/AddToMenu"
	MenuApi_RemoveFromMenu_FullMethodName           = "/ypb.MenuApi/RemoveFromMenu"
	MenuApi_YakScriptIsInMenu_FullMethodName        = "/ypb.MenuApi/YakScriptIsInMenu"
	MenuApi_GetAllMenuItem_FullMethodName           = "/ypb.MenuApi/GetAllMenuItem"
	MenuApi_DeleteAllMenuItem_FullMethodName        = "/ypb.MenuApi/DeleteAllMenuItem"
	MenuApi_ImportMenuItem_FullMethodName           = "/ypb.MenuApi/ImportMenuItem"
	MenuApi_ExportMenuItem_FullMethodName           = "/ypb.MenuApi/ExportMenuItem"
	MenuApi_GetMenuItemById_FullMethodName          = "/ypb.MenuApi/GetMenuItemById"
	MenuApi_QueryGroupsByYakScriptId_FullMethodName = "/ypb.MenuApi/QueryGroupsByYakScriptId"
	MenuApi_AddMenus_FullMethodName                 = "/ypb.MenuApi/AddMenus"
	MenuApi_QueryAllMenuItem_FullMethodName         = "/ypb.MenuApi/QueryAllMenuItem"
	MenuApi_DeleteAllMenu_FullMethodName            = "/ypb.MenuApi/DeleteAllMenu"
)

// MenuApiClient is the client API for MenuApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuApiClient interface {
	// Menu
	AddToMenu(ctx context.Context, in *AddToMenuRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveFromMenu(ctx context.Context, in *RemoveFromMenuRequest, opts ...grpc.CallOption) (*Empty, error)
	YakScriptIsInMenu(ctx context.Context, in *YakScriptIsInMenuRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuByGroup, error)
	DeleteAllMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ImportMenuItem(ctx context.Context, in *ImportMenuItemRequest, opts ...grpc.CallOption) (*Empty, error)
	ExportMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExportMenuItemResult, error)
	GetMenuItemById(ctx context.Context, in *GetMenuItemByIdRequest, opts ...grpc.CallOption) (*MenuItem, error)
	QueryGroupsByYakScriptId(ctx context.Context, in *QueryGroupsByYakScriptIdRequest, opts ...grpc.CallOption) (*GroupNames, error)
	AddMenus(ctx context.Context, in *AddMenuRequest, opts ...grpc.CallOption) (*Empty, error)
	QueryAllMenuItem(ctx context.Context, in *QueryAllMenuItemRequest, opts ...grpc.CallOption) (*MenuByGroup, error)
	DeleteAllMenu(ctx context.Context, in *QueryAllMenuItemRequest, opts ...grpc.CallOption) (*Empty, error)
}

type menuApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuApiClient(cc grpc.ClientConnInterface) MenuApiClient {
	return &menuApiClient{cc}
}

func (c *menuApiClient) AddToMenu(ctx context.Context, in *AddToMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_AddToMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) RemoveFromMenu(ctx context.Context, in *RemoveFromMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_RemoveFromMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) YakScriptIsInMenu(ctx context.Context, in *YakScriptIsInMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_YakScriptIsInMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) GetAllMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuByGroup, error) {
	out := new(MenuByGroup)
	err := c.cc.Invoke(ctx, MenuApi_GetAllMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) DeleteAllMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_DeleteAllMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) ImportMenuItem(ctx context.Context, in *ImportMenuItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_ImportMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) ExportMenuItem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExportMenuItemResult, error) {
	out := new(ExportMenuItemResult)
	err := c.cc.Invoke(ctx, MenuApi_ExportMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) GetMenuItemById(ctx context.Context, in *GetMenuItemByIdRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, MenuApi_GetMenuItemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) QueryGroupsByYakScriptId(ctx context.Context, in *QueryGroupsByYakScriptIdRequest, opts ...grpc.CallOption) (*GroupNames, error) {
	out := new(GroupNames)
	err := c.cc.Invoke(ctx, MenuApi_QueryGroupsByYakScriptId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) AddMenus(ctx context.Context, in *AddMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_AddMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) QueryAllMenuItem(ctx context.Context, in *QueryAllMenuItemRequest, opts ...grpc.CallOption) (*MenuByGroup, error) {
	out := new(MenuByGroup)
	err := c.cc.Invoke(ctx, MenuApi_QueryAllMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuApiClient) DeleteAllMenu(ctx context.Context, in *QueryAllMenuItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuApi_DeleteAllMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuApiServer is the server API for MenuApi service.
// All implementations must embed UnimplementedMenuApiServer
// for forward compatibility
type MenuApiServer interface {
	// Menu
	AddToMenu(context.Context, *AddToMenuRequest) (*Empty, error)
	RemoveFromMenu(context.Context, *RemoveFromMenuRequest) (*Empty, error)
	YakScriptIsInMenu(context.Context, *YakScriptIsInMenuRequest) (*Empty, error)
	GetAllMenuItem(context.Context, *Empty) (*MenuByGroup, error)
	DeleteAllMenuItem(context.Context, *Empty) (*Empty, error)
	ImportMenuItem(context.Context, *ImportMenuItemRequest) (*Empty, error)
	ExportMenuItem(context.Context, *Empty) (*ExportMenuItemResult, error)
	GetMenuItemById(context.Context, *GetMenuItemByIdRequest) (*MenuItem, error)
	QueryGroupsByYakScriptId(context.Context, *QueryGroupsByYakScriptIdRequest) (*GroupNames, error)
	AddMenus(context.Context, *AddMenuRequest) (*Empty, error)
	QueryAllMenuItem(context.Context, *QueryAllMenuItemRequest) (*MenuByGroup, error)
	DeleteAllMenu(context.Context, *QueryAllMenuItemRequest) (*Empty, error)
	mustEmbedUnimplementedMenuApiServer()
}

// UnimplementedMenuApiServer must be embedded to have forward compatible implementations.
type UnimplementedMenuApiServer struct {
}

func (UnimplementedMenuApiServer) AddToMenu(context.Context, *AddToMenuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToMenu not implemented")
}
func (UnimplementedMenuApiServer) RemoveFromMenu(context.Context, *RemoveFromMenuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromMenu not implemented")
}
func (UnimplementedMenuApiServer) YakScriptIsInMenu(context.Context, *YakScriptIsInMenuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YakScriptIsInMenu not implemented")
}
func (UnimplementedMenuApiServer) GetAllMenuItem(context.Context, *Empty) (*MenuByGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMenuItem not implemented")
}
func (UnimplementedMenuApiServer) DeleteAllMenuItem(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMenuItem not implemented")
}
func (UnimplementedMenuApiServer) ImportMenuItem(context.Context, *ImportMenuItemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportMenuItem not implemented")
}
func (UnimplementedMenuApiServer) ExportMenuItem(context.Context, *Empty) (*ExportMenuItemResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMenuItem not implemented")
}
func (UnimplementedMenuApiServer) GetMenuItemById(context.Context, *GetMenuItemByIdRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemById not implemented")
}
func (UnimplementedMenuApiServer) QueryGroupsByYakScriptId(context.Context, *QueryGroupsByYakScriptIdRequest) (*GroupNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupsByYakScriptId not implemented")
}
func (UnimplementedMenuApiServer) AddMenus(context.Context, *AddMenuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenus not implemented")
}
func (UnimplementedMenuApiServer) QueryAllMenuItem(context.Context, *QueryAllMenuItemRequest) (*MenuByGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllMenuItem not implemented")
}
func (UnimplementedMenuApiServer) DeleteAllMenu(context.Context, *QueryAllMenuItemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMenu not implemented")
}
func (UnimplementedMenuApiServer) mustEmbedUnimplementedMenuApiServer() {}

// UnsafeMenuApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuApiServer will
// result in compilation errors.
type UnsafeMenuApiServer interface {
	mustEmbedUnimplementedMenuApiServer()
}

func RegisterMenuApiServer(s grpc.ServiceRegistrar, srv MenuApiServer) {
	s.RegisterService(&MenuApi_ServiceDesc, srv)
}

func _MenuApi_AddToMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).AddToMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_AddToMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).AddToMenu(ctx, req.(*AddToMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_RemoveFromMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).RemoveFromMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_RemoveFromMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).RemoveFromMenu(ctx, req.(*RemoveFromMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_YakScriptIsInMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YakScriptIsInMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).YakScriptIsInMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_YakScriptIsInMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).YakScriptIsInMenu(ctx, req.(*YakScriptIsInMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_GetAllMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).GetAllMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_GetAllMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).GetAllMenuItem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_DeleteAllMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).DeleteAllMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_DeleteAllMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).DeleteAllMenuItem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_ImportMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).ImportMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_ImportMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).ImportMenuItem(ctx, req.(*ImportMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_ExportMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).ExportMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_ExportMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).ExportMenuItem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_GetMenuItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).GetMenuItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_GetMenuItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).GetMenuItemById(ctx, req.(*GetMenuItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_QueryGroupsByYakScriptId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupsByYakScriptIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).QueryGroupsByYakScriptId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_QueryGroupsByYakScriptId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).QueryGroupsByYakScriptId(ctx, req.(*QueryGroupsByYakScriptIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_AddMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).AddMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_AddMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).AddMenus(ctx, req.(*AddMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_QueryAllMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).QueryAllMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_QueryAllMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).QueryAllMenuItem(ctx, req.(*QueryAllMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuApi_DeleteAllMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuApiServer).DeleteAllMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuApi_DeleteAllMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuApiServer).DeleteAllMenu(ctx, req.(*QueryAllMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuApi_ServiceDesc is the grpc.ServiceDesc for MenuApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MenuApi",
	HandlerType: (*MenuApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToMenu",
			Handler:    _MenuApi_AddToMenu_Handler,
		},
		{
			MethodName: "RemoveFromMenu",
			Handler:    _MenuApi_RemoveFromMenu_Handler,
		},
		{
			MethodName: "YakScriptIsInMenu",
			Handler:    _MenuApi_YakScriptIsInMenu_Handler,
		},
		{
			MethodName: "GetAllMenuItem",
			Handler:    _MenuApi_GetAllMenuItem_Handler,
		},
		{
			MethodName: "DeleteAllMenuItem",
			Handler:    _MenuApi_DeleteAllMenuItem_Handler,
		},
		{
			MethodName: "ImportMenuItem",
			Handler:    _MenuApi_ImportMenuItem_Handler,
		},
		{
			MethodName: "ExportMenuItem",
			Handler:    _MenuApi_ExportMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItemById",
			Handler:    _MenuApi_GetMenuItemById_Handler,
		},
		{
			MethodName: "QueryGroupsByYakScriptId",
			Handler:    _MenuApi_QueryGroupsByYakScriptId_Handler,
		},
		{
			MethodName: "AddMenus",
			Handler:    _MenuApi_AddMenus_Handler,
		},
		{
			MethodName: "QueryAllMenuItem",
			Handler:    _MenuApi_QueryAllMenuItem_Handler,
		},
		{
			MethodName: "DeleteAllMenu",
			Handler:    _MenuApi_DeleteAllMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menu_api.proto",
}
