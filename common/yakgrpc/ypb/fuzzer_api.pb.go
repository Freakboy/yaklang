// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: fuzzer_api.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StringFuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results [][]byte `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *StringFuzzerResponse) Reset() {
	*x = StringFuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerResponse) ProtoMessage() {}

func (x *StringFuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerResponse.ProtoReflect.Descriptor instead.
func (*StringFuzzerResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{0}
}

func (x *StringFuzzerResponse) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

// Fuzz 相关模型
type StringFuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template                    string `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	HotPatchCode                string `protobuf:"bytes,2,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	HotPatchCodeWithParamGetter string `protobuf:"bytes,3,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	Limit                       int64  `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	TimeoutSeconds              int64  `protobuf:"varint,5,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
}

func (x *StringFuzzerRequest) Reset() {
	*x = StringFuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerRequest) ProtoMessage() {}

func (x *StringFuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerRequest.ProtoReflect.Descriptor instead.
func (*StringFuzzerRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{1}
}

func (x *StringFuzzerRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *StringFuzzerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StringFuzzerRequest) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type ExtractedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *ExtractedUrl) Reset() {
	*x = ExtractedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedUrl) ProtoMessage() {}

func (x *ExtractedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedUrl.ProtoReflect.Descriptor instead.
func (*ExtractedUrl) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{2}
}

func (x *ExtractedUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type QueryHTTPFuzzerResponseByTaskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*FuzzerResponse `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64             `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdResponse) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{3}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetData() []*FuzzerResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type QueryHTTPFuzzerResponseByTaskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用来索引对应的请求
	TaskId           int64  `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	FuzzRequestToken string `protobuf:"bytes,2,opt,name=FuzzRequestToken,proto3" json:"FuzzRequestToken,omitempty"`
	// 上一个请求的时间戳
	LastResponseTimestamp int64   `protobuf:"varint,3,opt,name=LastResponseTimestamp,proto3" json:"LastResponseTimestamp,omitempty"`
	Pagination            *Paging `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdRequest) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{4}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetFuzzRequestToken() string {
	if x != nil {
		return x.FuzzRequestToken
	}
	return ""
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetLastResponseTimestamp() int64 {
	if x != nil {
		return x.LastResponseTimestamp
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ExtractDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Extracted []byte `protobuf:"bytes,2,opt,name=Extracted,proto3" json:"Extracted,omitempty"`
}

func (x *ExtractDataResponse) Reset() {
	*x = ExtractDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataResponse) ProtoMessage() {}

func (x *ExtractDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataResponse.ProtoReflect.Descriptor instead.
func (*ExtractDataResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{5}
}

func (x *ExtractDataResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataResponse) GetExtracted() []byte {
	if x != nil {
		return x.Extracted
	}
	return nil
}

type ExtractDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// regexp mode -> regexp between 模式
	Mode string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// 根据前后缀提取
	PrefixRegexp string `protobuf:"bytes,3,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp string `protobuf:"bytes,4,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	// 根据一个正则提取
	MatchRegexp string `protobuf:"bytes,5,opt,name=MatchRegexp,proto3" json:"MatchRegexp,omitempty"`
	// Token 用来标注这个数据是谁的，一般可以用来处理提取的数据
	Token string `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	// 如果不再有数据了，设置这个 flag
	End bool `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *ExtractDataRequest) Reset() {
	*x = ExtractDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataRequest) ProtoMessage() {}

func (x *ExtractDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{6}
}

func (x *ExtractDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ExtractDataRequest) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetMatchRegexp() string {
	if x != nil {
		return x.MatchRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataRequest) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GenerateExtractRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixRegexp   string `protobuf:"bytes,1,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp   string `protobuf:"bytes,2,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	SelectedRegexp string `protobuf:"bytes,3,opt,name=SelectedRegexp,proto3" json:"SelectedRegexp,omitempty"`
}

func (x *GenerateExtractRuleResponse) Reset() {
	*x = GenerateExtractRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleResponse) ProtoMessage() {}

func (x *GenerateExtractRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleResponse.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateExtractRuleResponse) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSelectedRegexp() string {
	if x != nil {
		return x.SelectedRegexp
	}
	return ""
}

type IsMultipartFormDataRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMultipartFormData bool `protobuf:"varint,1,opt,name=IsMultipartFormData,proto3" json:"IsMultipartFormData,omitempty"`
}

func (x *IsMultipartFormDataRequestResult) Reset() {
	*x = IsMultipartFormDataRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMultipartFormDataRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMultipartFormDataRequestResult) ProtoMessage() {}

func (x *IsMultipartFormDataRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMultipartFormDataRequestResult.ProtoReflect.Descriptor instead.
func (*IsMultipartFormDataRequestResult) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{8}
}

func (x *IsMultipartFormDataRequestResult) GetIsMultipartFormData() bool {
	if x != nil {
		return x.IsMultipartFormData
	}
	return false
}

type GenerateExtractRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 要提取规则的样例数据
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// 选择的文本
	Selected []byte `protobuf:"bytes,2,opt,name=Selected,proto3" json:"Selected,omitempty"`
	// 选择前后缀的偏移量
	OffsetSize int64 `protobuf:"varint,3,opt,name=OffsetSize,proto3" json:"OffsetSize,omitempty"`
}

func (x *GenerateExtractRuleRequest) Reset() {
	*x = GenerateExtractRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleRequest) ProtoMessage() {}

func (x *GenerateExtractRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleRequest.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateExtractRuleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetSelected() []byte {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetOffsetSize() int64 {
	if x != nil {
		return x.OffsetSize
	}
	return 0
}

type FixUploadPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketResponse) Reset() {
	*x = FixUploadPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketResponse) ProtoMessage() {}

func (x *FixUploadPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketResponse.ProtoReflect.Descriptor instead.
func (*FixUploadPacketResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{10}
}

func (x *FixUploadPacketResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type FixUploadPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketRequest) Reset() {
	*x = FixUploadPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketRequest) ProtoMessage() {}

func (x *FixUploadPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketRequest.ProtoReflect.Descriptor instead.
func (*FixUploadPacketRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{11}
}

func (x *FixUploadPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type HTTPResponseMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPResponseMutateParams) Reset() {
	*x = HTTPResponseMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMutateParams) ProtoMessage() {}

func (x *HTTPResponseMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPResponseMutateParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{12}
}

func (x *HTTPResponseMutateParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type MutateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       []byte   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ExtraResults [][]byte `protobuf:"bytes,2,rep,name=ExtraResults,proto3" json:"ExtraResults,omitempty"`
}

func (x *MutateResult) Reset() {
	*x = MutateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResult) ProtoMessage() {}

func (x *MutateResult) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResult.ProtoReflect.Descriptor instead.
func (*MutateResult) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{13}
}

func (x *MutateResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MutateResult) GetExtraResults() [][]byte {
	if x != nil {
		return x.ExtraResults
	}
	return nil
}

type HTTPRequestMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request     []byte   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	FuzzMethods []string `protobuf:"bytes,2,rep,name=FuzzMethods,proto3" json:"FuzzMethods,omitempty"`
	// use chunk encode
	ChunkEncode bool `protobuf:"varint,3,opt,name=ChunkEncode,proto3" json:"ChunkEncode,omitempty"`
	// multipart boundary
	UploadEncode bool `protobuf:"varint,4,opt,name=UploadEncode,proto3" json:"UploadEncode,omitempty"`
}

func (x *HTTPRequestMutateParams) Reset() {
	*x = HTTPRequestMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestMutateParams) ProtoMessage() {}

func (x *HTTPRequestMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestMutateParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{14}
}

func (x *HTTPRequestMutateParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetFuzzMethods() []string {
	if x != nil {
		return x.FuzzMethods
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetChunkEncode() bool {
	if x != nil {
		return x.ChunkEncode
	}
	return false
}

func (x *HTTPRequestMutateParams) GetUploadEncode() bool {
	if x != nil {
		return x.UploadEncode
	}
	return false
}

type RedirectRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                  string  `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response                 string  `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	IsHttps                  bool    `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	PerRequestTimeoutSeconds float64 `protobuf:"fixed64,4,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	Proxy                    string  `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *RedirectRequestParams) Reset() {
	*x = RedirectRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectRequestParams) ProtoMessage() {}

func (x *RedirectRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectRequestParams.ProtoReflect.Descriptor instead.
func (*RedirectRequestParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{15}
}

func (x *RedirectRequestParams) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *RedirectRequestParams) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RedirectRequestParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectRequestParams) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *RedirectRequestParams) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ExtractHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *ExtractHTTPResponseResult) Reset() {
	*x = ExtractHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseResult) ProtoMessage() {}

func (x *ExtractHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{16}
}

func (x *ExtractHTTPResponseResult) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type HTTPResponseExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`   // default for index
	Type             string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`   // regex / xpath / kval / json / nuclei-dsl
	Scope            string   `protobuf:"bytes,3,opt,name=Scope,proto3" json:"Scope,omitempty"` // body / header / raw
	Groups           []string `protobuf:"bytes,4,rep,name=Groups,proto3" json:"Groups,omitempty"`
	RegexpMatchGroup []int64  `protobuf:"varint,5,rep,packed,name=RegexpMatchGroup,proto3" json:"RegexpMatchGroup,omitempty"`
	XPathAttribute   string   `protobuf:"bytes,6,opt,name=XPathAttribute,proto3" json:"XPathAttribute,omitempty"`
}

func (x *HTTPResponseExtractor) Reset() {
	*x = HTTPResponseExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseExtractor) ProtoMessage() {}

func (x *HTTPResponseExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseExtractor.ProtoReflect.Descriptor instead.
func (*HTTPResponseExtractor) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{17}
}

func (x *HTTPResponseExtractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPResponseExtractor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HTTPResponseExtractor) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseExtractor) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HTTPResponseExtractor) GetRegexpMatchGroup() []int64 {
	if x != nil {
		return x.RegexpMatchGroup
	}
	return nil
}

func (x *HTTPResponseExtractor) GetXPathAttribute() string {
	if x != nil {
		return x.XPathAttribute
	}
	return ""
}

type ExtractHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extractors   []*HTTPResponseExtractor `protobuf:"bytes,1,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	HTTPResponse string                   `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
}

func (x *ExtractHTTPResponseParams) Reset() {
	*x = ExtractHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseParams) ProtoMessage() {}

func (x *ExtractHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{18}
}

func (x *ExtractHTTPResponseParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *ExtractHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

type MatchHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matched bool `protobuf:"varint,1,opt,name=Matched,proto3" json:"Matched,omitempty"`
}

func (x *MatchHTTPResponseResult) Reset() {
	*x = MatchHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseResult) ProtoMessage() {}

func (x *MatchHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{19}
}

func (x *MatchHTTPResponseResult) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

type HTTPResponseMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMatchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=SubMatchers,proto3" json:"SubMatchers,omitempty"`
	SubMatcherCondition string                 `protobuf:"bytes,2,opt,name=SubMatcherCondition,proto3" json:"SubMatcherCondition,omitempty"`
	MatcherType         string                 `protobuf:"bytes,3,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Scope               string                 `protobuf:"bytes,4,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Condition           string                 `protobuf:"bytes,5,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Group               []string               `protobuf:"bytes,6,rep,name=Group,proto3" json:"Group,omitempty"`
	GroupEncoding       string                 `protobuf:"bytes,7,opt,name=GroupEncoding,proto3" json:"GroupEncoding,omitempty"`
	Negative            bool                   `protobuf:"varint,8,opt,name=Negative,proto3" json:"Negative,omitempty"`
	ExprType            string                 `protobuf:"bytes,9,opt,name=ExprType,proto3" json:"ExprType,omitempty"`
}

func (x *HTTPResponseMatcher) Reset() {
	*x = HTTPResponseMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMatcher) ProtoMessage() {}

func (x *HTTPResponseMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMatcher.ProtoReflect.Descriptor instead.
func (*HTTPResponseMatcher) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPResponseMatcher) GetSubMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.SubMatchers
	}
	return nil
}

func (x *HTTPResponseMatcher) GetSubMatcherCondition() string {
	if x != nil {
		return x.SubMatcherCondition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseMatcher) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *HTTPResponseMatcher) GetGroupEncoding() string {
	if x != nil {
		return x.GroupEncoding
	}
	return ""
}

func (x *HTTPResponseMatcher) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *HTTPResponseMatcher) GetExprType() string {
	if x != nil {
		return x.ExprType
	}
	return ""
}

type MatchHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatcherCondition string                 `protobuf:"bytes,2,opt,name=MatcherCondition,proto3" json:"MatcherCondition,omitempty"`
	IsHTTPS          bool                   `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	HTTPResponse     string                 `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest      string                 `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *MatchHTTPResponseParams) Reset() {
	*x = MatchHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseParams) ProtoMessage() {}

func (x *MatchHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{21}
}

func (x *MatchHTTPResponseParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *MatchHTTPResponseParams) GetMatcherCondition() string {
	if x != nil {
		return x.MatcherCondition
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *MatchHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetHTTPRequest() string {
	if x != nil {
		return x.HTTPRequest
	}
	return ""
}

type RenderVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KVPair `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *RenderVariablesResponse) Reset() {
	*x = RenderVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesResponse) ProtoMessage() {}

func (x *RenderVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesResponse.ProtoReflect.Descriptor instead.
func (*RenderVariablesResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{22}
}

func (x *RenderVariablesResponse) GetResults() []*KVPair {
	if x != nil {
		return x.Results
	}
	return nil
}

type KVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{23}
}

func (x *KVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RenderVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params       []*KVPair `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	IsHTTPS      bool      `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	HTTPRequest  []byte    `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPResponse []byte    `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
}

func (x *RenderVariablesRequest) Reset() {
	*x = RenderVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesRequest) ProtoMessage() {}

func (x *RenderVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesRequest.ProtoReflect.Descriptor instead.
func (*RenderVariablesRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{24}
}

func (x *RenderVariablesRequest) GetParams() []*KVPair {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RenderVariablesRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *RenderVariablesRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *RenderVariablesRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

type FuzzerParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// nuclei-dsl / raw
	Type string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *FuzzerParamItem) Reset() {
	*x = FuzzerParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerParamItem) ProtoMessage() {}

func (x *FuzzerParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerParamItem.ProtoReflect.Descriptor instead.
func (*FuzzerParamItem) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{25}
}

func (x *FuzzerParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FuzzerParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FuzzerParamItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PreloadHTTPFuzzerParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsResponse) Reset() {
	*x = PreloadHTTPFuzzerParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsResponse) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsResponse.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{26}
}

func (x *PreloadHTTPFuzzerParamsResponse) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type PreloadHTTPFuzzerParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsRequest) Reset() {
	*x = PreloadHTTPFuzzerParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsRequest) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsRequest.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{27}
}

func (x *PreloadHTTPFuzzerParamsRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type FuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method      string        `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	StatusCode  int32         `protobuf:"varint,2,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Host        string        `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	ContentType string        `protobuf:"bytes,4,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Headers     []*HTTPHeader `protobuf:"bytes,5,rep,name=Headers,proto3" json:"Headers,omitempty"`
	ResponseRaw []byte        `protobuf:"bytes,6,opt,name=ResponseRaw,proto3" json:"ResponseRaw,omitempty"`
	// response body 的长度
	BodyLength int64 `protobuf:"varint,7,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	// 这个请求大约花费了多长时间
	DurationMs          int64 `protobuf:"varint,8,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"` // FirstByte Duration
	DNSDurationMs       int64 `protobuf:"varint,40,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`
	FirstByteDurationMs int64 `protobuf:"varint,41,opt,name=FirstByteDurationMs,proto3" json:"FirstByteDurationMs,omitempty"`
	TotalDurationMs     int64 `protobuf:"varint,42,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"`
	// 给一个随机 ID
	UUID string `protobuf:"bytes,9,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// timestamp 请求
	Timestamp int64 `protobuf:"varint,10,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// RequestRaw 原始数据包
	RequestRaw []byte `protobuf:"bytes,11,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"`
	// 猜测可能的编码
	GuessResponseEncoding string `protobuf:"bytes,12,opt,name=GuessResponseEncoding,proto3" json:"GuessResponseEncoding,omitempty"`
	// 基础状态
	Ok     bool   `protobuf:"varint,31,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,32,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// IsHTTPS
	IsHTTPS bool `protobuf:"varint,33,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	// payloads
	Payloads         []string `protobuf:"bytes,34,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	BodySimilarity   float64  `protobuf:"fixed64,35,opt,name=BodySimilarity,proto3" json:"BodySimilarity,omitempty"`
	HeaderSimilarity float64  `protobuf:"fixed64,36,opt,name=HeaderSimilarity,proto3" json:"HeaderSimilarity,omitempty"`
	// Matched by filter
	MatchedByFilter bool   `protobuf:"varint,37,opt,name=MatchedByFilter,proto3" json:"MatchedByFilter,omitempty"`
	Url             string `protobuf:"bytes,38,opt,name=Url,proto3" json:"Url,omitempty"`
	TaskId          int64  `protobuf:"varint,39,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 使用哪个代理
	Proxy      string `protobuf:"bytes,43,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	RemoteAddr string `protobuf:"bytes,44,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	// 如果设置了
	ExtractedResults []*KVPair `protobuf:"bytes,45,rep,name=ExtractedResults,proto3" json:"ExtractedResults,omitempty"`
	MatchedByMatcher bool      `protobuf:"varint,46,opt,name=MatchedByMatcher,proto3" json:"MatchedByMatcher,omitempty"`
}

func (x *FuzzerResponse) Reset() {
	*x = FuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponse) ProtoMessage() {}

func (x *FuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponse.ProtoReflect.Descriptor instead.
func (*FuzzerResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{28}
}

func (x *FuzzerResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FuzzerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FuzzerResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FuzzerResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FuzzerResponse) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FuzzerResponse) GetResponseRaw() []byte {
	if x != nil {
		return x.ResponseRaw
	}
	return nil
}

func (x *FuzzerResponse) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *FuzzerResponse) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetFirstByteDurationMs() int64 {
	if x != nil {
		return x.FirstByteDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *FuzzerResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FuzzerResponse) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerResponse) GetGuessResponseEncoding() string {
	if x != nil {
		return x.GuessResponseEncoding
	}
	return ""
}

func (x *FuzzerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *FuzzerResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FuzzerResponse) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerResponse) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *FuzzerResponse) GetBodySimilarity() float64 {
	if x != nil {
		return x.BodySimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetHeaderSimilarity() float64 {
	if x != nil {
		return x.HeaderSimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetMatchedByFilter() bool {
	if x != nil {
		return x.MatchedByFilter
	}
	return false
}

func (x *FuzzerResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FuzzerResponse) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FuzzerResponse) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *FuzzerResponse) GetExtractedResults() []*KVPair {
	if x != nil {
		return x.ExtractedResults
	}
	return nil
}

func (x *FuzzerResponse) GetMatchedByMatcher() bool {
	if x != nil {
		return x.MatchedByMatcher
	}
	return false
}

type FuzzerResponseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设置 body 大小作为过滤依据
	MinBodySize int64 `protobuf:"varint,1,opt,name=MinBodySize,proto3" json:"MinBodySize,omitempty"`
	MaxBodySize int64 `protobuf:"varint,2,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	// 设置正则作为过滤依据，这个正则针对整个数据包生效
	Regexps    []string `protobuf:"bytes,3,rep,name=Regexps,proto3" json:"Regexps,omitempty"`
	Keywords   []string `protobuf:"bytes,4,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	StatusCode []string `protobuf:"bytes,6,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *FuzzerResponseFilter) Reset() {
	*x = FuzzerResponseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponseFilter) ProtoMessage() {}

func (x *FuzzerResponseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponseFilter.ProtoReflect.Descriptor instead.
func (*FuzzerResponseFilter) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{29}
}

func (x *FuzzerResponseFilter) GetMinBodySize() int64 {
	if x != nil {
		return x.MinBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetRegexps() []string {
	if x != nil {
		return x.Regexps
	}
	return nil
}

func (x *FuzzerResponseFilter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FuzzerResponseFilter) GetStatusCode() []string {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type FuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                  string             `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	RequestRaw               []byte             `protobuf:"bytes,16,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"` // 这里是因为麻将块儿的问题，还是需要处理一下类型
	Params                   []*FuzzerParamItem `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty"`
	Concurrent               int64              `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	IsHTTPS                  bool               `protobuf:"varint,4,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	ForceFuzz                bool               `protobuf:"varint,5,opt,name=ForceFuzz,proto3" json:"ForceFuzz,omitempty"`
	Proxy                    string             `protobuf:"bytes,6,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	PerRequestTimeoutSeconds float64            `protobuf:"fixed64,7,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	// 用于处理 Host 和 Header 中 Host 不一致的情况
	ActualAddr string `protobuf:"bytes,8,opt,name=ActualAddr,proto3" json:"ActualAddr,omitempty"`
	// redirect setting
	NoFollowRedirect bool `protobuf:"varint,9,opt,name=NoFollowRedirect,proto3" json:"NoFollowRedirect,omitempty"`
	// 这个弃用了，Meta 自动归类到 Redirect 里面
	NoFollowMetaRedirect bool    `protobuf:"varint,10,opt,name=NoFollowMetaRedirect,proto3" json:"NoFollowMetaRedirect,omitempty"`
	FollowJSRedirect     bool    `protobuf:"varint,11,opt,name=FollowJSRedirect,proto3" json:"FollowJSRedirect,omitempty"`
	RedirectTimes        float64 `protobuf:"fixed64,27,opt,name=RedirectTimes,proto3" json:"RedirectTimes,omitempty"`
	// 如果从历史加载，就用这个！
	HistoryWebFuzzerId int32 `protobuf:"varint,12,opt,name=HistoryWebFuzzerId,proto3" json:"HistoryWebFuzzerId,omitempty"`
	// 如果不想自动修复 Content-Length
	NoFixContentLength bool `protobuf:"varint,13,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	// 热加载代码
	HotPatchCode string `protobuf:"bytes,14,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	// 设置 Fuzzer
	Filter *FuzzerResponseFilter `protobuf:"bytes,15,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 随时 delay
	DelayMinSeconds float64 `protobuf:"fixed64,17,opt,name=DelayMinSeconds,proto3" json:"DelayMinSeconds,omitempty"`
	DelayMaxSeconds float64 `protobuf:"fixed64,18,opt,name=DelayMaxSeconds,proto3" json:"DelayMaxSeconds,omitempty"`
	// 获取模版数据
	HotPatchCodeWithParamGetter string `protobuf:"bytes,19,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	// retry
	MaxRetryTimes        int64   `protobuf:"varint,20,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`              // 最大重试次数
	RetryInStatusCode    string  `protobuf:"bytes,21,opt,name=RetryInStatusCode,proto3" json:"RetryInStatusCode,omitempty"`       // 命中这些状态码的时候，重试
	RetryNotInStatusCode string  `protobuf:"bytes,22,opt,name=RetryNotInStatusCode,proto3" json:"RetryNotInStatusCode,omitempty"` // 不是这些状态的时候，重试
	RetryWaitSeconds     float64 `protobuf:"fixed64,25,opt,name=RetryWaitSeconds,proto3" json:"RetryWaitSeconds,omitempty"`       // 重试等待时间
	RetryMaxWaitSeconds  float64 `protobuf:"fixed64,26,opt,name=RetryMaxWaitSeconds,proto3" json:"RetryMaxWaitSeconds,omitempty"` // 最大重试等待时间
	// Response Charset
	// 默认或者不填为 UTF8
	// 中国的话，用 gb18030
	ResponseCharset string `protobuf:"bytes,23,opt,name=ResponseCharset,proto3" json:"ResponseCharset,omitempty"`
	// Verbose
	// 这个字段不需要用户做任何处理，也不需要客户端传递
	// 这是服务端用来初始化的字段，用以构建快速搜索
	Verbose string `protobuf:"bytes,24,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	// dns config
	DNSServers []string  `protobuf:"bytes,28,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
	EtcHosts   []*KVPair `protobuf:"bytes,29,rep,name=EtcHosts,proto3" json:"EtcHosts,omitempty"`
	// 不启用系统代理
	NoSystemProxy bool `protobuf:"varint,30,opt,name=NoSystemProxy,proto3" json:"NoSystemProxy,omitempty"`
	// 重复次数
	RepeatTimes int64 `protobuf:"varint,31,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`
	// Extractor n Matchers
	Extractors        []*HTTPResponseExtractor `protobuf:"bytes,32,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers          []*HTTPResponseMatcher   `protobuf:"bytes,33,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition string                   `protobuf:"bytes,34,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
}

func (x *FuzzerRequest) Reset() {
	*x = FuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequest) ProtoMessage() {}

func (x *FuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequest.ProtoReflect.Descriptor instead.
func (*FuzzerRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{30}
}

func (x *FuzzerRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *FuzzerRequest) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FuzzerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *FuzzerRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerRequest) GetForceFuzz() bool {
	if x != nil {
		return x.ForceFuzz
	}
	return false
}

func (x *FuzzerRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerRequest) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetActualAddr() string {
	if x != nil {
		return x.ActualAddr
	}
	return ""
}

func (x *FuzzerRequest) GetNoFollowRedirect() bool {
	if x != nil {
		return x.NoFollowRedirect
	}
	return false
}

func (x *FuzzerRequest) GetNoFollowMetaRedirect() bool {
	if x != nil {
		return x.NoFollowMetaRedirect
	}
	return false
}

func (x *FuzzerRequest) GetFollowJSRedirect() bool {
	if x != nil {
		return x.FollowJSRedirect
	}
	return false
}

func (x *FuzzerRequest) GetRedirectTimes() float64 {
	if x != nil {
		return x.RedirectTimes
	}
	return 0
}

func (x *FuzzerRequest) GetHistoryWebFuzzerId() int32 {
	if x != nil {
		return x.HistoryWebFuzzerId
	}
	return 0
}

func (x *FuzzerRequest) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *FuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *FuzzerRequest) GetFilter() *FuzzerResponseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FuzzerRequest) GetDelayMinSeconds() float64 {
	if x != nil {
		return x.DelayMinSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetDelayMaxSeconds() float64 {
	if x != nil {
		return x.DelayMaxSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *FuzzerRequest) GetMaxRetryTimes() int64 {
	if x != nil {
		return x.MaxRetryTimes
	}
	return 0
}

func (x *FuzzerRequest) GetRetryInStatusCode() string {
	if x != nil {
		return x.RetryInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryNotInStatusCode() string {
	if x != nil {
		return x.RetryNotInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryWaitSeconds() float64 {
	if x != nil {
		return x.RetryWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetRetryMaxWaitSeconds() float64 {
	if x != nil {
		return x.RetryMaxWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetResponseCharset() string {
	if x != nil {
		return x.ResponseCharset
	}
	return ""
}

func (x *FuzzerRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FuzzerRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

func (x *FuzzerRequest) GetEtcHosts() []*KVPair {
	if x != nil {
		return x.EtcHosts
	}
	return nil
}

func (x *FuzzerRequest) GetNoSystemProxy() bool {
	if x != nil {
		return x.NoSystemProxy
	}
	return false
}

func (x *FuzzerRequest) GetRepeatTimes() int64 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *FuzzerRequest) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *FuzzerRequest) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *FuzzerRequest) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

type DeleteHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = DeleteHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = GetHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *GetHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HistoryHTTPFuzzerTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo     *HistoryHTTPFuzzerTask `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	OriginRequest *FuzzerRequest         `protobuf:"bytes,2,opt,name=OriginRequest,proto3" json:"OriginRequest,omitempty"`
}

func (x *HistoryHTTPFuzzerTaskDetail) Reset() {
	*x = HistoryHTTPFuzzerTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTaskDetail) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTaskDetail.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTaskDetail) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{33}
}

func (x *HistoryHTTPFuzzerTaskDetail) GetBasicInfo() *HistoryHTTPFuzzerTask {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *HistoryHTTPFuzzerTaskDetail) GetOriginRequest() *FuzzerRequest {
	if x != nil {
		return x.OriginRequest
	}
	return nil
}

type HistoryHTTPFuzzerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	HTTPFlowTotal        int32  `protobuf:"varint,3,opt,name=HTTPFlowTotal,proto3" json:"HTTPFlowTotal,omitempty"`
	HTTPFlowSuccessCount int32  `protobuf:"varint,4,opt,name=HTTPFlowSuccessCount,proto3" json:"HTTPFlowSuccessCount,omitempty"`
	HTTPFlowFailedCount  int32  `protobuf:"varint,5,opt,name=HTTPFlowFailedCount,proto3" json:"HTTPFlowFailedCount,omitempty"`
	Host                 string `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port                 int32  `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *HistoryHTTPFuzzerTask) Reset() {
	*x = HistoryHTTPFuzzerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTask) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTask) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTask.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTask) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{34}
}

func (x *HistoryHTTPFuzzerTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowTotal() int32 {
	if x != nil {
		return x.HTTPFlowTotal
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowSuccessCount() int32 {
	if x != nil {
		return x.HTTPFlowSuccessCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowFailedCount() int32 {
	if x != nil {
		return x.HTTPFlowFailedCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HistoryHTTPFuzzerTask) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HistoryHTTPFuzzerTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*HistoryHTTPFuzzerTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *HistoryHTTPFuzzerTasks) Reset() {
	*x = HistoryHTTPFuzzerTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasks) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasks) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasks.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasks) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{35}
}

func (x *HistoryHTTPFuzzerTasks) GetTasks() []*HistoryHTTPFuzzerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type HistoryHTTPFuzzerTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*HistoryHTTPFuzzerTaskDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                          `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64                          `protobuf:"varint,3,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	Pagination *Paging                        `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *HistoryHTTPFuzzerTasksResponse) Reset() {
	*x = HistoryHTTPFuzzerTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasksResponse) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasksResponse.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasksResponse) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{36}
}

func (x *HistoryHTTPFuzzerTasksResponse) GetData() []*HistoryHTTPFuzzerTaskDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHistoryHTTPFuzzerTaskExParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keyword    string  `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) Reset() {
	*x = QueryHistoryHTTPFuzzerTaskExParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzer_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHistoryHTTPFuzzerTaskExParams) ProtoMessage() {}

func (x *QueryHistoryHTTPFuzzerTaskExParams) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzer_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHistoryHTTPFuzzerTaskExParams.ProtoReflect.Descriptor instead.
func (*QueryHistoryHTTPFuzzerTaskExParams) Descriptor() ([]byte, []int) {
	return file_fuzzer_api_proto_rawDescGZIP(), []int{37}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

var File_fuzzer_api_proto protoreflect.FileDescriptor

var file_fuzzer_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x30, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x27,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0xce,
	0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22,
	0x54, 0x0a, 0x20, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x46, 0x69, 0x78, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x18,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a,
	0x7a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb9,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x49, 0x0a, 0x19, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x58, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x58, 0x50, 0x61, 0x74, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x13,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x75,
	0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x17,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x4b,
	0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b,
	0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a,
	0x0f, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x1f,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4e, 0x0a,
	0x1e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb6, 0x07,
	0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x12,
	0x34, 0x0a, 0x15, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x0b, 0x0a, 0x0d, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x6f, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a,
	0x53, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46,
	0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x45, 0x74, 0x63, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b,
	0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x45, 0x74, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4e, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x31, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x91, 0x01, 0x0a, 0x1b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x4a, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x1e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x32, 0xee, 0x0c, 0x0a, 0x09, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x12, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x6c, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x12, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37,
	0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x13,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a,
	0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x43, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fuzzer_api_proto_rawDescOnce sync.Once
	file_fuzzer_api_proto_rawDescData = file_fuzzer_api_proto_rawDesc
)

func file_fuzzer_api_proto_rawDescGZIP() []byte {
	file_fuzzer_api_proto_rawDescOnce.Do(func() {
		file_fuzzer_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_fuzzer_api_proto_rawDescData)
	})
	return file_fuzzer_api_proto_rawDescData
}

var file_fuzzer_api_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_fuzzer_api_proto_goTypes = []interface{}{
	(*StringFuzzerResponse)(nil),                    // 0: ypb.StringFuzzerResponse
	(*StringFuzzerRequest)(nil),                     // 1: ypb.StringFuzzerRequest
	(*ExtractedUrl)(nil),                            // 2: ypb.ExtractedUrl
	(*QueryHTTPFuzzerResponseByTaskIdResponse)(nil), // 3: ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	(*QueryHTTPFuzzerResponseByTaskIdRequest)(nil),  // 4: ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	(*ExtractDataResponse)(nil),                     // 5: ypb.ExtractDataResponse
	(*ExtractDataRequest)(nil),                      // 6: ypb.ExtractDataRequest
	(*GenerateExtractRuleResponse)(nil),             // 7: ypb.GenerateExtractRuleResponse
	(*IsMultipartFormDataRequestResult)(nil),        // 8: ypb.IsMultipartFormDataRequestResult
	(*GenerateExtractRuleRequest)(nil),              // 9: ypb.GenerateExtractRuleRequest
	(*FixUploadPacketResponse)(nil),                 // 10: ypb.FixUploadPacketResponse
	(*FixUploadPacketRequest)(nil),                  // 11: ypb.FixUploadPacketRequest
	(*HTTPResponseMutateParams)(nil),                // 12: ypb.HTTPResponseMutateParams
	(*MutateResult)(nil),                            // 13: ypb.MutateResult
	(*HTTPRequestMutateParams)(nil),                 // 14: ypb.HTTPRequestMutateParams
	(*RedirectRequestParams)(nil),                   // 15: ypb.RedirectRequestParams
	(*ExtractHTTPResponseResult)(nil),               // 16: ypb.ExtractHTTPResponseResult
	(*HTTPResponseExtractor)(nil),                   // 17: ypb.HTTPResponseExtractor
	(*ExtractHTTPResponseParams)(nil),               // 18: ypb.ExtractHTTPResponseParams
	(*MatchHTTPResponseResult)(nil),                 // 19: ypb.MatchHTTPResponseResult
	(*HTTPResponseMatcher)(nil),                     // 20: ypb.HTTPResponseMatcher
	(*MatchHTTPResponseParams)(nil),                 // 21: ypb.MatchHTTPResponseParams
	(*RenderVariablesResponse)(nil),                 // 22: ypb.RenderVariablesResponse
	(*KVPair)(nil),                                  // 23: ypb.KVPair
	(*RenderVariablesRequest)(nil),                  // 24: ypb.RenderVariablesRequest
	(*FuzzerParamItem)(nil),                         // 25: ypb.FuzzerParamItem
	(*PreloadHTTPFuzzerParamsResponse)(nil),         // 26: ypb.PreloadHTTPFuzzerParamsResponse
	(*PreloadHTTPFuzzerParamsRequest)(nil),          // 27: ypb.PreloadHTTPFuzzerParamsRequest
	(*FuzzerResponse)(nil),                          // 28: ypb.FuzzerResponse
	(*FuzzerResponseFilter)(nil),                    // 29: ypb.FuzzerResponseFilter
	(*FuzzerRequest)(nil),                           // 30: ypb.FuzzerRequest
	(*DeleteHistoryHTTPFuzzerTaskRequest)(nil),      // 31: ypb.DeleteHistoryHTTPFuzzerTaskRequest
	(*GetHistoryHTTPFuzzerTaskRequest)(nil),         // 32: ypb.GetHistoryHTTPFuzzerTaskRequest
	(*HistoryHTTPFuzzerTaskDetail)(nil),             // 33: ypb.HistoryHTTPFuzzerTaskDetail
	(*HistoryHTTPFuzzerTask)(nil),                   // 34: ypb.HistoryHTTPFuzzerTask
	(*HistoryHTTPFuzzerTasks)(nil),                  // 35: ypb.HistoryHTTPFuzzerTasks
	(*HistoryHTTPFuzzerTasksResponse)(nil),          // 36: ypb.HistoryHTTPFuzzerTasksResponse
	(*QueryHistoryHTTPFuzzerTaskExParams)(nil),      // 37: ypb.QueryHistoryHTTPFuzzerTaskExParams
	(*Paging)(nil),                                  // 38: ypb.Paging
	(*HTTPHeader)(nil),                              // 39: ypb.HTTPHeader
	(*Empty)(nil),                                   // 40: ypb.Empty
	(*HTTPFlow)(nil),                                // 41: ypb.HTTPFlow
}
var file_fuzzer_api_proto_depIdxs = []int32{
	38, // 0: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Pagination:type_name -> ypb.Paging
	28, // 1: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Data:type_name -> ypb.FuzzerResponse
	38, // 2: ypb.QueryHTTPFuzzerResponseByTaskIdRequest.Pagination:type_name -> ypb.Paging
	25, // 3: ypb.ExtractHTTPResponseResult.Values:type_name -> ypb.FuzzerParamItem
	17, // 4: ypb.ExtractHTTPResponseParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	20, // 5: ypb.HTTPResponseMatcher.SubMatchers:type_name -> ypb.HTTPResponseMatcher
	20, // 6: ypb.MatchHTTPResponseParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	23, // 7: ypb.RenderVariablesResponse.Results:type_name -> ypb.KVPair
	23, // 8: ypb.RenderVariablesRequest.Params:type_name -> ypb.KVPair
	25, // 9: ypb.PreloadHTTPFuzzerParamsResponse.Values:type_name -> ypb.FuzzerParamItem
	25, // 10: ypb.PreloadHTTPFuzzerParamsRequest.Params:type_name -> ypb.FuzzerParamItem
	39, // 11: ypb.FuzzerResponse.Headers:type_name -> ypb.HTTPHeader
	23, // 12: ypb.FuzzerResponse.ExtractedResults:type_name -> ypb.KVPair
	25, // 13: ypb.FuzzerRequest.Params:type_name -> ypb.FuzzerParamItem
	29, // 14: ypb.FuzzerRequest.Filter:type_name -> ypb.FuzzerResponseFilter
	23, // 15: ypb.FuzzerRequest.EtcHosts:type_name -> ypb.KVPair
	17, // 16: ypb.FuzzerRequest.Extractors:type_name -> ypb.HTTPResponseExtractor
	20, // 17: ypb.FuzzerRequest.Matchers:type_name -> ypb.HTTPResponseMatcher
	34, // 18: ypb.HistoryHTTPFuzzerTaskDetail.BasicInfo:type_name -> ypb.HistoryHTTPFuzzerTask
	30, // 19: ypb.HistoryHTTPFuzzerTaskDetail.OriginRequest:type_name -> ypb.FuzzerRequest
	34, // 20: ypb.HistoryHTTPFuzzerTasks.Tasks:type_name -> ypb.HistoryHTTPFuzzerTask
	33, // 21: ypb.HistoryHTTPFuzzerTasksResponse.Data:type_name -> ypb.HistoryHTTPFuzzerTaskDetail
	38, // 22: ypb.HistoryHTTPFuzzerTasksResponse.Pagination:type_name -> ypb.Paging
	38, // 23: ypb.QueryHistoryHTTPFuzzerTaskExParams.Pagination:type_name -> ypb.Paging
	32, // 24: ypb.FuzzerApi.GetHistoryHTTPFuzzerTask:input_type -> ypb.GetHistoryHTTPFuzzerTaskRequest
	40, // 25: ypb.FuzzerApi.QueryHistoryHTTPFuzzerTask:input_type -> ypb.Empty
	37, // 26: ypb.FuzzerApi.QueryHistoryHTTPFuzzerTaskEx:input_type -> ypb.QueryHistoryHTTPFuzzerTaskExParams
	31, // 27: ypb.FuzzerApi.DeleteHistoryHTTPFuzzerTask:input_type -> ypb.DeleteHistoryHTTPFuzzerTaskRequest
	30, // 28: ypb.FuzzerApi.HTTPFuzzer:input_type -> ypb.FuzzerRequest
	27, // 29: ypb.FuzzerApi.PreloadHTTPFuzzerParams:input_type -> ypb.PreloadHTTPFuzzerParamsRequest
	24, // 30: ypb.FuzzerApi.RenderVariables:input_type -> ypb.RenderVariablesRequest
	21, // 31: ypb.FuzzerApi.MatchHTTPResponse:input_type -> ypb.MatchHTTPResponseParams
	18, // 32: ypb.FuzzerApi.ExtractHTTPResponse:input_type -> ypb.ExtractHTTPResponseParams
	15, // 33: ypb.FuzzerApi.RedirectRequest:input_type -> ypb.RedirectRequestParams
	14, // 34: ypb.FuzzerApi.HTTPRequestMutate:input_type -> ypb.HTTPRequestMutateParams
	12, // 35: ypb.FuzzerApi.HTTPResponseMutate:input_type -> ypb.HTTPResponseMutateParams
	11, // 36: ypb.FuzzerApi.FixUploadPacket:input_type -> ypb.FixUploadPacketRequest
	11, // 37: ypb.FuzzerApi.IsMultipartFormDataRequest:input_type -> ypb.FixUploadPacketRequest
	9,  // 38: ypb.FuzzerApi.GenerateExtractRule:input_type -> ypb.GenerateExtractRuleRequest
	6,  // 39: ypb.FuzzerApi.ExtractData:input_type -> ypb.ExtractDataRequest
	4,  // 40: ypb.FuzzerApi.QueryHTTPFuzzerResponseByTaskId:input_type -> ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	30, // 41: ypb.FuzzerApi.ExtractUrl:input_type -> ypb.FuzzerRequest
	28, // 42: ypb.FuzzerApi.ConvertFuzzerResponseToHTTPFlow:input_type -> ypb.FuzzerResponse
	1,  // 43: ypb.FuzzerApi.StringFuzzer:input_type -> ypb.StringFuzzerRequest
	33, // 44: ypb.FuzzerApi.GetHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTaskDetail
	35, // 45: ypb.FuzzerApi.QueryHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTasks
	36, // 46: ypb.FuzzerApi.QueryHistoryHTTPFuzzerTaskEx:output_type -> ypb.HistoryHTTPFuzzerTasksResponse
	40, // 47: ypb.FuzzerApi.DeleteHistoryHTTPFuzzerTask:output_type -> ypb.Empty
	28, // 48: ypb.FuzzerApi.HTTPFuzzer:output_type -> ypb.FuzzerResponse
	26, // 49: ypb.FuzzerApi.PreloadHTTPFuzzerParams:output_type -> ypb.PreloadHTTPFuzzerParamsResponse
	22, // 50: ypb.FuzzerApi.RenderVariables:output_type -> ypb.RenderVariablesResponse
	19, // 51: ypb.FuzzerApi.MatchHTTPResponse:output_type -> ypb.MatchHTTPResponseResult
	16, // 52: ypb.FuzzerApi.ExtractHTTPResponse:output_type -> ypb.ExtractHTTPResponseResult
	28, // 53: ypb.FuzzerApi.RedirectRequest:output_type -> ypb.FuzzerResponse
	13, // 54: ypb.FuzzerApi.HTTPRequestMutate:output_type -> ypb.MutateResult
	13, // 55: ypb.FuzzerApi.HTTPResponseMutate:output_type -> ypb.MutateResult
	10, // 56: ypb.FuzzerApi.FixUploadPacket:output_type -> ypb.FixUploadPacketResponse
	8,  // 57: ypb.FuzzerApi.IsMultipartFormDataRequest:output_type -> ypb.IsMultipartFormDataRequestResult
	7,  // 58: ypb.FuzzerApi.GenerateExtractRule:output_type -> ypb.GenerateExtractRuleResponse
	5,  // 59: ypb.FuzzerApi.ExtractData:output_type -> ypb.ExtractDataResponse
	3,  // 60: ypb.FuzzerApi.QueryHTTPFuzzerResponseByTaskId:output_type -> ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	2,  // 61: ypb.FuzzerApi.ExtractUrl:output_type -> ypb.ExtractedUrl
	41, // 62: ypb.FuzzerApi.ConvertFuzzerResponseToHTTPFlow:output_type -> ypb.HTTPFlow
	0,  // 63: ypb.FuzzerApi.StringFuzzer:output_type -> ypb.StringFuzzerResponse
	44, // [44:64] is the sub-list for method output_type
	24, // [24:44] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_fuzzer_api_proto_init() }
func file_fuzzer_api_proto_init() {
	if File_fuzzer_api_proto != nil {
		return
	}
	file_message_api_proto_init()
	file_http_flow_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fuzzer_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMultipartFormDataRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzer_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHistoryHTTPFuzzerTaskExParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fuzzer_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fuzzer_api_proto_goTypes,
		DependencyIndexes: file_fuzzer_api_proto_depIdxs,
		MessageInfos:      file_fuzzer_api_proto_msgTypes,
	}.Build()
	File_fuzzer_api_proto = out.File
	file_fuzzer_api_proto_rawDesc = nil
	file_fuzzer_api_proto_goTypes = nil
	file_fuzzer_api_proto_depIdxs = nil
}
