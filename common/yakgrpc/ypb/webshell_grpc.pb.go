// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/webshell.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebShellManager_CreateWebShell_FullMethodName     = "/ypb.WebShellManager/CreateWebShell"
	WebShellManager_DeleteWebShell_FullMethodName     = "/ypb.WebShellManager/DeleteWebShell"
	WebShellManager_UpdateWebShellById_FullMethodName = "/ypb.WebShellManager/UpdateWebShellById"
	WebShellManager_QueryWebShells_FullMethodName     = "/ypb.WebShellManager/QueryWebShells"
	WebShellManager_Ping_FullMethodName               = "/ypb.WebShellManager/Ping"
	WebShellManager_GetBasicInfo_FullMethodName       = "/ypb.WebShellManager/GetBasicInfo"
)

// WebShellManagerClient is the client API for WebShellManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebShellManagerClient interface {
	CreateWebShell(ctx context.Context, in *WebShell, opts ...grpc.CallOption) (*Empty, error)
	DeleteWebShell(ctx context.Context, in *DeleteWebShellRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateWebShellById(ctx context.Context, in *UpdateWebShellRequest, opts ...grpc.CallOption) (*Empty, error)
	QueryWebShells(ctx context.Context, in *QueryWebShellsRequest, opts ...grpc.CallOption) (*QueryWebShellsResponse, error)
	Ping(ctx context.Context, in *WebShellRequest, opts ...grpc.CallOption) (*WebShellResponse, error)
	GetBasicInfo(ctx context.Context, in *WebShellRequest, opts ...grpc.CallOption) (*WebShellResponse, error)
}

type webShellManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWebShellManagerClient(cc grpc.ClientConnInterface) WebShellManagerClient {
	return &webShellManagerClient{cc}
}

func (c *webShellManagerClient) CreateWebShell(ctx context.Context, in *WebShell, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WebShellManager_CreateWebShell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webShellManagerClient) DeleteWebShell(ctx context.Context, in *DeleteWebShellRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WebShellManager_DeleteWebShell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webShellManagerClient) UpdateWebShellById(ctx context.Context, in *UpdateWebShellRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WebShellManager_UpdateWebShellById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webShellManagerClient) QueryWebShells(ctx context.Context, in *QueryWebShellsRequest, opts ...grpc.CallOption) (*QueryWebShellsResponse, error) {
	out := new(QueryWebShellsResponse)
	err := c.cc.Invoke(ctx, WebShellManager_QueryWebShells_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webShellManagerClient) Ping(ctx context.Context, in *WebShellRequest, opts ...grpc.CallOption) (*WebShellResponse, error) {
	out := new(WebShellResponse)
	err := c.cc.Invoke(ctx, WebShellManager_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webShellManagerClient) GetBasicInfo(ctx context.Context, in *WebShellRequest, opts ...grpc.CallOption) (*WebShellResponse, error) {
	out := new(WebShellResponse)
	err := c.cc.Invoke(ctx, WebShellManager_GetBasicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebShellManagerServer is the server API for WebShellManager service.
// All implementations must embed UnimplementedWebShellManagerServer
// for forward compatibility
type WebShellManagerServer interface {
	CreateWebShell(context.Context, *WebShell) (*Empty, error)
	DeleteWebShell(context.Context, *DeleteWebShellRequest) (*Empty, error)
	UpdateWebShellById(context.Context, *UpdateWebShellRequest) (*Empty, error)
	QueryWebShells(context.Context, *QueryWebShellsRequest) (*QueryWebShellsResponse, error)
	Ping(context.Context, *WebShellRequest) (*WebShellResponse, error)
	GetBasicInfo(context.Context, *WebShellRequest) (*WebShellResponse, error)
	mustEmbedUnimplementedWebShellManagerServer()
}

// UnimplementedWebShellManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWebShellManagerServer struct {
}

func (UnimplementedWebShellManagerServer) CreateWebShell(context.Context, *WebShell) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebShell not implemented")
}
func (UnimplementedWebShellManagerServer) DeleteWebShell(context.Context, *DeleteWebShellRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebShell not implemented")
}
func (UnimplementedWebShellManagerServer) UpdateWebShellById(context.Context, *UpdateWebShellRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebShellById not implemented")
}
func (UnimplementedWebShellManagerServer) QueryWebShells(context.Context, *QueryWebShellsRequest) (*QueryWebShellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebShells not implemented")
}
func (UnimplementedWebShellManagerServer) Ping(context.Context, *WebShellRequest) (*WebShellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWebShellManagerServer) GetBasicInfo(context.Context, *WebShellRequest) (*WebShellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicInfo not implemented")
}
func (UnimplementedWebShellManagerServer) mustEmbedUnimplementedWebShellManagerServer() {}

// UnsafeWebShellManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebShellManagerServer will
// result in compilation errors.
type UnsafeWebShellManagerServer interface {
	mustEmbedUnimplementedWebShellManagerServer()
}

func RegisterWebShellManagerServer(s grpc.ServiceRegistrar, srv WebShellManagerServer) {
	s.RegisterService(&WebShellManager_ServiceDesc, srv)
}

func _WebShellManager_CreateWebShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebShell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).CreateWebShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_CreateWebShell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).CreateWebShell(ctx, req.(*WebShell))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebShellManager_DeleteWebShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).DeleteWebShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_DeleteWebShell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).DeleteWebShell(ctx, req.(*DeleteWebShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebShellManager_UpdateWebShellById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).UpdateWebShellById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_UpdateWebShellById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).UpdateWebShellById(ctx, req.(*UpdateWebShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebShellManager_QueryWebShells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebShellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).QueryWebShells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_QueryWebShells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).QueryWebShells(ctx, req.(*QueryWebShellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebShellManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).Ping(ctx, req.(*WebShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebShellManager_GetBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebShellManagerServer).GetBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebShellManager_GetBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebShellManagerServer).GetBasicInfo(ctx, req.(*WebShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebShellManager_ServiceDesc is the grpc.ServiceDesc for WebShellManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebShellManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.WebShellManager",
	HandlerType: (*WebShellManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebShell",
			Handler:    _WebShellManager_CreateWebShell_Handler,
		},
		{
			MethodName: "DeleteWebShell",
			Handler:    _WebShellManager_DeleteWebShell_Handler,
		},
		{
			MethodName: "UpdateWebShellById",
			Handler:    _WebShellManager_UpdateWebShellById_Handler,
		},
		{
			MethodName: "QueryWebShells",
			Handler:    _WebShellManager_QueryWebShells_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _WebShellManager_Ping_Handler,
		},
		{
			MethodName: "GetBasicInfo",
			Handler:    _WebShellManager_GetBasicInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/webshell.proto",
}
