// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: yak_script.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YakScriptNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptNames []string `protobuf:"bytes,1,rep,name=YakScriptNames,proto3" json:"YakScriptNames,omitempty"`
}

func (x *YakScriptNames) Reset() {
	*x = YakScriptNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptNames) ProtoMessage() {}

func (x *YakScriptNames) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptNames.ProtoReflect.Descriptor instead.
func (*YakScriptNames) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{0}
}

func (x *YakScriptNames) GetYakScriptNames() []string {
	if x != nil {
		return x.YakScriptNames
	}
	return nil
}

type DeleteYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []int64 `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *DeleteYakScriptExecResultRequest) Reset() {
	*x = DeleteYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptExecResultRequest) ProtoMessage() {}

func (x *DeleteYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteYakScriptExecResultRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptExecResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging       `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64         `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*ExecResult `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptExecResultResponse) Reset() {
	*x = QueryYakScriptExecResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultResponse) ProtoMessage() {}

func (x *QueryYakScriptExecResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultResponse) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{2}
}

func (x *QueryYakScriptExecResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptExecResultResponse) GetData() []*ExecResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *QueryYakScriptExecResultRequest) Reset() {
	*x = QueryYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultRequest) ProtoMessage() {}

func (x *QueryYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{3}
}

func (x *QueryYakScriptExecResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptByOnlineGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineGroup string `protobuf:"bytes,1,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
}

func (x *QueryYakScriptByOnlineGroupRequest) Reset() {
	*x = QueryYakScriptByOnlineGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByOnlineGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByOnlineGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptByOnlineGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByOnlineGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByOnlineGroupRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{4}
}

func (x *QueryYakScriptByOnlineGroupRequest) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

type QueryYakScriptLocalAndUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptLocalAndUserResponse) Reset() {
	*x = QueryYakScriptLocalAndUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserResponse) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserResponse) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{5}
}

func (x *QueryYakScriptLocalAndUserResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptLocalAndUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineBaseUrl string `protobuf:"bytes,1,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	UserId        int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *QueryYakScriptLocalAndUserRequest) Reset() {
	*x = QueryYakScriptLocalAndUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserRequest) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{6}
}

func (x *QueryYakScriptLocalAndUserRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *QueryYakScriptLocalAndUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{7}
}

func (x *Tags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tags) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetYakScriptTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []*Tags `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *GetYakScriptTagsResponse) Reset() {
	*x = GetYakScriptTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsResponse) ProtoMessage() {}

func (x *GetYakScriptTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsResponse) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{8}
}

func (x *GetYakScriptTagsResponse) GetTag() []*Tags {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ExecBatchYakScriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Ok          bool   `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason      string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Exploitable bool   `protobuf:"varint,6,opt,name=Exploitable,proto3" json:"Exploitable,omitempty"`
	// 脚本的详细信息
	PoC    *YakScript  `protobuf:"bytes,7,opt,name=PoC,proto3" json:"PoC,omitempty"`
	Result *ExecResult `protobuf:"bytes,8,opt,name=Result,proto3" json:"Result,omitempty"`
	// 如果是整体进度信息，则在这儿展示
	// 处理这几个消息的时候，其他都不应该生效
	ProgressMessage bool    `protobuf:"varint,9,opt,name=ProgressMessage,proto3" json:"ProgressMessage,omitempty"`
	ProgressPercent float64 `protobuf:"fixed64,10,opt,name=ProgressPercent,proto3" json:"ProgressPercent,omitempty"`
	ProgressTotal   int64   `protobuf:"varint,11,opt,name=ProgressTotal,proto3" json:"ProgressTotal,omitempty"`
	ProgressCount   int64   `protobuf:"varint,12,opt,name=ProgressCount,proto3" json:"ProgressCount,omitempty"`
	// 正在执行中的进程数
	ProgressRunning int64 `protobuf:"varint,17,opt,name=ProgressRunning,proto3" json:"ProgressRunning,omitempty"`
	// 正在执行中的扫描任务数量
	ScanTaskExecutingCount int64 `protobuf:"varint,18,opt,name=ScanTaskExecutingCount,proto3" json:"ScanTaskExecutingCount,omitempty"`
	// 任务相关内容
	Target     string           `protobuf:"bytes,13,opt,name=Target,proto3" json:"Target,omitempty"`
	ExtraParam []*ExecParamItem `protobuf:"bytes,14,rep,name=ExtraParam,proto3" json:"ExtraParam,omitempty"`
	TaskId     string           `protobuf:"bytes,15,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 当前时间
	Timestamp int64 `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ExecBatchYakScriptResult) Reset() {
	*x = ExecBatchYakScriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptResult) ProtoMessage() {}

func (x *ExecBatchYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptResult.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{9}
}

func (x *ExecBatchYakScriptResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExploitable() bool {
	if x != nil {
		return x.Exploitable
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetPoC() *YakScript {
	if x != nil {
		return x.PoC
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetResult() *ExecResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetProgressMessage() bool {
	if x != nil {
		return x.ProgressMessage
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetProgressPercent() float64 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressTotal() int64 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressCount() int64 {
	if x != nil {
		return x.ProgressCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressRunning() int64 {
	if x != nil {
		return x.ProgressRunning
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetScanTaskExecutingCount() int64 {
	if x != nil {
		return x.ScanTaskExecutingCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExtraParam() []*ExecParamItem {
	if x != nil {
		return x.ExtraParam
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ExportYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir string `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
}

func (x *ExportYakScriptResponse) Reset() {
	*x = ExportYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptResponse) ProtoMessage() {}

func (x *ExportYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{10}
}

func (x *ExportYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type ExecuteBatchPacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName []string `protobuf:"bytes,1,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool     `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte   `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte   `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
	// 并发
	Concurrent int32 `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 设置单个超时时间
	PerTaskTimeout float64 `protobuf:"fixed64,6,opt,name=PerTaskTimeout,proto3" json:"PerTaskTimeout,omitempty"`
}

func (x *ExecuteBatchPacketYakScriptParams) Reset() {
	*x = ExecuteBatchPacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteBatchPacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchPacketYakScriptParams) ProtoMessage() {}

func (x *ExecuteBatchPacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchPacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecuteBatchPacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteBatchPacketYakScriptParams) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecuteBatchPacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteBatchPacketYakScriptParams) GetPerTaskTimeout() float64 {
	if x != nil {
		return x.PerTaskTimeout
	}
	return 0
}

type ExecutePacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *ExecutePacketYakScriptParams) Reset() {
	*x = ExecutePacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePacketYakScriptParams) ProtoMessage() {}

func (x *ExecutePacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecutePacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{12}
}

func (x *ExecutePacketYakScriptParams) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ExecutePacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecutePacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecutePacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type ExportYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId     int64   `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	OutputDir       string  `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string  `protobuf:"bytes,3,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64 `protobuf:"varint,4,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	All             bool    `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *ExportYakScriptRequest) Reset() {
	*x = ExportYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptRequest) ProtoMessage() {}

func (x *ExportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{13}
}

func (x *ExportYakScriptRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExportYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportYakScriptRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GetYakScriptByOnlineIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineID int64  `protobuf:"varint,2,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
}

func (x *GetYakScriptByOnlineIDRequest) Reset() {
	*x = GetYakScriptByOnlineIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByOnlineIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByOnlineIDRequest) ProtoMessage() {}

func (x *GetYakScriptByOnlineIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByOnlineIDRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByOnlineIDRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{14}
}

func (x *GetYakScriptByOnlineIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetYakScriptByOnlineIDRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

type GetYakScriptByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *GetYakScriptByNameRequest) Reset() {
	*x = GetYakScriptByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByNameRequest) ProtoMessage() {}

func (x *GetYakScriptByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByNameRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByNameRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{15}
}

func (x *GetYakScriptByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination               *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Type                     string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Keyword                  string   `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	IsHistory                bool     `protobuf:"varint,4,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore                 bool     `protobuf:"varint,5,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule          bool     `protobuf:"varint,6,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	IsBatch                  bool     `protobuf:"varint,7,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	ExcludeNucleiWorkflow    bool     `protobuf:"varint,8,opt,name=ExcludeNucleiWorkflow,proto3" json:"ExcludeNucleiWorkflow,omitempty"`
	ExcludeScriptNames       []string `protobuf:"bytes,9,rep,name=ExcludeScriptNames,proto3" json:"ExcludeScriptNames,omitempty"`
	IncludedScriptNames      []string `protobuf:"bytes,10,rep,name=IncludedScriptNames,proto3" json:"IncludedScriptNames,omitempty"`
	Tag                      []string `protobuf:"bytes,11,rep,name=Tag,proto3" json:"Tag,omitempty"`
	NoResultReturn           bool     `protobuf:"varint,12,opt,name=NoResultReturn,proto3" json:"NoResultReturn,omitempty"` // 这是一很特殊的选项，如果开启了，total 将会为 0
	UserId                   int64    `protobuf:"varint,13,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName                 string   `protobuf:"bytes,14,opt,name=UserName,proto3" json:"UserName,omitempty"`
	IgnoreGeneralModuleOrder bool     `protobuf:"varint,15,opt,name=IgnoreGeneralModuleOrder,proto3" json:"IgnoreGeneralModuleOrder,omitempty"`
}

func (x *QueryYakScriptRequest) Reset() {
	*x = QueryYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRequest) ProtoMessage() {}

func (x *QueryYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{16}
}

func (x *QueryYakScriptRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeNucleiWorkflow() bool {
	if x != nil {
		return x.ExcludeNucleiWorkflow
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeScriptNames() []string {
	if x != nil {
		return x.ExcludeScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIncludedScriptNames() []string {
	if x != nil {
		return x.IncludedScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryYakScriptRequest) GetNoResultReturn() bool {
	if x != nil {
		return x.NoResultReturn
	}
	return false
}

func (x *QueryYakScriptRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIgnoreGeneralModuleOrder() bool {
	if x != nil {
		return x.IgnoreGeneralModuleOrder
	}
	return false
}

type QueryYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*YakScript `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptResponse) Reset() {
	*x = QueryYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptResponse) ProtoMessage() {}

func (x *QueryYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{17}
}

func (x *QueryYakScriptResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type YakScriptParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	// int/number/integer/float/str/bool
	TypeVerbose  string `protobuf:"bytes,3,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	FieldVerbose string `protobuf:"bytes,4,opt,name=FieldVerbose,proto3" json:"FieldVerbose,omitempty"`
	Help         string `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Required     bool   `protobuf:"varint,6,opt,name=Required,proto3" json:"Required,omitempty"`
	Group        string `protobuf:"bytes,7,opt,name=Group,proto3" json:"Group,omitempty"`
	ExtraSetting string `protobuf:"bytes,8,opt,name=ExtraSetting,proto3" json:"ExtraSetting,omitempty"`
}

func (x *YakScriptParam) Reset() {
	*x = YakScriptParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptParam) ProtoMessage() {}

func (x *YakScriptParam) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptParam.ProtoReflect.Descriptor instead.
func (*YakScriptParam) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{18}
}

func (x *YakScriptParam) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YakScriptParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *YakScriptParam) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakScriptParam) GetFieldVerbose() string {
	if x != nil {
		return x.FieldVerbose
	}
	return ""
}

func (x *YakScriptParam) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScriptParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *YakScriptParam) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptParam) GetExtraSetting() string {
	if x != nil {
		return x.ExtraSetting
	}
	return ""
}

type YakScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Content              string            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string            `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	CreatedAt            int64             `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ScriptName           string            `protobuf:"bytes,6,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string            `protobuf:"bytes,7,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string            `protobuf:"bytes,8,opt,name=Level,proto3" json:"Level,omitempty"`
	Author               string            `protobuf:"bytes,9,opt,name=Author,proto3" json:"Author,omitempty"`
	Tags                 string            `protobuf:"bytes,10,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool              `protobuf:"varint,11,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool              `protobuf:"varint,12,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool              `protobuf:"varint,13,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string            `protobuf:"bytes,14,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string            `protobuf:"bytes,15,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string            `protobuf:"bytes,16,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool              `protobuf:"varint,17,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string            `protobuf:"bytes,18,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	OnlineId             int64             `protobuf:"varint,19,opt,name=OnlineId,proto3" json:"OnlineId,omitempty"`
	UserId               int64             `protobuf:"varint,20,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OnlineScriptName     string            `protobuf:"bytes,21,opt,name=OnlineScriptName,proto3" json:"OnlineScriptName,omitempty"`
	OnlineContributors   string            `protobuf:"bytes,22,opt,name=OnlineContributors,proto3" json:"OnlineContributors,omitempty"`
	UUID                 string            `protobuf:"bytes,23,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineIsPrivate      bool              `protobuf:"varint,24,opt,name=OnlineIsPrivate,proto3" json:"OnlineIsPrivate,omitempty"`
	HeadImg              string            `protobuf:"bytes,25,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	OnlineBaseUrl        string            `protobuf:"bytes,26,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	BaseOnlineId         int64             `protobuf:"varint,27,opt,name=BaseOnlineId,proto3" json:"BaseOnlineId,omitempty"`
	OnlineOfficial       bool              `protobuf:"varint,28,opt,name=OnlineOfficial,proto3" json:"OnlineOfficial,omitempty"`
}

func (x *YakScript) Reset() {
	*x = YakScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScript) ProtoMessage() {}

func (x *YakScript) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScript.ProtoReflect.Descriptor instead.
func (*YakScript) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{19}
}

func (x *YakScript) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YakScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *YakScript) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YakScript) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *YakScript) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *YakScript) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *YakScript) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScript) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakScript) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *YakScript) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *YakScript) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *YakScript) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *YakScript) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *YakScript) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *YakScript) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *YakScript) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *YakScript) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *YakScript) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *YakScript) GetOnlineId() int64 {
	if x != nil {
		return x.OnlineId
	}
	return 0
}

func (x *YakScript) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *YakScript) GetOnlineScriptName() string {
	if x != nil {
		return x.OnlineScriptName
	}
	return ""
}

func (x *YakScript) GetOnlineContributors() string {
	if x != nil {
		return x.OnlineContributors
	}
	return ""
}

func (x *YakScript) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *YakScript) GetOnlineIsPrivate() bool {
	if x != nil {
		return x.OnlineIsPrivate
	}
	return false
}

func (x *YakScript) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *YakScript) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *YakScript) GetBaseOnlineId() int64 {
	if x != nil {
		return x.BaseOnlineId
	}
	return 0
}

func (x *YakScript) GetOnlineOfficial() bool {
	if x != nil {
		return x.OnlineOfficial
	}
	return false
}

type DeleteYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteYakScriptRequest) Reset() {
	*x = DeleteYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptRequest) ProtoMessage() {}

func (x *DeleteYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteYakScriptRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetYakScriptByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetYakScriptByIdRequest) Reset() {
	*x = GetYakScriptByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yak_script_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByIdRequest) ProtoMessage() {}

func (x *GetYakScriptByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yak_script_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByIdRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByIdRequest) Descriptor() ([]byte, []int) {
	return file_yak_script_proto_rawDescGZIP(), []int{21}
}

func (x *GetYakScriptByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_yak_script_proto protoreflect.FileDescriptor

var file_yak_script_proto_rawDesc = []byte{
	0x0a, 0x10, 0x79, 0x61, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x58, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a,
	0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x48, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x61, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22,
	0xdb, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x50, 0x6f, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x03, 0x50, 0x6f, 0x43,
	0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x37, 0x0a,
	0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c,
	0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb2, 0x04, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xa8, 0x07, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x65, 0x6c, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x32, 0xfb, 0x0c, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x11, 0x55, 0x6e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x12, 0x66, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yak_script_proto_rawDescOnce sync.Once
	file_yak_script_proto_rawDescData = file_yak_script_proto_rawDesc
)

func file_yak_script_proto_rawDescGZIP() []byte {
	file_yak_script_proto_rawDescOnce.Do(func() {
		file_yak_script_proto_rawDescData = protoimpl.X.CompressGZIP(file_yak_script_proto_rawDescData)
	})
	return file_yak_script_proto_rawDescData
}

var file_yak_script_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_yak_script_proto_goTypes = []interface{}{
	(*YakScriptNames)(nil),                     // 0: ypb.YakScriptNames
	(*DeleteYakScriptExecResultRequest)(nil),   // 1: ypb.DeleteYakScriptExecResultRequest
	(*QueryYakScriptExecResultResponse)(nil),   // 2: ypb.QueryYakScriptExecResultResponse
	(*QueryYakScriptExecResultRequest)(nil),    // 3: ypb.QueryYakScriptExecResultRequest
	(*QueryYakScriptByOnlineGroupRequest)(nil), // 4: ypb.QueryYakScriptByOnlineGroupRequest
	(*QueryYakScriptLocalAndUserResponse)(nil), // 5: ypb.QueryYakScriptLocalAndUserResponse
	(*QueryYakScriptLocalAndUserRequest)(nil),  // 6: ypb.QueryYakScriptLocalAndUserRequest
	(*Tags)(nil),                              // 7: ypb.Tags
	(*GetYakScriptTagsResponse)(nil),          // 8: ypb.GetYakScriptTagsResponse
	(*ExecBatchYakScriptResult)(nil),          // 9: ypb.ExecBatchYakScriptResult
	(*ExportYakScriptResponse)(nil),           // 10: ypb.ExportYakScriptResponse
	(*ExecuteBatchPacketYakScriptParams)(nil), // 11: ypb.ExecuteBatchPacketYakScriptParams
	(*ExecutePacketYakScriptParams)(nil),      // 12: ypb.ExecutePacketYakScriptParams
	(*ExportYakScriptRequest)(nil),            // 13: ypb.ExportYakScriptRequest
	(*GetYakScriptByOnlineIDRequest)(nil),     // 14: ypb.GetYakScriptByOnlineIDRequest
	(*GetYakScriptByNameRequest)(nil),         // 15: ypb.GetYakScriptByNameRequest
	(*QueryYakScriptRequest)(nil),             // 16: ypb.QueryYakScriptRequest
	(*QueryYakScriptResponse)(nil),            // 17: ypb.QueryYakScriptResponse
	(*YakScriptParam)(nil),                    // 18: ypb.YakScriptParam
	(*YakScript)(nil),                         // 19: ypb.YakScript
	(*DeleteYakScriptRequest)(nil),            // 20: ypb.DeleteYakScriptRequest
	(*GetYakScriptByIdRequest)(nil),           // 21: ypb.GetYakScriptByIdRequest
	(*Paging)(nil),                            // 22: ypb.Paging
	(*ExecResult)(nil),                        // 23: ypb.ExecResult
	(*ExecParamItem)(nil),                     // 24: ypb.ExecParamItem
	(*Empty)(nil),                             // 25: ypb.Empty
	(*Fields)(nil),                            // 26: ypb.Fields
}
var file_yak_script_proto_depIdxs = []int32{
	22, // 0: ypb.QueryYakScriptExecResultResponse.Pagination:type_name -> ypb.Paging
	23, // 1: ypb.QueryYakScriptExecResultResponse.Data:type_name -> ypb.ExecResult
	22, // 2: ypb.QueryYakScriptExecResultRequest.Pagination:type_name -> ypb.Paging
	19, // 3: ypb.QueryYakScriptLocalAndUserResponse.Data:type_name -> ypb.YakScript
	7,  // 4: ypb.GetYakScriptTagsResponse.Tag:type_name -> ypb.Tags
	19, // 5: ypb.ExecBatchYakScriptResult.PoC:type_name -> ypb.YakScript
	23, // 6: ypb.ExecBatchYakScriptResult.Result:type_name -> ypb.ExecResult
	24, // 7: ypb.ExecBatchYakScriptResult.ExtraParam:type_name -> ypb.ExecParamItem
	22, // 8: ypb.QueryYakScriptRequest.Pagination:type_name -> ypb.Paging
	22, // 9: ypb.QueryYakScriptResponse.Pagination:type_name -> ypb.Paging
	19, // 10: ypb.QueryYakScriptResponse.Data:type_name -> ypb.YakScript
	18, // 11: ypb.YakScript.Params:type_name -> ypb.YakScriptParam
	16, // 12: ypb.YakScriptService.QueryYakScript:input_type -> ypb.QueryYakScriptRequest
	16, // 13: ypb.YakScriptService.QueryYakScriptByYakScriptName:input_type -> ypb.QueryYakScriptRequest
	19, // 14: ypb.YakScriptService.SaveYakScript:input_type -> ypb.YakScript
	20, // 15: ypb.YakScriptService.DeleteYakScript:input_type -> ypb.DeleteYakScriptRequest
	21, // 16: ypb.YakScriptService.GetYakScriptById:input_type -> ypb.GetYakScriptByIdRequest
	15, // 17: ypb.YakScriptService.GetYakScriptByName:input_type -> ypb.GetYakScriptByNameRequest
	14, // 18: ypb.YakScriptService.GetYakScriptByOnlineID:input_type -> ypb.GetYakScriptByOnlineIDRequest
	20, // 19: ypb.YakScriptService.IgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	20, // 20: ypb.YakScriptService.UnIgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	13, // 21: ypb.YakScriptService.ExportYakScript:input_type -> ypb.ExportYakScriptRequest
	12, // 22: ypb.YakScriptService.ExecutePacketYakScript:input_type -> ypb.ExecutePacketYakScriptParams
	11, // 23: ypb.YakScriptService.ExecuteBatchPacketYakScript:input_type -> ypb.ExecuteBatchPacketYakScriptParams
	25, // 24: ypb.YakScriptService.GetYakScriptTags:input_type -> ypb.Empty
	6,  // 25: ypb.YakScriptService.QueryYakScriptLocalAndUser:input_type -> ypb.QueryYakScriptLocalAndUserRequest
	4,  // 26: ypb.YakScriptService.QueryYakScriptByOnlineGroup:input_type -> ypb.QueryYakScriptByOnlineGroupRequest
	25, // 27: ypb.YakScriptService.QueryYakScriptLocalAll:input_type -> ypb.Empty
	3,  // 28: ypb.YakScriptService.QueryYakScriptExecResult:input_type -> ypb.QueryYakScriptExecResultRequest
	25, // 29: ypb.YakScriptService.QueryYakScriptNameInExecResult:input_type -> ypb.Empty
	1,  // 30: ypb.YakScriptService.DeleteYakScriptExecResult:input_type -> ypb.DeleteYakScriptExecResultRequest
	25, // 31: ypb.YakScriptService.DeleteYakScriptExec:input_type -> ypb.Empty
	25, // 32: ypb.YakScriptService.GetAvailableYakScriptTags:input_type -> ypb.Empty
	25, // 33: ypb.YakScriptService.ForceUpdateAvailableYakScriptTags:input_type -> ypb.Empty
	17, // 34: ypb.YakScriptService.QueryYakScript:output_type -> ypb.QueryYakScriptResponse
	19, // 35: ypb.YakScriptService.QueryYakScriptByYakScriptName:output_type -> ypb.YakScript
	19, // 36: ypb.YakScriptService.SaveYakScript:output_type -> ypb.YakScript
	25, // 37: ypb.YakScriptService.DeleteYakScript:output_type -> ypb.Empty
	19, // 38: ypb.YakScriptService.GetYakScriptById:output_type -> ypb.YakScript
	19, // 39: ypb.YakScriptService.GetYakScriptByName:output_type -> ypb.YakScript
	19, // 40: ypb.YakScriptService.GetYakScriptByOnlineID:output_type -> ypb.YakScript
	25, // 41: ypb.YakScriptService.IgnoreYakScript:output_type -> ypb.Empty
	25, // 42: ypb.YakScriptService.UnIgnoreYakScript:output_type -> ypb.Empty
	10, // 43: ypb.YakScriptService.ExportYakScript:output_type -> ypb.ExportYakScriptResponse
	23, // 44: ypb.YakScriptService.ExecutePacketYakScript:output_type -> ypb.ExecResult
	9,  // 45: ypb.YakScriptService.ExecuteBatchPacketYakScript:output_type -> ypb.ExecBatchYakScriptResult
	8,  // 46: ypb.YakScriptService.GetYakScriptTags:output_type -> ypb.GetYakScriptTagsResponse
	5,  // 47: ypb.YakScriptService.QueryYakScriptLocalAndUser:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	5,  // 48: ypb.YakScriptService.QueryYakScriptByOnlineGroup:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	5,  // 49: ypb.YakScriptService.QueryYakScriptLocalAll:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	2,  // 50: ypb.YakScriptService.QueryYakScriptExecResult:output_type -> ypb.QueryYakScriptExecResultResponse
	0,  // 51: ypb.YakScriptService.QueryYakScriptNameInExecResult:output_type -> ypb.YakScriptNames
	25, // 52: ypb.YakScriptService.DeleteYakScriptExecResult:output_type -> ypb.Empty
	25, // 53: ypb.YakScriptService.DeleteYakScriptExec:output_type -> ypb.Empty
	26, // 54: ypb.YakScriptService.GetAvailableYakScriptTags:output_type -> ypb.Fields
	25, // 55: ypb.YakScriptService.ForceUpdateAvailableYakScriptTags:output_type -> ypb.Empty
	34, // [34:56] is the sub-list for method output_type
	12, // [12:34] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yak_script_proto_init() }
func file_yak_script_proto_init() {
	if File_yak_script_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yak_script_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByOnlineGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteBatchPacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByOnlineIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yak_script_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yak_script_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yak_script_proto_goTypes,
		DependencyIndexes: file_yak_script_proto_depIdxs,
		MessageInfos:      file_yak_script_proto_msgTypes,
	}.Build()
	File_yak_script_proto = out.File
	file_yak_script_proto_rawDesc = nil
	file_yak_script_proto_goTypes = nil
	file_yak_script_proto_depIdxs = nil
}
