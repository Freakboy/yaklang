// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: project_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectApi_SetCurrentProject_FullMethodName     = "/ypb.ProjectApi/SetCurrentProject"
	ProjectApi_GetCurrentProject_FullMethodName     = "/ypb.ProjectApi/GetCurrentProject"
	ProjectApi_GetProjects_FullMethodName           = "/ypb.ProjectApi/GetProjects"
	ProjectApi_NewProject_FullMethodName            = "/ypb.ProjectApi/NewProject"
	ProjectApi_IsProjectNameValid_FullMethodName    = "/ypb.ProjectApi/IsProjectNameValid"
	ProjectApi_RemoveProject_FullMethodName         = "/ypb.ProjectApi/RemoveProject"
	ProjectApi_DeleteProject_FullMethodName         = "/ypb.ProjectApi/DeleteProject"
	ProjectApi_GetDefaultProject_FullMethodName     = "/ypb.ProjectApi/GetDefaultProject"
	ProjectApi_QueryProjectDetail_FullMethodName    = "/ypb.ProjectApi/QueryProjectDetail"
	ProjectApi_ExportProject_FullMethodName         = "/ypb.ProjectApi/ExportProject"
	ProjectApi_ImportProject_FullMethodName         = "/ypb.ProjectApi/ImportProject"
	ProjectApi_MigrateLegacyDatabase_FullMethodName = "/ypb.ProjectApi/MigrateLegacyDatabase"
)

// ProjectApiClient is the client API for ProjectApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectApiClient interface {
	// 操作项目的相关接口，通过设置 ProjectDatabase
	SetCurrentProject(ctx context.Context, in *SetCurrentProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCurrentProject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectDescription, error)
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	NewProject(ctx context.Context, in *NewProjectRequest, opts ...grpc.CallOption) (*NewProjectResponse, error)
	IsProjectNameValid(ctx context.Context, in *IsProjectNameValidRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	GetDefaultProject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectDescription, error)
	QueryProjectDetail(ctx context.Context, in *QueryProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDescription, error)
	// 导入导出项目，带密码，带进度
	ExportProject(ctx context.Context, in *ExportProjectRequest, opts ...grpc.CallOption) (ProjectApi_ExportProjectClient, error)
	ImportProject(ctx context.Context, in *ImportProjectRequest, opts ...grpc.CallOption) (ProjectApi_ImportProjectClient, error)
	// 迁移旧数据库
	MigrateLegacyDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type projectApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectApiClient(cc grpc.ClientConnInterface) ProjectApiClient {
	return &projectApiClient{cc}
}

func (c *projectApiClient) SetCurrentProject(ctx context.Context, in *SetCurrentProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectApi_SetCurrentProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetCurrentProject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectDescription, error) {
	out := new(ProjectDescription)
	err := c.cc.Invoke(ctx, ProjectApi_GetCurrentProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectApi_GetProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) NewProject(ctx context.Context, in *NewProjectRequest, opts ...grpc.CallOption) (*NewProjectResponse, error) {
	out := new(NewProjectResponse)
	err := c.cc.Invoke(ctx, ProjectApi_NewProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) IsProjectNameValid(ctx context.Context, in *IsProjectNameValidRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectApi_IsProjectNameValid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectApi_RemoveProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectApi_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetDefaultProject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectDescription, error) {
	out := new(ProjectDescription)
	err := c.cc.Invoke(ctx, ProjectApi_GetDefaultProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) QueryProjectDetail(ctx context.Context, in *QueryProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDescription, error) {
	out := new(ProjectDescription)
	err := c.cc.Invoke(ctx, ProjectApi_QueryProjectDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) ExportProject(ctx context.Context, in *ExportProjectRequest, opts ...grpc.CallOption) (ProjectApi_ExportProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectApi_ServiceDesc.Streams[0], ProjectApi_ExportProject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectApiExportProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectApi_ExportProjectClient interface {
	Recv() (*ProjectIOProgress, error)
	grpc.ClientStream
}

type projectApiExportProjectClient struct {
	grpc.ClientStream
}

func (x *projectApiExportProjectClient) Recv() (*ProjectIOProgress, error) {
	m := new(ProjectIOProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectApiClient) ImportProject(ctx context.Context, in *ImportProjectRequest, opts ...grpc.CallOption) (ProjectApi_ImportProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectApi_ServiceDesc.Streams[1], ProjectApi_ImportProject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectApiImportProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectApi_ImportProjectClient interface {
	Recv() (*ProjectIOProgress, error)
	grpc.ClientStream
}

type projectApiImportProjectClient struct {
	grpc.ClientStream
}

func (x *projectApiImportProjectClient) Recv() (*ProjectIOProgress, error) {
	m := new(ProjectIOProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectApiClient) MigrateLegacyDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectApi_MigrateLegacyDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectApiServer is the server API for ProjectApi service.
// All implementations must embed UnimplementedProjectApiServer
// for forward compatibility
type ProjectApiServer interface {
	// 操作项目的相关接口，通过设置 ProjectDatabase
	SetCurrentProject(context.Context, *SetCurrentProjectRequest) (*Empty, error)
	GetCurrentProject(context.Context, *Empty) (*ProjectDescription, error)
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	NewProject(context.Context, *NewProjectRequest) (*NewProjectResponse, error)
	IsProjectNameValid(context.Context, *IsProjectNameValidRequest) (*Empty, error)
	RemoveProject(context.Context, *RemoveProjectRequest) (*Empty, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*Empty, error)
	GetDefaultProject(context.Context, *Empty) (*ProjectDescription, error)
	QueryProjectDetail(context.Context, *QueryProjectDetailRequest) (*ProjectDescription, error)
	// 导入导出项目，带密码，带进度
	ExportProject(*ExportProjectRequest, ProjectApi_ExportProjectServer) error
	ImportProject(*ImportProjectRequest, ProjectApi_ImportProjectServer) error
	// 迁移旧数据库
	MigrateLegacyDatabase(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedProjectApiServer()
}

// UnimplementedProjectApiServer must be embedded to have forward compatible implementations.
type UnimplementedProjectApiServer struct {
}

func (UnimplementedProjectApiServer) SetCurrentProject(context.Context, *SetCurrentProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentProject not implemented")
}
func (UnimplementedProjectApiServer) GetCurrentProject(context.Context, *Empty) (*ProjectDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentProject not implemented")
}
func (UnimplementedProjectApiServer) GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectApiServer) NewProject(context.Context, *NewProjectRequest) (*NewProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProject not implemented")
}
func (UnimplementedProjectApiServer) IsProjectNameValid(context.Context, *IsProjectNameValidRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProjectNameValid not implemented")
}
func (UnimplementedProjectApiServer) RemoveProject(context.Context, *RemoveProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProject not implemented")
}
func (UnimplementedProjectApiServer) DeleteProject(context.Context, *DeleteProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectApiServer) GetDefaultProject(context.Context, *Empty) (*ProjectDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultProject not implemented")
}
func (UnimplementedProjectApiServer) QueryProjectDetail(context.Context, *QueryProjectDetailRequest) (*ProjectDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProjectDetail not implemented")
}
func (UnimplementedProjectApiServer) ExportProject(*ExportProjectRequest, ProjectApi_ExportProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportProject not implemented")
}
func (UnimplementedProjectApiServer) ImportProject(*ImportProjectRequest, ProjectApi_ImportProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportProject not implemented")
}
func (UnimplementedProjectApiServer) MigrateLegacyDatabase(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateLegacyDatabase not implemented")
}
func (UnimplementedProjectApiServer) mustEmbedUnimplementedProjectApiServer() {}

// UnsafeProjectApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectApiServer will
// result in compilation errors.
type UnsafeProjectApiServer interface {
	mustEmbedUnimplementedProjectApiServer()
}

func RegisterProjectApiServer(s grpc.ServiceRegistrar, srv ProjectApiServer) {
	s.RegisterService(&ProjectApi_ServiceDesc, srv)
}

func _ProjectApi_SetCurrentProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).SetCurrentProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_SetCurrentProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).SetCurrentProject(ctx, req.(*SetCurrentProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetCurrentProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetCurrentProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetCurrentProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetCurrentProject(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetProjects(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_NewProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).NewProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_NewProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).NewProject(ctx, req.(*NewProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_IsProjectNameValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsProjectNameValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).IsProjectNameValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_IsProjectNameValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).IsProjectNameValid(ctx, req.(*IsProjectNameValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_RemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).RemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_RemoveProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).RemoveProject(ctx, req.(*RemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetDefaultProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetDefaultProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetDefaultProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetDefaultProject(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_QueryProjectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).QueryProjectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_QueryProjectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).QueryProjectDetail(ctx, req.(*QueryProjectDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_ExportProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectApiServer).ExportProject(m, &projectApiExportProjectServer{stream})
}

type ProjectApi_ExportProjectServer interface {
	Send(*ProjectIOProgress) error
	grpc.ServerStream
}

type projectApiExportProjectServer struct {
	grpc.ServerStream
}

func (x *projectApiExportProjectServer) Send(m *ProjectIOProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectApi_ImportProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImportProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectApiServer).ImportProject(m, &projectApiImportProjectServer{stream})
}

type ProjectApi_ImportProjectServer interface {
	Send(*ProjectIOProgress) error
	grpc.ServerStream
}

type projectApiImportProjectServer struct {
	grpc.ServerStream
}

func (x *projectApiImportProjectServer) Send(m *ProjectIOProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectApi_MigrateLegacyDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).MigrateLegacyDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_MigrateLegacyDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).MigrateLegacyDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectApi_ServiceDesc is the grpc.ServiceDesc for ProjectApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.ProjectApi",
	HandlerType: (*ProjectApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCurrentProject",
			Handler:    _ProjectApi_SetCurrentProject_Handler,
		},
		{
			MethodName: "GetCurrentProject",
			Handler:    _ProjectApi_GetCurrentProject_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _ProjectApi_GetProjects_Handler,
		},
		{
			MethodName: "NewProject",
			Handler:    _ProjectApi_NewProject_Handler,
		},
		{
			MethodName: "IsProjectNameValid",
			Handler:    _ProjectApi_IsProjectNameValid_Handler,
		},
		{
			MethodName: "RemoveProject",
			Handler:    _ProjectApi_RemoveProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectApi_DeleteProject_Handler,
		},
		{
			MethodName: "GetDefaultProject",
			Handler:    _ProjectApi_GetDefaultProject_Handler,
		},
		{
			MethodName: "QueryProjectDetail",
			Handler:    _ProjectApi_QueryProjectDetail_Handler,
		},
		{
			MethodName: "MigrateLegacyDatabase",
			Handler:    _ProjectApi_MigrateLegacyDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportProject",
			Handler:       _ProjectApi_ExportProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportProject",
			Handler:       _ProjectApi_ImportProject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "project_api.proto",
}
