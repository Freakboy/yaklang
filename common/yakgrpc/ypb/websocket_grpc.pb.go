// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: websocket.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebSocketService_CreateWebsocketFuzzer_FullMethodName                      = "/ypb.WebSocketService/CreateWebsocketFuzzer"
	WebSocketService_QueryWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName  = "/ypb.WebSocketService/QueryWebsocketFlowByHTTPFlowWebsocketHash"
	WebSocketService_DeleteWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName = "/ypb.WebSocketService/DeleteWebsocketFlowByHTTPFlowWebsocketHash"
	WebSocketService_DeleteWebsocketFlowAll_FullMethodName                     = "/ypb.WebSocketService/DeleteWebsocketFlowAll"
)

// WebSocketServiceClient is the client API for WebSocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketServiceClient interface {
	// WebSocket
	CreateWebsocketFuzzer(ctx context.Context, opts ...grpc.CallOption) (WebSocketService_CreateWebsocketFuzzerClient, error)
	QueryWebsocketFlowByHTTPFlowWebsocketHash(ctx context.Context, in *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest, opts ...grpc.CallOption) (*WebsocketFlows, error)
	DeleteWebsocketFlowByHTTPFlowWebsocketHash(ctx context.Context, in *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteWebsocketFlowAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type webSocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketServiceClient(cc grpc.ClientConnInterface) WebSocketServiceClient {
	return &webSocketServiceClient{cc}
}

func (c *webSocketServiceClient) CreateWebsocketFuzzer(ctx context.Context, opts ...grpc.CallOption) (WebSocketService_CreateWebsocketFuzzerClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebSocketService_ServiceDesc.Streams[0], WebSocketService_CreateWebsocketFuzzer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webSocketServiceCreateWebsocketFuzzerClient{stream}
	return x, nil
}

type WebSocketService_CreateWebsocketFuzzerClient interface {
	Send(*ClientWebsocketRequest) error
	Recv() (*ClientWebsocketResponse, error)
	grpc.ClientStream
}

type webSocketServiceCreateWebsocketFuzzerClient struct {
	grpc.ClientStream
}

func (x *webSocketServiceCreateWebsocketFuzzerClient) Send(m *ClientWebsocketRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webSocketServiceCreateWebsocketFuzzerClient) Recv() (*ClientWebsocketResponse, error) {
	m := new(ClientWebsocketResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webSocketServiceClient) QueryWebsocketFlowByHTTPFlowWebsocketHash(ctx context.Context, in *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest, opts ...grpc.CallOption) (*WebsocketFlows, error) {
	out := new(WebsocketFlows)
	err := c.cc.Invoke(ctx, WebSocketService_QueryWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketServiceClient) DeleteWebsocketFlowByHTTPFlowWebsocketHash(ctx context.Context, in *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WebSocketService_DeleteWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketServiceClient) DeleteWebsocketFlowAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WebSocketService_DeleteWebsocketFlowAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSocketServiceServer is the server API for WebSocketService service.
// All implementations must embed UnimplementedWebSocketServiceServer
// for forward compatibility
type WebSocketServiceServer interface {
	// WebSocket
	CreateWebsocketFuzzer(WebSocketService_CreateWebsocketFuzzerServer) error
	QueryWebsocketFlowByHTTPFlowWebsocketHash(context.Context, *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) (*WebsocketFlows, error)
	DeleteWebsocketFlowByHTTPFlowWebsocketHash(context.Context, *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) (*Empty, error)
	DeleteWebsocketFlowAll(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedWebSocketServiceServer()
}

// UnimplementedWebSocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebSocketServiceServer struct {
}

func (UnimplementedWebSocketServiceServer) CreateWebsocketFuzzer(WebSocketService_CreateWebsocketFuzzerServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateWebsocketFuzzer not implemented")
}
func (UnimplementedWebSocketServiceServer) QueryWebsocketFlowByHTTPFlowWebsocketHash(context.Context, *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) (*WebsocketFlows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWebsocketFlowByHTTPFlowWebsocketHash not implemented")
}
func (UnimplementedWebSocketServiceServer) DeleteWebsocketFlowByHTTPFlowWebsocketHash(context.Context, *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebsocketFlowByHTTPFlowWebsocketHash not implemented")
}
func (UnimplementedWebSocketServiceServer) DeleteWebsocketFlowAll(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebsocketFlowAll not implemented")
}
func (UnimplementedWebSocketServiceServer) mustEmbedUnimplementedWebSocketServiceServer() {}

// UnsafeWebSocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServiceServer will
// result in compilation errors.
type UnsafeWebSocketServiceServer interface {
	mustEmbedUnimplementedWebSocketServiceServer()
}

func RegisterWebSocketServiceServer(s grpc.ServiceRegistrar, srv WebSocketServiceServer) {
	s.RegisterService(&WebSocketService_ServiceDesc, srv)
}

func _WebSocketService_CreateWebsocketFuzzer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebSocketServiceServer).CreateWebsocketFuzzer(&webSocketServiceCreateWebsocketFuzzerServer{stream})
}

type WebSocketService_CreateWebsocketFuzzerServer interface {
	Send(*ClientWebsocketResponse) error
	Recv() (*ClientWebsocketRequest, error)
	grpc.ServerStream
}

type webSocketServiceCreateWebsocketFuzzerServer struct {
	grpc.ServerStream
}

func (x *webSocketServiceCreateWebsocketFuzzerServer) Send(m *ClientWebsocketResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webSocketServiceCreateWebsocketFuzzerServer) Recv() (*ClientWebsocketRequest, error) {
	m := new(ClientWebsocketRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WebSocketService_QueryWebsocketFlowByHTTPFlowWebsocketHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebsocketFlowByHTTPFlowWebsocketHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServiceServer).QueryWebsocketFlowByHTTPFlowWebsocketHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocketService_QueryWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServiceServer).QueryWebsocketFlowByHTTPFlowWebsocketHash(ctx, req.(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocketService_DeleteWebsocketFlowByHTTPFlowWebsocketHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServiceServer).DeleteWebsocketFlowByHTTPFlowWebsocketHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocketService_DeleteWebsocketFlowByHTTPFlowWebsocketHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServiceServer).DeleteWebsocketFlowByHTTPFlowWebsocketHash(ctx, req.(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocketService_DeleteWebsocketFlowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServiceServer).DeleteWebsocketFlowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocketService_DeleteWebsocketFlowAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServiceServer).DeleteWebsocketFlowAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WebSocketService_ServiceDesc is the grpc.ServiceDesc for WebSocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.WebSocketService",
	HandlerType: (*WebSocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryWebsocketFlowByHTTPFlowWebsocketHash",
			Handler:    _WebSocketService_QueryWebsocketFlowByHTTPFlowWebsocketHash_Handler,
		},
		{
			MethodName: "DeleteWebsocketFlowByHTTPFlowWebsocketHash",
			Handler:    _WebSocketService_DeleteWebsocketFlowByHTTPFlowWebsocketHash_Handler,
		},
		{
			MethodName: "DeleteWebsocketFlowAll",
			Handler:    _WebSocketService_DeleteWebsocketFlowAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateWebsocketFuzzer",
			Handler:       _WebSocketService_CreateWebsocketFuzzer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "websocket.proto",
}
