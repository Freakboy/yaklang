// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: yak_script.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YakScriptService_QueryYakScript_FullMethodName                    = "/ypb.YakScriptService/QueryYakScript"
	YakScriptService_QueryYakScriptByYakScriptName_FullMethodName     = "/ypb.YakScriptService/QueryYakScriptByYakScriptName"
	YakScriptService_SaveYakScript_FullMethodName                     = "/ypb.YakScriptService/SaveYakScript"
	YakScriptService_DeleteYakScript_FullMethodName                   = "/ypb.YakScriptService/DeleteYakScript"
	YakScriptService_GetYakScriptById_FullMethodName                  = "/ypb.YakScriptService/GetYakScriptById"
	YakScriptService_GetYakScriptByName_FullMethodName                = "/ypb.YakScriptService/GetYakScriptByName"
	YakScriptService_GetYakScriptByOnlineID_FullMethodName            = "/ypb.YakScriptService/GetYakScriptByOnlineID"
	YakScriptService_IgnoreYakScript_FullMethodName                   = "/ypb.YakScriptService/IgnoreYakScript"
	YakScriptService_UnIgnoreYakScript_FullMethodName                 = "/ypb.YakScriptService/UnIgnoreYakScript"
	YakScriptService_ExportYakScript_FullMethodName                   = "/ypb.YakScriptService/ExportYakScript"
	YakScriptService_ExecutePacketYakScript_FullMethodName            = "/ypb.YakScriptService/ExecutePacketYakScript"
	YakScriptService_ExecuteBatchPacketYakScript_FullMethodName       = "/ypb.YakScriptService/ExecuteBatchPacketYakScript"
	YakScriptService_GetYakScriptTags_FullMethodName                  = "/ypb.YakScriptService/GetYakScriptTags"
	YakScriptService_QueryYakScriptLocalAndUser_FullMethodName        = "/ypb.YakScriptService/QueryYakScriptLocalAndUser"
	YakScriptService_QueryYakScriptByOnlineGroup_FullMethodName       = "/ypb.YakScriptService/QueryYakScriptByOnlineGroup"
	YakScriptService_QueryYakScriptLocalAll_FullMethodName            = "/ypb.YakScriptService/QueryYakScriptLocalAll"
	YakScriptService_QueryYakScriptExecResult_FullMethodName          = "/ypb.YakScriptService/QueryYakScriptExecResult"
	YakScriptService_QueryYakScriptNameInExecResult_FullMethodName    = "/ypb.YakScriptService/QueryYakScriptNameInExecResult"
	YakScriptService_DeleteYakScriptExecResult_FullMethodName         = "/ypb.YakScriptService/DeleteYakScriptExecResult"
	YakScriptService_DeleteYakScriptExec_FullMethodName               = "/ypb.YakScriptService/DeleteYakScriptExec"
	YakScriptService_GetAvailableYakScriptTags_FullMethodName         = "/ypb.YakScriptService/GetAvailableYakScriptTags"
	YakScriptService_ForceUpdateAvailableYakScriptTags_FullMethodName = "/ypb.YakScriptService/ForceUpdateAvailableYakScriptTags"
)

// YakScriptServiceClient is the client API for YakScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YakScriptServiceClient interface {
	// yakScript
	QueryYakScript(ctx context.Context, in *QueryYakScriptRequest, opts ...grpc.CallOption) (*QueryYakScriptResponse, error)
	QueryYakScriptByYakScriptName(ctx context.Context, in *QueryYakScriptRequest, opts ...grpc.CallOption) (YakScriptService_QueryYakScriptByYakScriptNameClient, error)
	SaveYakScript(ctx context.Context, in *YakScript, opts ...grpc.CallOption) (*YakScript, error)
	DeleteYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error)
	GetYakScriptById(ctx context.Context, in *GetYakScriptByIdRequest, opts ...grpc.CallOption) (*YakScript, error)
	GetYakScriptByName(ctx context.Context, in *GetYakScriptByNameRequest, opts ...grpc.CallOption) (*YakScript, error)
	GetYakScriptByOnlineID(ctx context.Context, in *GetYakScriptByOnlineIDRequest, opts ...grpc.CallOption) (*YakScript, error)
	IgnoreYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error)
	UnIgnoreYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error)
	ExportYakScript(ctx context.Context, in *ExportYakScriptRequest, opts ...grpc.CallOption) (*ExportYakScriptResponse, error)
	ExecutePacketYakScript(ctx context.Context, in *ExecutePacketYakScriptParams, opts ...grpc.CallOption) (YakScriptService_ExecutePacketYakScriptClient, error)
	ExecuteBatchPacketYakScript(ctx context.Context, in *ExecuteBatchPacketYakScriptParams, opts ...grpc.CallOption) (YakScriptService_ExecuteBatchPacketYakScriptClient, error)
	GetYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetYakScriptTagsResponse, error)
	QueryYakScriptLocalAndUser(ctx context.Context, in *QueryYakScriptLocalAndUserRequest, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error)
	QueryYakScriptByOnlineGroup(ctx context.Context, in *QueryYakScriptByOnlineGroupRequest, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error)
	QueryYakScriptLocalAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error)
	// 对插件结果的操作
	QueryYakScriptExecResult(ctx context.Context, in *QueryYakScriptExecResultRequest, opts ...grpc.CallOption) (*QueryYakScriptExecResultResponse, error)
	QueryYakScriptNameInExecResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakScriptNames, error)
	DeleteYakScriptExecResult(ctx context.Context, in *DeleteYakScriptExecResultRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteYakScriptExec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 获取 Tags
	GetAvailableYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error)
	ForceUpdateAvailableYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type yakScriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYakScriptServiceClient(cc grpc.ClientConnInterface) YakScriptServiceClient {
	return &yakScriptServiceClient{cc}
}

func (c *yakScriptServiceClient) QueryYakScript(ctx context.Context, in *QueryYakScriptRequest, opts ...grpc.CallOption) (*QueryYakScriptResponse, error) {
	out := new(QueryYakScriptResponse)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptByYakScriptName(ctx context.Context, in *QueryYakScriptRequest, opts ...grpc.CallOption) (YakScriptService_QueryYakScriptByYakScriptNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &YakScriptService_ServiceDesc.Streams[0], YakScriptService_QueryYakScriptByYakScriptName_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakScriptServiceQueryYakScriptByYakScriptNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YakScriptService_QueryYakScriptByYakScriptNameClient interface {
	Recv() (*YakScript, error)
	grpc.ClientStream
}

type yakScriptServiceQueryYakScriptByYakScriptNameClient struct {
	grpc.ClientStream
}

func (x *yakScriptServiceQueryYakScriptByYakScriptNameClient) Recv() (*YakScript, error) {
	m := new(YakScript)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakScriptServiceClient) SaveYakScript(ctx context.Context, in *YakScript, opts ...grpc.CallOption) (*YakScript, error) {
	out := new(YakScript)
	err := c.cc.Invoke(ctx, YakScriptService_SaveYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) DeleteYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_DeleteYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) GetYakScriptById(ctx context.Context, in *GetYakScriptByIdRequest, opts ...grpc.CallOption) (*YakScript, error) {
	out := new(YakScript)
	err := c.cc.Invoke(ctx, YakScriptService_GetYakScriptById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) GetYakScriptByName(ctx context.Context, in *GetYakScriptByNameRequest, opts ...grpc.CallOption) (*YakScript, error) {
	out := new(YakScript)
	err := c.cc.Invoke(ctx, YakScriptService_GetYakScriptByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) GetYakScriptByOnlineID(ctx context.Context, in *GetYakScriptByOnlineIDRequest, opts ...grpc.CallOption) (*YakScript, error) {
	out := new(YakScript)
	err := c.cc.Invoke(ctx, YakScriptService_GetYakScriptByOnlineID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) IgnoreYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_IgnoreYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) UnIgnoreYakScript(ctx context.Context, in *DeleteYakScriptRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_UnIgnoreYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) ExportYakScript(ctx context.Context, in *ExportYakScriptRequest, opts ...grpc.CallOption) (*ExportYakScriptResponse, error) {
	out := new(ExportYakScriptResponse)
	err := c.cc.Invoke(ctx, YakScriptService_ExportYakScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) ExecutePacketYakScript(ctx context.Context, in *ExecutePacketYakScriptParams, opts ...grpc.CallOption) (YakScriptService_ExecutePacketYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &YakScriptService_ServiceDesc.Streams[1], YakScriptService_ExecutePacketYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakScriptServiceExecutePacketYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YakScriptService_ExecutePacketYakScriptClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type yakScriptServiceExecutePacketYakScriptClient struct {
	grpc.ClientStream
}

func (x *yakScriptServiceExecutePacketYakScriptClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakScriptServiceClient) ExecuteBatchPacketYakScript(ctx context.Context, in *ExecuteBatchPacketYakScriptParams, opts ...grpc.CallOption) (YakScriptService_ExecuteBatchPacketYakScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &YakScriptService_ServiceDesc.Streams[2], YakScriptService_ExecuteBatchPacketYakScript_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yakScriptServiceExecuteBatchPacketYakScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YakScriptService_ExecuteBatchPacketYakScriptClient interface {
	Recv() (*ExecBatchYakScriptResult, error)
	grpc.ClientStream
}

type yakScriptServiceExecuteBatchPacketYakScriptClient struct {
	grpc.ClientStream
}

func (x *yakScriptServiceExecuteBatchPacketYakScriptClient) Recv() (*ExecBatchYakScriptResult, error) {
	m := new(ExecBatchYakScriptResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yakScriptServiceClient) GetYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetYakScriptTagsResponse, error) {
	out := new(GetYakScriptTagsResponse)
	err := c.cc.Invoke(ctx, YakScriptService_GetYakScriptTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptLocalAndUser(ctx context.Context, in *QueryYakScriptLocalAndUserRequest, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error) {
	out := new(QueryYakScriptLocalAndUserResponse)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScriptLocalAndUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptByOnlineGroup(ctx context.Context, in *QueryYakScriptByOnlineGroupRequest, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error) {
	out := new(QueryYakScriptLocalAndUserResponse)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScriptByOnlineGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptLocalAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryYakScriptLocalAndUserResponse, error) {
	out := new(QueryYakScriptLocalAndUserResponse)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScriptLocalAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptExecResult(ctx context.Context, in *QueryYakScriptExecResultRequest, opts ...grpc.CallOption) (*QueryYakScriptExecResultResponse, error) {
	out := new(QueryYakScriptExecResultResponse)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScriptExecResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) QueryYakScriptNameInExecResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*YakScriptNames, error) {
	out := new(YakScriptNames)
	err := c.cc.Invoke(ctx, YakScriptService_QueryYakScriptNameInExecResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) DeleteYakScriptExecResult(ctx context.Context, in *DeleteYakScriptExecResultRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_DeleteYakScriptExecResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) DeleteYakScriptExec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_DeleteYakScriptExec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) GetAvailableYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, YakScriptService_GetAvailableYakScriptTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yakScriptServiceClient) ForceUpdateAvailableYakScriptTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, YakScriptService_ForceUpdateAvailableYakScriptTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YakScriptServiceServer is the server API for YakScriptService service.
// All implementations must embed UnimplementedYakScriptServiceServer
// for forward compatibility
type YakScriptServiceServer interface {
	// yakScript
	QueryYakScript(context.Context, *QueryYakScriptRequest) (*QueryYakScriptResponse, error)
	QueryYakScriptByYakScriptName(*QueryYakScriptRequest, YakScriptService_QueryYakScriptByYakScriptNameServer) error
	SaveYakScript(context.Context, *YakScript) (*YakScript, error)
	DeleteYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error)
	GetYakScriptById(context.Context, *GetYakScriptByIdRequest) (*YakScript, error)
	GetYakScriptByName(context.Context, *GetYakScriptByNameRequest) (*YakScript, error)
	GetYakScriptByOnlineID(context.Context, *GetYakScriptByOnlineIDRequest) (*YakScript, error)
	IgnoreYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error)
	UnIgnoreYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error)
	ExportYakScript(context.Context, *ExportYakScriptRequest) (*ExportYakScriptResponse, error)
	ExecutePacketYakScript(*ExecutePacketYakScriptParams, YakScriptService_ExecutePacketYakScriptServer) error
	ExecuteBatchPacketYakScript(*ExecuteBatchPacketYakScriptParams, YakScriptService_ExecuteBatchPacketYakScriptServer) error
	GetYakScriptTags(context.Context, *Empty) (*GetYakScriptTagsResponse, error)
	QueryYakScriptLocalAndUser(context.Context, *QueryYakScriptLocalAndUserRequest) (*QueryYakScriptLocalAndUserResponse, error)
	QueryYakScriptByOnlineGroup(context.Context, *QueryYakScriptByOnlineGroupRequest) (*QueryYakScriptLocalAndUserResponse, error)
	QueryYakScriptLocalAll(context.Context, *Empty) (*QueryYakScriptLocalAndUserResponse, error)
	// 对插件结果的操作
	QueryYakScriptExecResult(context.Context, *QueryYakScriptExecResultRequest) (*QueryYakScriptExecResultResponse, error)
	QueryYakScriptNameInExecResult(context.Context, *Empty) (*YakScriptNames, error)
	DeleteYakScriptExecResult(context.Context, *DeleteYakScriptExecResultRequest) (*Empty, error)
	DeleteYakScriptExec(context.Context, *Empty) (*Empty, error)
	// 获取 Tags
	GetAvailableYakScriptTags(context.Context, *Empty) (*Fields, error)
	ForceUpdateAvailableYakScriptTags(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedYakScriptServiceServer()
}

// UnimplementedYakScriptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYakScriptServiceServer struct {
}

func (UnimplementedYakScriptServiceServer) QueryYakScript(context.Context, *QueryYakScriptRequest) (*QueryYakScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptByYakScriptName(*QueryYakScriptRequest, YakScriptService_QueryYakScriptByYakScriptNameServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryYakScriptByYakScriptName not implemented")
}
func (UnimplementedYakScriptServiceServer) SaveYakScript(context.Context, *YakScript) (*YakScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) DeleteYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) GetYakScriptById(context.Context, *GetYakScriptByIdRequest) (*YakScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakScriptById not implemented")
}
func (UnimplementedYakScriptServiceServer) GetYakScriptByName(context.Context, *GetYakScriptByNameRequest) (*YakScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakScriptByName not implemented")
}
func (UnimplementedYakScriptServiceServer) GetYakScriptByOnlineID(context.Context, *GetYakScriptByOnlineIDRequest) (*YakScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakScriptByOnlineID not implemented")
}
func (UnimplementedYakScriptServiceServer) IgnoreYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) UnIgnoreYakScript(context.Context, *DeleteYakScriptRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnIgnoreYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) ExportYakScript(context.Context, *ExportYakScriptRequest) (*ExportYakScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) ExecutePacketYakScript(*ExecutePacketYakScriptParams, YakScriptService_ExecutePacketYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePacketYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) ExecuteBatchPacketYakScript(*ExecuteBatchPacketYakScriptParams, YakScriptService_ExecuteBatchPacketYakScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteBatchPacketYakScript not implemented")
}
func (UnimplementedYakScriptServiceServer) GetYakScriptTags(context.Context, *Empty) (*GetYakScriptTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYakScriptTags not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptLocalAndUser(context.Context, *QueryYakScriptLocalAndUserRequest) (*QueryYakScriptLocalAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScriptLocalAndUser not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptByOnlineGroup(context.Context, *QueryYakScriptByOnlineGroupRequest) (*QueryYakScriptLocalAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScriptByOnlineGroup not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptLocalAll(context.Context, *Empty) (*QueryYakScriptLocalAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScriptLocalAll not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptExecResult(context.Context, *QueryYakScriptExecResultRequest) (*QueryYakScriptExecResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScriptExecResult not implemented")
}
func (UnimplementedYakScriptServiceServer) QueryYakScriptNameInExecResult(context.Context, *Empty) (*YakScriptNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYakScriptNameInExecResult not implemented")
}
func (UnimplementedYakScriptServiceServer) DeleteYakScriptExecResult(context.Context, *DeleteYakScriptExecResultRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYakScriptExecResult not implemented")
}
func (UnimplementedYakScriptServiceServer) DeleteYakScriptExec(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYakScriptExec not implemented")
}
func (UnimplementedYakScriptServiceServer) GetAvailableYakScriptTags(context.Context, *Empty) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableYakScriptTags not implemented")
}
func (UnimplementedYakScriptServiceServer) ForceUpdateAvailableYakScriptTags(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdateAvailableYakScriptTags not implemented")
}
func (UnimplementedYakScriptServiceServer) mustEmbedUnimplementedYakScriptServiceServer() {}

// UnsafeYakScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YakScriptServiceServer will
// result in compilation errors.
type UnsafeYakScriptServiceServer interface {
	mustEmbedUnimplementedYakScriptServiceServer()
}

func RegisterYakScriptServiceServer(s grpc.ServiceRegistrar, srv YakScriptServiceServer) {
	s.RegisterService(&YakScriptService_ServiceDesc, srv)
}

func _YakScriptService_QueryYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYakScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScript(ctx, req.(*QueryYakScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptByYakScriptName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryYakScriptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YakScriptServiceServer).QueryYakScriptByYakScriptName(m, &yakScriptServiceQueryYakScriptByYakScriptNameServer{stream})
}

type YakScriptService_QueryYakScriptByYakScriptNameServer interface {
	Send(*YakScript) error
	grpc.ServerStream
}

type yakScriptServiceQueryYakScriptByYakScriptNameServer struct {
	grpc.ServerStream
}

func (x *yakScriptServiceQueryYakScriptByYakScriptNameServer) Send(m *YakScript) error {
	return x.ServerStream.SendMsg(m)
}

func _YakScriptService_SaveYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YakScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).SaveYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_SaveYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).SaveYakScript(ctx, req.(*YakScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_DeleteYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteYakScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).DeleteYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_DeleteYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).DeleteYakScript(ctx, req.(*DeleteYakScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_GetYakScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYakScriptByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).GetYakScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_GetYakScriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).GetYakScriptById(ctx, req.(*GetYakScriptByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_GetYakScriptByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYakScriptByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).GetYakScriptByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_GetYakScriptByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).GetYakScriptByName(ctx, req.(*GetYakScriptByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_GetYakScriptByOnlineID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYakScriptByOnlineIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).GetYakScriptByOnlineID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_GetYakScriptByOnlineID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).GetYakScriptByOnlineID(ctx, req.(*GetYakScriptByOnlineIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_IgnoreYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteYakScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).IgnoreYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_IgnoreYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).IgnoreYakScript(ctx, req.(*DeleteYakScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_UnIgnoreYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteYakScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).UnIgnoreYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_UnIgnoreYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).UnIgnoreYakScript(ctx, req.(*DeleteYakScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_ExportYakScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportYakScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).ExportYakScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_ExportYakScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).ExportYakScript(ctx, req.(*ExportYakScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_ExecutePacketYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutePacketYakScriptParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YakScriptServiceServer).ExecutePacketYakScript(m, &yakScriptServiceExecutePacketYakScriptServer{stream})
}

type YakScriptService_ExecutePacketYakScriptServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type yakScriptServiceExecutePacketYakScriptServer struct {
	grpc.ServerStream
}

func (x *yakScriptServiceExecutePacketYakScriptServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _YakScriptService_ExecuteBatchPacketYakScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteBatchPacketYakScriptParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YakScriptServiceServer).ExecuteBatchPacketYakScript(m, &yakScriptServiceExecuteBatchPacketYakScriptServer{stream})
}

type YakScriptService_ExecuteBatchPacketYakScriptServer interface {
	Send(*ExecBatchYakScriptResult) error
	grpc.ServerStream
}

type yakScriptServiceExecuteBatchPacketYakScriptServer struct {
	grpc.ServerStream
}

func (x *yakScriptServiceExecuteBatchPacketYakScriptServer) Send(m *ExecBatchYakScriptResult) error {
	return x.ServerStream.SendMsg(m)
}

func _YakScriptService_GetYakScriptTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).GetYakScriptTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_GetYakScriptTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).GetYakScriptTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptLocalAndUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYakScriptLocalAndUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScriptLocalAndUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScriptLocalAndUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScriptLocalAndUser(ctx, req.(*QueryYakScriptLocalAndUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptByOnlineGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYakScriptByOnlineGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScriptByOnlineGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScriptByOnlineGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScriptByOnlineGroup(ctx, req.(*QueryYakScriptByOnlineGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptLocalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScriptLocalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScriptLocalAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScriptLocalAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptExecResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYakScriptExecResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScriptExecResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScriptExecResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScriptExecResult(ctx, req.(*QueryYakScriptExecResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_QueryYakScriptNameInExecResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).QueryYakScriptNameInExecResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_QueryYakScriptNameInExecResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).QueryYakScriptNameInExecResult(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_DeleteYakScriptExecResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteYakScriptExecResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).DeleteYakScriptExecResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_DeleteYakScriptExecResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).DeleteYakScriptExecResult(ctx, req.(*DeleteYakScriptExecResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_DeleteYakScriptExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).DeleteYakScriptExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_DeleteYakScriptExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).DeleteYakScriptExec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_GetAvailableYakScriptTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).GetAvailableYakScriptTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_GetAvailableYakScriptTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).GetAvailableYakScriptTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YakScriptService_ForceUpdateAvailableYakScriptTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YakScriptServiceServer).ForceUpdateAvailableYakScriptTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YakScriptService_ForceUpdateAvailableYakScriptTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YakScriptServiceServer).ForceUpdateAvailableYakScriptTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// YakScriptService_ServiceDesc is the grpc.ServiceDesc for YakScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YakScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.YakScriptService",
	HandlerType: (*YakScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryYakScript",
			Handler:    _YakScriptService_QueryYakScript_Handler,
		},
		{
			MethodName: "SaveYakScript",
			Handler:    _YakScriptService_SaveYakScript_Handler,
		},
		{
			MethodName: "DeleteYakScript",
			Handler:    _YakScriptService_DeleteYakScript_Handler,
		},
		{
			MethodName: "GetYakScriptById",
			Handler:    _YakScriptService_GetYakScriptById_Handler,
		},
		{
			MethodName: "GetYakScriptByName",
			Handler:    _YakScriptService_GetYakScriptByName_Handler,
		},
		{
			MethodName: "GetYakScriptByOnlineID",
			Handler:    _YakScriptService_GetYakScriptByOnlineID_Handler,
		},
		{
			MethodName: "IgnoreYakScript",
			Handler:    _YakScriptService_IgnoreYakScript_Handler,
		},
		{
			MethodName: "UnIgnoreYakScript",
			Handler:    _YakScriptService_UnIgnoreYakScript_Handler,
		},
		{
			MethodName: "ExportYakScript",
			Handler:    _YakScriptService_ExportYakScript_Handler,
		},
		{
			MethodName: "GetYakScriptTags",
			Handler:    _YakScriptService_GetYakScriptTags_Handler,
		},
		{
			MethodName: "QueryYakScriptLocalAndUser",
			Handler:    _YakScriptService_QueryYakScriptLocalAndUser_Handler,
		},
		{
			MethodName: "QueryYakScriptByOnlineGroup",
			Handler:    _YakScriptService_QueryYakScriptByOnlineGroup_Handler,
		},
		{
			MethodName: "QueryYakScriptLocalAll",
			Handler:    _YakScriptService_QueryYakScriptLocalAll_Handler,
		},
		{
			MethodName: "QueryYakScriptExecResult",
			Handler:    _YakScriptService_QueryYakScriptExecResult_Handler,
		},
		{
			MethodName: "QueryYakScriptNameInExecResult",
			Handler:    _YakScriptService_QueryYakScriptNameInExecResult_Handler,
		},
		{
			MethodName: "DeleteYakScriptExecResult",
			Handler:    _YakScriptService_DeleteYakScriptExecResult_Handler,
		},
		{
			MethodName: "DeleteYakScriptExec",
			Handler:    _YakScriptService_DeleteYakScriptExec_Handler,
		},
		{
			MethodName: "GetAvailableYakScriptTags",
			Handler:    _YakScriptService_GetAvailableYakScriptTags_Handler,
		},
		{
			MethodName: "ForceUpdateAvailableYakScriptTags",
			Handler:    _YakScriptService_ForceUpdateAvailableYakScriptTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryYakScriptByYakScriptName",
			Handler:       _YakScriptService_QueryYakScriptByYakScriptName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecutePacketYakScript",
			Handler:       _YakScriptService_ExecutePacketYakScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteBatchPacketYakScript",
			Handler:       _YakScriptService_ExecuteBatchPacketYakScript_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yak_script.proto",
}
