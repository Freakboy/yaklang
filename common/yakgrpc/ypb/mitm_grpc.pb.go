// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: mitm.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MITMService_MITM_FullMethodName             = "/ypb.MITMService/MITM"
	MITMService_DownloadMITMCert_FullMethodName = "/ypb.MITMService/DownloadMITMCert"
	MITMService_GetCurrentRules_FullMethodName  = "/ypb.MITMService/GetCurrentRules"
	MITMService_SetCurrentRules_FullMethodName  = "/ypb.MITMService/SetCurrentRules"
)

// MITMServiceClient is the client API for MITMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MITMServiceClient interface {
	// 中间人劫持
	MITM(ctx context.Context, opts ...grpc.CallOption) (MITMService_MITMClient, error)
	DownloadMITMCert(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MITMCert, error)
	GetCurrentRules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MITMContentReplacers, error)
	SetCurrentRules(ctx context.Context, in *MITMContentReplacers, opts ...grpc.CallOption) (*Empty, error)
}

type mITMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMITMServiceClient(cc grpc.ClientConnInterface) MITMServiceClient {
	return &mITMServiceClient{cc}
}

func (c *mITMServiceClient) MITM(ctx context.Context, opts ...grpc.CallOption) (MITMService_MITMClient, error) {
	stream, err := c.cc.NewStream(ctx, &MITMService_ServiceDesc.Streams[0], MITMService_MITM_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mITMServiceMITMClient{stream}
	return x, nil
}

type MITMService_MITMClient interface {
	Send(*MITMRequest) error
	Recv() (*MITMResponse, error)
	grpc.ClientStream
}

type mITMServiceMITMClient struct {
	grpc.ClientStream
}

func (x *mITMServiceMITMClient) Send(m *MITMRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mITMServiceMITMClient) Recv() (*MITMResponse, error) {
	m := new(MITMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mITMServiceClient) DownloadMITMCert(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MITMCert, error) {
	out := new(MITMCert)
	err := c.cc.Invoke(ctx, MITMService_DownloadMITMCert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mITMServiceClient) GetCurrentRules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MITMContentReplacers, error) {
	out := new(MITMContentReplacers)
	err := c.cc.Invoke(ctx, MITMService_GetCurrentRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mITMServiceClient) SetCurrentRules(ctx context.Context, in *MITMContentReplacers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MITMService_SetCurrentRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MITMServiceServer is the server API for MITMService service.
// All implementations must embed UnimplementedMITMServiceServer
// for forward compatibility
type MITMServiceServer interface {
	// 中间人劫持
	MITM(MITMService_MITMServer) error
	DownloadMITMCert(context.Context, *Empty) (*MITMCert, error)
	GetCurrentRules(context.Context, *Empty) (*MITMContentReplacers, error)
	SetCurrentRules(context.Context, *MITMContentReplacers) (*Empty, error)
	mustEmbedUnimplementedMITMServiceServer()
}

// UnimplementedMITMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMITMServiceServer struct {
}

func (UnimplementedMITMServiceServer) MITM(MITMService_MITMServer) error {
	return status.Errorf(codes.Unimplemented, "method MITM not implemented")
}
func (UnimplementedMITMServiceServer) DownloadMITMCert(context.Context, *Empty) (*MITMCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMITMCert not implemented")
}
func (UnimplementedMITMServiceServer) GetCurrentRules(context.Context, *Empty) (*MITMContentReplacers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRules not implemented")
}
func (UnimplementedMITMServiceServer) SetCurrentRules(context.Context, *MITMContentReplacers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentRules not implemented")
}
func (UnimplementedMITMServiceServer) mustEmbedUnimplementedMITMServiceServer() {}

// UnsafeMITMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MITMServiceServer will
// result in compilation errors.
type UnsafeMITMServiceServer interface {
	mustEmbedUnimplementedMITMServiceServer()
}

func RegisterMITMServiceServer(s grpc.ServiceRegistrar, srv MITMServiceServer) {
	s.RegisterService(&MITMService_ServiceDesc, srv)
}

func _MITMService_MITM_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MITMServiceServer).MITM(&mITMServiceMITMServer{stream})
}

type MITMService_MITMServer interface {
	Send(*MITMResponse) error
	Recv() (*MITMRequest, error)
	grpc.ServerStream
}

type mITMServiceMITMServer struct {
	grpc.ServerStream
}

func (x *mITMServiceMITMServer) Send(m *MITMResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mITMServiceMITMServer) Recv() (*MITMRequest, error) {
	m := new(MITMRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MITMService_DownloadMITMCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMServiceServer).DownloadMITMCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMService_DownloadMITMCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMServiceServer).DownloadMITMCert(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MITMService_GetCurrentRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMServiceServer).GetCurrentRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMService_GetCurrentRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMServiceServer).GetCurrentRules(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MITMService_SetCurrentRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MITMContentReplacers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMServiceServer).SetCurrentRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMService_SetCurrentRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMServiceServer).SetCurrentRules(ctx, req.(*MITMContentReplacers))
	}
	return interceptor(ctx, in, info, handler)
}

// MITMService_ServiceDesc is the grpc.ServiceDesc for MITMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MITMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MITMService",
	HandlerType: (*MITMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadMITMCert",
			Handler:    _MITMService_DownloadMITMCert_Handler,
		},
		{
			MethodName: "GetCurrentRules",
			Handler:    _MITMService_GetCurrentRules_Handler,
		},
		{
			MethodName: "SetCurrentRules",
			Handler:    _MITMService_SetCurrentRules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MITM",
			Handler:       _MITMService_MITM_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mitm.proto",
}

const (
	MITMReplacerService_ExportMITMReplacerRules_FullMethodName = "/ypb.MITMReplacerService/ExportMITMReplacerRules"
	MITMReplacerService_ImportMITMReplacerRules_FullMethodName = "/ypb.MITMReplacerService/ImportMITMReplacerRules"
)

// MITMReplacerServiceClient is the client API for MITMReplacerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MITMReplacerServiceClient interface {
	// MITM 衍生功能：
	// Replacers 管理
	ExportMITMReplacerRules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExportMITMReplacerRulesResponse, error)
	ImportMITMReplacerRules(ctx context.Context, in *ImportMITMReplacerRulesRequest, opts ...grpc.CallOption) (*Empty, error)
}

type mITMReplacerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMITMReplacerServiceClient(cc grpc.ClientConnInterface) MITMReplacerServiceClient {
	return &mITMReplacerServiceClient{cc}
}

func (c *mITMReplacerServiceClient) ExportMITMReplacerRules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExportMITMReplacerRulesResponse, error) {
	out := new(ExportMITMReplacerRulesResponse)
	err := c.cc.Invoke(ctx, MITMReplacerService_ExportMITMReplacerRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mITMReplacerServiceClient) ImportMITMReplacerRules(ctx context.Context, in *ImportMITMReplacerRulesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MITMReplacerService_ImportMITMReplacerRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MITMReplacerServiceServer is the server API for MITMReplacerService service.
// All implementations must embed UnimplementedMITMReplacerServiceServer
// for forward compatibility
type MITMReplacerServiceServer interface {
	// MITM 衍生功能：
	// Replacers 管理
	ExportMITMReplacerRules(context.Context, *Empty) (*ExportMITMReplacerRulesResponse, error)
	ImportMITMReplacerRules(context.Context, *ImportMITMReplacerRulesRequest) (*Empty, error)
	mustEmbedUnimplementedMITMReplacerServiceServer()
}

// UnimplementedMITMReplacerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMITMReplacerServiceServer struct {
}

func (UnimplementedMITMReplacerServiceServer) ExportMITMReplacerRules(context.Context, *Empty) (*ExportMITMReplacerRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMITMReplacerRules not implemented")
}
func (UnimplementedMITMReplacerServiceServer) ImportMITMReplacerRules(context.Context, *ImportMITMReplacerRulesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportMITMReplacerRules not implemented")
}
func (UnimplementedMITMReplacerServiceServer) mustEmbedUnimplementedMITMReplacerServiceServer() {}

// UnsafeMITMReplacerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MITMReplacerServiceServer will
// result in compilation errors.
type UnsafeMITMReplacerServiceServer interface {
	mustEmbedUnimplementedMITMReplacerServiceServer()
}

func RegisterMITMReplacerServiceServer(s grpc.ServiceRegistrar, srv MITMReplacerServiceServer) {
	s.RegisterService(&MITMReplacerService_ServiceDesc, srv)
}

func _MITMReplacerService_ExportMITMReplacerRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMReplacerServiceServer).ExportMITMReplacerRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMReplacerService_ExportMITMReplacerRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMReplacerServiceServer).ExportMITMReplacerRules(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MITMReplacerService_ImportMITMReplacerRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMITMReplacerRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMReplacerServiceServer).ImportMITMReplacerRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMReplacerService_ImportMITMReplacerRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMReplacerServiceServer).ImportMITMReplacerRules(ctx, req.(*ImportMITMReplacerRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MITMReplacerService_ServiceDesc is the grpc.ServiceDesc for MITMReplacerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MITMReplacerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MITMReplacerService",
	HandlerType: (*MITMReplacerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportMITMReplacerRules",
			Handler:    _MITMReplacerService_ExportMITMReplacerRules_Handler,
		},
		{
			MethodName: "ImportMITMReplacerRules",
			Handler:    _MITMReplacerService_ImportMITMReplacerRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitm.proto",
}

const (
	MITMExtractedDataService_QueryMITMRuleExtractedData_FullMethodName = "/ypb.MITMExtractedDataService/QueryMITMRuleExtractedData"
)

// MITMExtractedDataServiceClient is the client API for MITMExtractedDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MITMExtractedDataServiceClient interface {
	// 从规则中提取数据
	QueryMITMRuleExtractedData(ctx context.Context, in *QueryMITMRuleExtractedDataRequest, opts ...grpc.CallOption) (*QueryMITMRuleExtractedDataResponse, error)
}

type mITMExtractedDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMITMExtractedDataServiceClient(cc grpc.ClientConnInterface) MITMExtractedDataServiceClient {
	return &mITMExtractedDataServiceClient{cc}
}

func (c *mITMExtractedDataServiceClient) QueryMITMRuleExtractedData(ctx context.Context, in *QueryMITMRuleExtractedDataRequest, opts ...grpc.CallOption) (*QueryMITMRuleExtractedDataResponse, error) {
	out := new(QueryMITMRuleExtractedDataResponse)
	err := c.cc.Invoke(ctx, MITMExtractedDataService_QueryMITMRuleExtractedData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MITMExtractedDataServiceServer is the server API for MITMExtractedDataService service.
// All implementations must embed UnimplementedMITMExtractedDataServiceServer
// for forward compatibility
type MITMExtractedDataServiceServer interface {
	// 从规则中提取数据
	QueryMITMRuleExtractedData(context.Context, *QueryMITMRuleExtractedDataRequest) (*QueryMITMRuleExtractedDataResponse, error)
	mustEmbedUnimplementedMITMExtractedDataServiceServer()
}

// UnimplementedMITMExtractedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMITMExtractedDataServiceServer struct {
}

func (UnimplementedMITMExtractedDataServiceServer) QueryMITMRuleExtractedData(context.Context, *QueryMITMRuleExtractedDataRequest) (*QueryMITMRuleExtractedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMITMRuleExtractedData not implemented")
}
func (UnimplementedMITMExtractedDataServiceServer) mustEmbedUnimplementedMITMExtractedDataServiceServer() {
}

// UnsafeMITMExtractedDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MITMExtractedDataServiceServer will
// result in compilation errors.
type UnsafeMITMExtractedDataServiceServer interface {
	mustEmbedUnimplementedMITMExtractedDataServiceServer()
}

func RegisterMITMExtractedDataServiceServer(s grpc.ServiceRegistrar, srv MITMExtractedDataServiceServer) {
	s.RegisterService(&MITMExtractedDataService_ServiceDesc, srv)
}

func _MITMExtractedDataService_QueryMITMRuleExtractedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMITMRuleExtractedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMExtractedDataServiceServer).QueryMITMRuleExtractedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMExtractedDataService_QueryMITMRuleExtractedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMExtractedDataServiceServer).QueryMITMRuleExtractedData(ctx, req.(*QueryMITMRuleExtractedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MITMExtractedDataService_ServiceDesc is the grpc.ServiceDesc for MITMExtractedDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MITMExtractedDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MITMExtractedDataService",
	HandlerType: (*MITMExtractedDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMITMRuleExtractedData",
			Handler:    _MITMExtractedDataService_QueryMITMRuleExtractedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitm.proto",
}

const (
	MITMFilterService_SetMITMFilter_FullMethodName = "/ypb.MITMFilterService/SetMITMFilter"
	MITMFilterService_GetMITMFilter_FullMethodName = "/ypb.MITMFilterService/GetMITMFilter"
)

// MITMFilterServiceClient is the client API for MITMFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MITMFilterServiceClient interface {
	// MITM 劫持的过滤器
	SetMITMFilter(ctx context.Context, in *SetMITMFilterRequest, opts ...grpc.CallOption) (*SetMITMFilterResponse, error)
	GetMITMFilter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SetMITMFilterRequest, error)
}

type mITMFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMITMFilterServiceClient(cc grpc.ClientConnInterface) MITMFilterServiceClient {
	return &mITMFilterServiceClient{cc}
}

func (c *mITMFilterServiceClient) SetMITMFilter(ctx context.Context, in *SetMITMFilterRequest, opts ...grpc.CallOption) (*SetMITMFilterResponse, error) {
	out := new(SetMITMFilterResponse)
	err := c.cc.Invoke(ctx, MITMFilterService_SetMITMFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mITMFilterServiceClient) GetMITMFilter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SetMITMFilterRequest, error) {
	out := new(SetMITMFilterRequest)
	err := c.cc.Invoke(ctx, MITMFilterService_GetMITMFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MITMFilterServiceServer is the server API for MITMFilterService service.
// All implementations must embed UnimplementedMITMFilterServiceServer
// for forward compatibility
type MITMFilterServiceServer interface {
	// MITM 劫持的过滤器
	SetMITMFilter(context.Context, *SetMITMFilterRequest) (*SetMITMFilterResponse, error)
	GetMITMFilter(context.Context, *Empty) (*SetMITMFilterRequest, error)
	mustEmbedUnimplementedMITMFilterServiceServer()
}

// UnimplementedMITMFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMITMFilterServiceServer struct {
}

func (UnimplementedMITMFilterServiceServer) SetMITMFilter(context.Context, *SetMITMFilterRequest) (*SetMITMFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMITMFilter not implemented")
}
func (UnimplementedMITMFilterServiceServer) GetMITMFilter(context.Context, *Empty) (*SetMITMFilterRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMITMFilter not implemented")
}
func (UnimplementedMITMFilterServiceServer) mustEmbedUnimplementedMITMFilterServiceServer() {}

// UnsafeMITMFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MITMFilterServiceServer will
// result in compilation errors.
type UnsafeMITMFilterServiceServer interface {
	mustEmbedUnimplementedMITMFilterServiceServer()
}

func RegisterMITMFilterServiceServer(s grpc.ServiceRegistrar, srv MITMFilterServiceServer) {
	s.RegisterService(&MITMFilterService_ServiceDesc, srv)
}

func _MITMFilterService_SetMITMFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMITMFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMFilterServiceServer).SetMITMFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMFilterService_SetMITMFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMFilterServiceServer).SetMITMFilter(ctx, req.(*SetMITMFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MITMFilterService_GetMITMFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MITMFilterServiceServer).GetMITMFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MITMFilterService_GetMITMFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MITMFilterServiceServer).GetMITMFilter(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MITMFilterService_ServiceDesc is the grpc.ServiceDesc for MITMFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MITMFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MITMFilterService",
	HandlerType: (*MITMFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMITMFilter",
			Handler:    _MITMFilterService_SetMITMFilter_Handler,
		},
		{
			MethodName: "GetMITMFilter",
			Handler:    _MITMFilterService_GetMITMFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitm.proto",
}
