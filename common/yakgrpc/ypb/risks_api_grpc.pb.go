// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: risks_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RisksApi_QueryRisks_FullMethodName              = "/ypb.RisksApi/QueryRisks"
	RisksApi_QueryRisk_FullMethodName               = "/ypb.RisksApi/QueryRisk"
	RisksApi_DeleteRisk_FullMethodName              = "/ypb.RisksApi/DeleteRisk"
	RisksApi_QueryAvailableRiskType_FullMethodName  = "/ypb.RisksApi/QueryAvailableRiskType"
	RisksApi_QueryAvailableRiskLevel_FullMethodName = "/ypb.RisksApi/QueryAvailableRiskLevel"
	RisksApi_QueryRiskTableStats_FullMethodName     = "/ypb.RisksApi/QueryRiskTableStats"
	RisksApi_ResetRiskTableStats_FullMethodName     = "/ypb.RisksApi/ResetRiskTableStats"
	RisksApi_QueryAvailableTarget_FullMethodName    = "/ypb.RisksApi/QueryAvailableTarget"
	RisksApi_QueryNewRisk_FullMethodName            = "/ypb.RisksApi/QueryNewRisk"
	RisksApi_NewRiskRead_FullMethodName             = "/ypb.RisksApi/NewRiskRead"
	RisksApi_UploadRiskToOnline_FullMethodName      = "/ypb.RisksApi/UploadRiskToOnline"
)

// RisksApiClient is the client API for RisksApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RisksApiClient interface {
	// Risk
	QueryRisks(ctx context.Context, in *QueryRisksRequest, opts ...grpc.CallOption) (*QueryRisksResponse, error)
	QueryRisk(ctx context.Context, in *QueryRiskRequest, opts ...grpc.CallOption) (*Risk, error)
	DeleteRisk(ctx context.Context, in *DeleteRiskRequest, opts ...grpc.CallOption) (*Empty, error)
	QueryAvailableRiskType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error)
	QueryAvailableRiskLevel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error)
	QueryRiskTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RiskTableStats, error)
	ResetRiskTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	QueryAvailableTarget(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error)
	QueryNewRisk(ctx context.Context, in *QueryNewRiskRequest, opts ...grpc.CallOption) (*QueryNewRiskResponse, error)
	NewRiskRead(ctx context.Context, in *NewRiskReadRequest, opts ...grpc.CallOption) (*Empty, error)
	UploadRiskToOnline(ctx context.Context, in *UploadRiskToOnlineRequest, opts ...grpc.CallOption) (*Empty, error)
}

type risksApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRisksApiClient(cc grpc.ClientConnInterface) RisksApiClient {
	return &risksApiClient{cc}
}

func (c *risksApiClient) QueryRisks(ctx context.Context, in *QueryRisksRequest, opts ...grpc.CallOption) (*QueryRisksResponse, error) {
	out := new(QueryRisksResponse)
	err := c.cc.Invoke(ctx, RisksApi_QueryRisks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryRisk(ctx context.Context, in *QueryRiskRequest, opts ...grpc.CallOption) (*Risk, error) {
	out := new(Risk)
	err := c.cc.Invoke(ctx, RisksApi_QueryRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) DeleteRisk(ctx context.Context, in *DeleteRiskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RisksApi_DeleteRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryAvailableRiskType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, RisksApi_QueryAvailableRiskType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryAvailableRiskLevel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, RisksApi_QueryAvailableRiskLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryRiskTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RiskTableStats, error) {
	out := new(RiskTableStats)
	err := c.cc.Invoke(ctx, RisksApi_QueryRiskTableStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) ResetRiskTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RisksApi_ResetRiskTableStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryAvailableTarget(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, RisksApi_QueryAvailableTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) QueryNewRisk(ctx context.Context, in *QueryNewRiskRequest, opts ...grpc.CallOption) (*QueryNewRiskResponse, error) {
	out := new(QueryNewRiskResponse)
	err := c.cc.Invoke(ctx, RisksApi_QueryNewRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) NewRiskRead(ctx context.Context, in *NewRiskReadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RisksApi_NewRiskRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *risksApiClient) UploadRiskToOnline(ctx context.Context, in *UploadRiskToOnlineRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RisksApi_UploadRiskToOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RisksApiServer is the server API for RisksApi service.
// All implementations must embed UnimplementedRisksApiServer
// for forward compatibility
type RisksApiServer interface {
	// Risk
	QueryRisks(context.Context, *QueryRisksRequest) (*QueryRisksResponse, error)
	QueryRisk(context.Context, *QueryRiskRequest) (*Risk, error)
	DeleteRisk(context.Context, *DeleteRiskRequest) (*Empty, error)
	QueryAvailableRiskType(context.Context, *Empty) (*Fields, error)
	QueryAvailableRiskLevel(context.Context, *Empty) (*Fields, error)
	QueryRiskTableStats(context.Context, *Empty) (*RiskTableStats, error)
	ResetRiskTableStats(context.Context, *Empty) (*Empty, error)
	QueryAvailableTarget(context.Context, *Empty) (*Fields, error)
	QueryNewRisk(context.Context, *QueryNewRiskRequest) (*QueryNewRiskResponse, error)
	NewRiskRead(context.Context, *NewRiskReadRequest) (*Empty, error)
	UploadRiskToOnline(context.Context, *UploadRiskToOnlineRequest) (*Empty, error)
	mustEmbedUnimplementedRisksApiServer()
}

// UnimplementedRisksApiServer must be embedded to have forward compatible implementations.
type UnimplementedRisksApiServer struct {
}

func (UnimplementedRisksApiServer) QueryRisks(context.Context, *QueryRisksRequest) (*QueryRisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRisks not implemented")
}
func (UnimplementedRisksApiServer) QueryRisk(context.Context, *QueryRiskRequest) (*Risk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRisk not implemented")
}
func (UnimplementedRisksApiServer) DeleteRisk(context.Context, *DeleteRiskRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRisk not implemented")
}
func (UnimplementedRisksApiServer) QueryAvailableRiskType(context.Context, *Empty) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableRiskType not implemented")
}
func (UnimplementedRisksApiServer) QueryAvailableRiskLevel(context.Context, *Empty) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableRiskLevel not implemented")
}
func (UnimplementedRisksApiServer) QueryRiskTableStats(context.Context, *Empty) (*RiskTableStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRiskTableStats not implemented")
}
func (UnimplementedRisksApiServer) ResetRiskTableStats(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRiskTableStats not implemented")
}
func (UnimplementedRisksApiServer) QueryAvailableTarget(context.Context, *Empty) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableTarget not implemented")
}
func (UnimplementedRisksApiServer) QueryNewRisk(context.Context, *QueryNewRiskRequest) (*QueryNewRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNewRisk not implemented")
}
func (UnimplementedRisksApiServer) NewRiskRead(context.Context, *NewRiskReadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRiskRead not implemented")
}
func (UnimplementedRisksApiServer) UploadRiskToOnline(context.Context, *UploadRiskToOnlineRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRiskToOnline not implemented")
}
func (UnimplementedRisksApiServer) mustEmbedUnimplementedRisksApiServer() {}

// UnsafeRisksApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RisksApiServer will
// result in compilation errors.
type UnsafeRisksApiServer interface {
	mustEmbedUnimplementedRisksApiServer()
}

func RegisterRisksApiServer(s grpc.ServiceRegistrar, srv RisksApiServer) {
	s.RegisterService(&RisksApi_ServiceDesc, srv)
}

func _RisksApi_QueryRisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryRisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryRisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryRisks(ctx, req.(*QueryRisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryRisk(ctx, req.(*QueryRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_DeleteRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).DeleteRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_DeleteRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).DeleteRisk(ctx, req.(*DeleteRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryAvailableRiskType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryAvailableRiskType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryAvailableRiskType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryAvailableRiskType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryAvailableRiskLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryAvailableRiskLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryAvailableRiskLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryAvailableRiskLevel(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryRiskTableStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryRiskTableStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryRiskTableStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryRiskTableStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_ResetRiskTableStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).ResetRiskTableStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_ResetRiskTableStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).ResetRiskTableStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryAvailableTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryAvailableTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryAvailableTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryAvailableTarget(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_QueryNewRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).QueryNewRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_QueryNewRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).QueryNewRisk(ctx, req.(*QueryNewRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_NewRiskRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRiskReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).NewRiskRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_NewRiskRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).NewRiskRead(ctx, req.(*NewRiskReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RisksApi_UploadRiskToOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRiskToOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RisksApiServer).UploadRiskToOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RisksApi_UploadRiskToOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RisksApiServer).UploadRiskToOnline(ctx, req.(*UploadRiskToOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RisksApi_ServiceDesc is the grpc.ServiceDesc for RisksApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RisksApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.RisksApi",
	HandlerType: (*RisksApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRisks",
			Handler:    _RisksApi_QueryRisks_Handler,
		},
		{
			MethodName: "QueryRisk",
			Handler:    _RisksApi_QueryRisk_Handler,
		},
		{
			MethodName: "DeleteRisk",
			Handler:    _RisksApi_DeleteRisk_Handler,
		},
		{
			MethodName: "QueryAvailableRiskType",
			Handler:    _RisksApi_QueryAvailableRiskType_Handler,
		},
		{
			MethodName: "QueryAvailableRiskLevel",
			Handler:    _RisksApi_QueryAvailableRiskLevel_Handler,
		},
		{
			MethodName: "QueryRiskTableStats",
			Handler:    _RisksApi_QueryRiskTableStats_Handler,
		},
		{
			MethodName: "ResetRiskTableStats",
			Handler:    _RisksApi_ResetRiskTableStats_Handler,
		},
		{
			MethodName: "QueryAvailableTarget",
			Handler:    _RisksApi_QueryAvailableTarget_Handler,
		},
		{
			MethodName: "QueryNewRisk",
			Handler:    _RisksApi_QueryNewRisk_Handler,
		},
		{
			MethodName: "NewRiskRead",
			Handler:    _RisksApi_NewRiskRead_Handler,
		},
		{
			MethodName: "UploadRiskToOnline",
			Handler:    _RisksApi_UploadRiskToOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "risks_api.proto",
}
