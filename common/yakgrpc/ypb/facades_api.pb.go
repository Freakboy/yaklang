// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: facades_api.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterFacadesHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http(s)://localhost:<facadesport>/...
	FacadesUrl string `protobuf:"bytes,1,opt,name=FacadesUrl,proto3" json:"FacadesUrl,omitempty"`
}

func (x *RegisterFacadesHTTPResponse) Reset() {
	*x = RegisterFacadesHTTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPResponse) ProtoMessage() {}

func (x *RegisterFacadesHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPResponse.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPResponse) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterFacadesHTTPResponse) GetFacadesUrl() string {
	if x != nil {
		return x.FacadesUrl
	}
	return ""
}

type RegisterFacadesHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 这个优先级比较高，如果有这个的话，他的响应应该像是
	// /_yakit/history/<id>
	HTTPFlowID int64 `protobuf:"varint,1,opt,name=HTTPFlowID,proto3" json:"HTTPFlowID,omitempty"`
	// 散装 HTTPFlow
	HTTPResponse []byte `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *RegisterFacadesHTTPRequest) Reset() {
	*x = RegisterFacadesHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPRequest) ProtoMessage() {}

func (x *RegisterFacadesHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPRequest.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPRequest) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterFacadesHTTPRequest) GetHTTPFlowID() int64 {
	if x != nil {
		return x.HTTPFlowID
	}
	return 0
}

func (x *RegisterFacadesHTTPRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *RegisterFacadesHTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StartFacadesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 端口复用的
	LocalFacadeHost string `protobuf:"bytes,41,opt,name=LocalFacadeHost,proto3" json:"LocalFacadeHost,omitempty"`
	LocalFacadePort int32  `protobuf:"varint,42,opt,name=LocalFacadePort,proto3" json:"LocalFacadePort,omitempty"`
	// bool EnableRMIServer = 1;
	// int32 RMILocalPort = 2;
	EnableDNSLogServer bool  `protobuf:"varint,3,opt,name=EnableDNSLogServer,proto3" json:"EnableDNSLogServer,omitempty"`
	DNSLogLocalPort    int32 `protobuf:"varint,4,opt,name=DNSLogLocalPort,proto3" json:"DNSLogLocalPort,omitempty"`
	// 连接远程端口参数
	ConnectParam *GetTunnelServerExternalIPParams `protobuf:"bytes,5,opt,name=ConnectParam,proto3" json:"ConnectParam,omitempty"`
	// 远端端口开放情况
	//
	//	int32 RMIRemotePort = 6;
	FacadeRemotePort int32 `protobuf:"varint,16,opt,name=FacadeRemotePort,proto3" json:"FacadeRemotePort,omitempty"`
	DNSLogRemotePort int32 `protobuf:"varint,7,opt,name=DNSLogRemotePort,proto3" json:"DNSLogRemotePort,omitempty"`
	// 外部域名
	ExternalDomain string `protobuf:"bytes,8,opt,name=ExternalDomain,proto3" json:"ExternalDomain,omitempty"`
	// 验证端口是否转发成功
	Verify bool `protobuf:"varint,9,opt,name=Verify,proto3" json:"Verify,omitempty"`
}

func (x *StartFacadesParams) Reset() {
	*x = StartFacadesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesParams) ProtoMessage() {}

func (x *StartFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesParams.ProtoReflect.Descriptor instead.
func (*StartFacadesParams) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{2}
}

func (x *StartFacadesParams) GetLocalFacadeHost() string {
	if x != nil {
		return x.LocalFacadeHost
	}
	return ""
}

func (x *StartFacadesParams) GetLocalFacadePort() int32 {
	if x != nil {
		return x.LocalFacadePort
	}
	return 0
}

func (x *StartFacadesParams) GetEnableDNSLogServer() bool {
	if x != nil {
		return x.EnableDNSLogServer
	}
	return false
}

func (x *StartFacadesParams) GetDNSLogLocalPort() int32 {
	if x != nil {
		return x.DNSLogLocalPort
	}
	return 0
}

func (x *StartFacadesParams) GetConnectParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParam
	}
	return nil
}

func (x *StartFacadesParams) GetFacadeRemotePort() int32 {
	if x != nil {
		return x.FacadeRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetDNSLogRemotePort() int32 {
	if x != nil {
		return x.DNSLogRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetExternalDomain() string {
	if x != nil {
		return x.ExternalDomain
	}
	return ""
}

func (x *StartFacadesParams) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

type StartFacadesWithYsoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 端口复用的
	IsRemote            bool                             `protobuf:"varint,1,opt,name=IsRemote,proto3" json:"IsRemote,omitempty"`
	ReversePort         int32                            `protobuf:"varint,2,opt,name=ReversePort,proto3" json:"ReversePort,omitempty"`
	ReverseHost         string                           `protobuf:"bytes,4,opt,name=ReverseHost,proto3" json:"ReverseHost,omitempty"`
	Token               string                           `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	BridgeParam         *GetTunnelServerExternalIPParams `protobuf:"bytes,6,opt,name=BridgeParam,proto3" json:"BridgeParam,omitempty"`
	GenerateClassParams *YsoOptionsRequest               `protobuf:"bytes,7,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
}

func (x *StartFacadesWithYsoParams) Reset() {
	*x = StartFacadesWithYsoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesWithYsoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesWithYsoParams) ProtoMessage() {}

func (x *StartFacadesWithYsoParams) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesWithYsoParams.ProtoReflect.Descriptor instead.
func (*StartFacadesWithYsoParams) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{3}
}

func (x *StartFacadesWithYsoParams) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *StartFacadesWithYsoParams) GetReversePort() int32 {
	if x != nil {
		return x.ReversePort
	}
	return 0
}

func (x *StartFacadesWithYsoParams) GetReverseHost() string {
	if x != nil {
		return x.ReverseHost
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetBridgeParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.BridgeParam
	}
	return nil
}

func (x *StartFacadesWithYsoParams) GetGenerateClassParams() *YsoOptionsRequest {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

type ApplyClassToFacadesParamsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateClassParams *YsoOptionsRequerstWithVerbose `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string                         `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ApplyClassToFacadesParamsWithVerbose) Reset() {
	*x = ApplyClassToFacadesParamsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyClassToFacadesParamsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParamsWithVerbose) ProtoMessage() {}

func (x *ApplyClassToFacadesParamsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParamsWithVerbose.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParamsWithVerbose) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetGenerateClassParams() *YsoOptionsRequerstWithVerbose {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BytesToBase64Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *BytesToBase64Request) Reset() {
	*x = BytesToBase64Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Request) ProtoMessage() {}

func (x *BytesToBase64Request) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Request.ProtoReflect.Descriptor instead.
func (*BytesToBase64Request) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{5}
}

func (x *BytesToBase64Request) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64 string `protobuf:"bytes,1,opt,name=Base64,proto3" json:"Base64,omitempty"`
}

func (x *BytesToBase64Response) Reset() {
	*x = BytesToBase64Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Response) ProtoMessage() {}

func (x *BytesToBase64Response) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Response.ProtoReflect.Descriptor instead.
func (*BytesToBase64Response) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{6}
}

func (x *BytesToBase64Response) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

type ConfigGlobalReverseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	LocalAddr     string                           `protobuf:"bytes,2,opt,name=LocalAddr,proto3" json:"LocalAddr,omitempty"`
}

func (x *ConfigGlobalReverseParams) Reset() {
	*x = ConfigGlobalReverseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGlobalReverseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGlobalReverseParams) ProtoMessage() {}

func (x *ConfigGlobalReverseParams) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGlobalReverseParams.ProtoReflect.Descriptor instead.
func (*ConfigGlobalReverseParams) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigGlobalReverseParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *ConfigGlobalReverseParams) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IP   string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{8}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NetInterface) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type AvailableLocalAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*NetInterface `protobuf:"bytes,1,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
}

func (x *AvailableLocalAddrResponse) Reset() {
	*x = AvailableLocalAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableLocalAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLocalAddrResponse) ProtoMessage() {}

func (x *AvailableLocalAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLocalAddrResponse.ProtoReflect.Descriptor instead.
func (*AvailableLocalAddrResponse) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{9}
}

func (x *AvailableLocalAddrResponse) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type GetGlobalReverseServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicReverseIP   string `protobuf:"bytes,1,opt,name=PublicReverseIP,proto3" json:"PublicReverseIP,omitempty"`
	PublicReversePort int32  `protobuf:"varint,2,opt,name=PublicReversePort,proto3" json:"PublicReversePort,omitempty"`
	LocalReverseAddr  string `protobuf:"bytes,3,opt,name=LocalReverseAddr,proto3" json:"LocalReverseAddr,omitempty"`
	LocalReversePort  int32  `protobuf:"varint,4,opt,name=LocalReversePort,proto3" json:"LocalReversePort,omitempty"`
}

func (x *GetGlobalReverseServerResponse) Reset() {
	*x = GetGlobalReverseServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facades_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalReverseServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalReverseServerResponse) ProtoMessage() {}

func (x *GetGlobalReverseServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_facades_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalReverseServerResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalReverseServerResponse) Descriptor() ([]byte, []int) {
	return file_facades_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetGlobalReverseServerResponse) GetPublicReverseIP() string {
	if x != nil {
		return x.PublicReverseIP
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetPublicReversePort() int32 {
	if x != nil {
		return x.PublicReversePort
	}
	return 0
}

func (x *GetGlobalReverseServerResponse) GetLocalReverseAddr() string {
	if x != nil {
		return x.LocalReverseAddr
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetLocalReversePort() int32 {
	if x != nil {
		return x.LocalReversePort
	}
	return 0
}

var File_facades_api_proto protoreflect.FileDescriptor

var file_facades_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79,
	0x73, 0x6f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x73, 0x55, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0xa4, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x4e,
	0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44,
	0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22,
	0xa3, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x48, 0x0a, 0x13, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52,
	0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x22, 0x46, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x4f, 0x0a, 0x1a, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x50,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x50, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x32, 0xdb, 0x04,
	0x0a, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x41, 0x70, 0x69, 0x12, 0x3a, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x29, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54,
	0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f,
	0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_facades_api_proto_rawDescOnce sync.Once
	file_facades_api_proto_rawDescData = file_facades_api_proto_rawDesc
)

func file_facades_api_proto_rawDescGZIP() []byte {
	file_facades_api_proto_rawDescOnce.Do(func() {
		file_facades_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_facades_api_proto_rawDescData)
	})
	return file_facades_api_proto_rawDescData
}

var file_facades_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_facades_api_proto_goTypes = []interface{}{
	(*RegisterFacadesHTTPResponse)(nil),          // 0: ypb.RegisterFacadesHTTPResponse
	(*RegisterFacadesHTTPRequest)(nil),           // 1: ypb.RegisterFacadesHTTPRequest
	(*StartFacadesParams)(nil),                   // 2: ypb.StartFacadesParams
	(*StartFacadesWithYsoParams)(nil),            // 3: ypb.StartFacadesWithYsoParams
	(*ApplyClassToFacadesParamsWithVerbose)(nil), // 4: ypb.ApplyClassToFacadesParamsWithVerbose
	(*BytesToBase64Request)(nil),                 // 5: ypb.BytesToBase64Request
	(*BytesToBase64Response)(nil),                // 6: ypb.BytesToBase64Response
	(*ConfigGlobalReverseParams)(nil),            // 7: ypb.ConfigGlobalReverseParams
	(*NetInterface)(nil),                         // 8: ypb.NetInterface
	(*AvailableLocalAddrResponse)(nil),           // 9: ypb.AvailableLocalAddrResponse
	(*GetGlobalReverseServerResponse)(nil),       // 10: ypb.GetGlobalReverseServerResponse
	(*GetTunnelServerExternalIPParams)(nil),      // 11: ypb.GetTunnelServerExternalIPParams
	(*YsoOptionsRequest)(nil),                    // 12: ypb.YsoOptionsRequest
	(*YsoOptionsRequerstWithVerbose)(nil),        // 13: ypb.YsoOptionsRequerstWithVerbose
	(*Empty)(nil),                                // 14: ypb.Empty
	(*ExecResult)(nil),                           // 15: ypb.ExecResult
}
var file_facades_api_proto_depIdxs = []int32{
	11, // 0: ypb.StartFacadesParams.ConnectParam:type_name -> ypb.GetTunnelServerExternalIPParams
	11, // 1: ypb.StartFacadesWithYsoParams.BridgeParam:type_name -> ypb.GetTunnelServerExternalIPParams
	12, // 2: ypb.StartFacadesWithYsoParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequest
	13, // 3: ypb.ApplyClassToFacadesParamsWithVerbose.GenerateClassParams:type_name -> ypb.YsoOptionsRequerstWithVerbose
	11, // 4: ypb.ConfigGlobalReverseParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	8,  // 5: ypb.AvailableLocalAddrResponse.Interfaces:type_name -> ypb.NetInterface
	2,  // 6: ypb.FacadesApi.StartFacades:input_type -> ypb.StartFacadesParams
	3,  // 7: ypb.FacadesApi.StartFacadesWithYsoObject:input_type -> ypb.StartFacadesWithYsoParams
	4,  // 8: ypb.FacadesApi.ApplyClassToFacades:input_type -> ypb.ApplyClassToFacadesParamsWithVerbose
	5,  // 9: ypb.FacadesApi.BytesToBase64:input_type -> ypb.BytesToBase64Request
	7,  // 10: ypb.FacadesApi.ConfigGlobalReverse:input_type -> ypb.ConfigGlobalReverseParams
	14, // 11: ypb.FacadesApi.AvailableLocalAddr:input_type -> ypb.Empty
	14, // 12: ypb.FacadesApi.GetGlobalReverseServer:input_type -> ypb.Empty
	1,  // 13: ypb.FacadesApi.RegisterFacadesHTTP:input_type -> ypb.RegisterFacadesHTTPRequest
	15, // 14: ypb.FacadesApi.StartFacades:output_type -> ypb.ExecResult
	15, // 15: ypb.FacadesApi.StartFacadesWithYsoObject:output_type -> ypb.ExecResult
	14, // 16: ypb.FacadesApi.ApplyClassToFacades:output_type -> ypb.Empty
	6,  // 17: ypb.FacadesApi.BytesToBase64:output_type -> ypb.BytesToBase64Response
	14, // 18: ypb.FacadesApi.ConfigGlobalReverse:output_type -> ypb.Empty
	9,  // 19: ypb.FacadesApi.AvailableLocalAddr:output_type -> ypb.AvailableLocalAddrResponse
	10, // 20: ypb.FacadesApi.GetGlobalReverseServer:output_type -> ypb.GetGlobalReverseServerResponse
	0,  // 21: ypb.FacadesApi.RegisterFacadesHTTP:output_type -> ypb.RegisterFacadesHTTPResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_facades_api_proto_init() }
func file_facades_api_proto_init() {
	if File_facades_api_proto != nil {
		return
	}
	file_message_api_proto_init()
	file_tunnel_api_proto_init()
	file_ysoserial_go_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_facades_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesWithYsoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyClassToFacadesParamsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGlobalReverseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableLocalAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facades_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalReverseServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_facades_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_facades_api_proto_goTypes,
		DependencyIndexes: file_facades_api_proto_depIdxs,
		MessageInfos:      file_facades_api_proto_msgTypes,
	}.Build()
	File_facades_api_proto = out.File
	file_facades_api_proto_rawDesc = nil
	file_facades_api_proto_goTypes = nil
	file_facades_api_proto_depIdxs = nil
}
