// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: cve_api.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CWEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CWE               string   `protobuf:"bytes,1,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh            string   `protobuf:"bytes,3,opt,name=NameZh,proto3" json:"NameZh,omitempty"` //  repeated CWEDetail InterTo = 4;
	Status            string   `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Stable            bool     `protobuf:"varint,6,opt,name=Stable,proto3" json:"Stable,omitempty"`
	Incomplete        bool     `protobuf:"varint,7,opt,name=Incomplete,proto3" json:"Incomplete,omitempty"`
	Description       string   `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh     string   `protobuf:"bytes,9,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	LongDescription   string   `protobuf:"bytes,10,opt,name=LongDescription,proto3" json:"LongDescription,omitempty"`
	LongDescriptionZh string   `protobuf:"bytes,11,opt,name=LongDescriptionZh,proto3" json:"LongDescriptionZh,omitempty"`
	RelativeLanguage  []string `protobuf:"bytes,12,rep,name=RelativeLanguage,proto3" json:"RelativeLanguage,omitempty"`
	Solution          string   `protobuf:"bytes,13,opt,name=Solution,proto3" json:"Solution,omitempty"`
	RelativeCVE       []string `protobuf:"bytes,14,rep,name=RelativeCVE,proto3" json:"RelativeCVE,omitempty"`
}

func (x *CWEDetail) Reset() {
	*x = CWEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWEDetail) ProtoMessage() {}

func (x *CWEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWEDetail.ProtoReflect.Descriptor instead.
func (*CWEDetail) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{0}
}

func (x *CWEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CWEDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CWEDetail) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CWEDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CWEDetail) GetStable() bool {
	if x != nil {
		return x.Stable
	}
	return false
}

func (x *CWEDetail) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *CWEDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CWEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *CWEDetail) GetLongDescriptionZh() string {
	if x != nil {
		return x.LongDescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetRelativeLanguage() []string {
	if x != nil {
		return x.RelativeLanguage
	}
	return nil
}

func (x *CWEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CWEDetail) GetRelativeCVE() []string {
	if x != nil {
		return x.RelativeCVE
	}
	return nil
}

type CVEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE                     string  `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	DescriptionZh           string  `protobuf:"bytes,2,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	DescriptionOrigin       string  `protobuf:"bytes,3,opt,name=DescriptionOrigin,proto3" json:"DescriptionOrigin,omitempty"`
	Title                   string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Solution                string  `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	References              string  `protobuf:"bytes,6,opt,name=References,proto3" json:"References,omitempty"`
	AccessVector            string  `protobuf:"bytes,7,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	AccessComplexity        string  `protobuf:"bytes,8,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	Authentication          string  `protobuf:"bytes,9,opt,name=Authentication,proto3" json:"Authentication,omitempty"`
	ConfidentialityImpact   string  `protobuf:"bytes,10,opt,name=ConfidentialityImpact,proto3" json:"ConfidentialityImpact,omitempty"`
	IntegrityImpact         string  `protobuf:"bytes,11,opt,name=IntegrityImpact,proto3" json:"IntegrityImpact,omitempty"`
	AvailabilityImpact      string  `protobuf:"bytes,12,opt,name=AvailabilityImpact,proto3" json:"AvailabilityImpact,omitempty"`
	Severity                string  `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	PublishedAt             int64   `protobuf:"varint,15,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	CWE                     string  `protobuf:"bytes,16,opt,name=CWE,proto3" json:"CWE,omitempty"`
	CVSSVersion             string  `protobuf:"bytes,17,opt,name=CVSSVersion,proto3" json:"CVSSVersion,omitempty"`
	CVSSVectorString        string  `protobuf:"bytes,18,opt,name=CVSSVectorString,proto3" json:"CVSSVectorString,omitempty"`
	BaseCVSSv2Score         float64 `protobuf:"fixed64,19,opt,name=BaseCVSSv2Score,proto3" json:"BaseCVSSv2Score,omitempty"`
	ExploitabilityScore     float64 `protobuf:"fixed64,20,opt,name=ExploitabilityScore,proto3" json:"ExploitabilityScore,omitempty"`
	ObtainAllPrivileged     bool    `protobuf:"varint,21,opt,name=ObtainAllPrivileged,proto3" json:"ObtainAllPrivileged,omitempty"`
	ObtainUserPrivileged    bool    `protobuf:"varint,22,opt,name=ObtainUserPrivileged,proto3" json:"ObtainUserPrivileged,omitempty"`
	ObtainOtherPrivileged   bool    `protobuf:"varint,23,opt,name=ObtainOtherPrivileged,proto3" json:"ObtainOtherPrivileged,omitempty"`
	UserInteractionRequired bool    `protobuf:"varint,24,opt,name=UserInteractionRequired,proto3" json:"UserInteractionRequired,omitempty"`
	Product                 string  `protobuf:"bytes,25,opt,name=Product,proto3" json:"Product,omitempty"`
	UpdatedAt               int64   `protobuf:"varint,26,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastModifiedData        int64   `protobuf:"varint,27,opt,name=LastModifiedData,proto3" json:"LastModifiedData,omitempty"`
}

func (x *CVEDetail) Reset() {
	*x = CVEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetail) ProtoMessage() {}

func (x *CVEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetail.ProtoReflect.Descriptor instead.
func (*CVEDetail) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{1}
}

func (x *CVEDetail) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *CVEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CVEDetail) GetDescriptionOrigin() string {
	if x != nil {
		return x.DescriptionOrigin
	}
	return ""
}

func (x *CVEDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CVEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CVEDetail) GetReferences() string {
	if x != nil {
		return x.References
	}
	return ""
}

func (x *CVEDetail) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *CVEDetail) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *CVEDetail) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *CVEDetail) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *CVEDetail) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *CVEDetail) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *CVEDetail) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CVEDetail) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *CVEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CVEDetail) GetCVSSVersion() string {
	if x != nil {
		return x.CVSSVersion
	}
	return ""
}

func (x *CVEDetail) GetCVSSVectorString() string {
	if x != nil {
		return x.CVSSVectorString
	}
	return ""
}

func (x *CVEDetail) GetBaseCVSSv2Score() float64 {
	if x != nil {
		return x.BaseCVSSv2Score
	}
	return 0
}

func (x *CVEDetail) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVEDetail) GetObtainAllPrivileged() bool {
	if x != nil {
		return x.ObtainAllPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainUserPrivileged() bool {
	if x != nil {
		return x.ObtainUserPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainOtherPrivileged() bool {
	if x != nil {
		return x.ObtainOtherPrivileged
	}
	return false
}

func (x *CVEDetail) GetUserInteractionRequired() bool {
	if x != nil {
		return x.UserInteractionRequired
	}
	return false
}

func (x *CVEDetail) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CVEDetail) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CVEDetail) GetLastModifiedData() int64 {
	if x != nil {
		return x.LastModifiedData
	}
	return 0
}

type CVEDetailEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE *CVEDetail   `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	CWE []*CWEDetail `protobuf:"bytes,2,rep,name=CWE,proto3" json:"CWE,omitempty"`
}

func (x *CVEDetailEx) Reset() {
	*x = CVEDetailEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetailEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetailEx) ProtoMessage() {}

func (x *CVEDetailEx) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetailEx.ProtoReflect.Descriptor instead.
func (*CVEDetailEx) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{2}
}

func (x *CVEDetailEx) GetCVE() *CVEDetail {
	if x != nil {
		return x.CVE
	}
	return nil
}

func (x *CVEDetailEx) GetCWE() []*CWEDetail {
	if x != nil {
		return x.CWE
	}
	return nil
}

type GetCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE string `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
}

func (x *GetCVERequest) Reset() {
	*x = GetCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCVERequest) ProtoMessage() {}

func (x *GetCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCVERequest.ProtoReflect.Descriptor instead.
func (*GetCVERequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetCVERequest) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

type QueryCVEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*CVEDetail `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryCVEResponse) Reset() {
	*x = QueryCVEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVEResponse) ProtoMessage() {}

func (x *QueryCVEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVEResponse.ProtoReflect.Descriptor instead.
func (*QueryCVEResponse) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCVEResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVEResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCVEResponse) GetData() []*CVEDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// NETWORK/LOCAL/ADJACENT_NETWORK/PHYSICAL
	AccessVector string `protobuf:"bytes,2,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	// HIGH/MIDDLE/LOW
	AccessComplexity string  `protobuf:"bytes,3,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	CWE              string  `protobuf:"bytes,4,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Year             string  `protobuf:"bytes,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Severity         string  `protobuf:"bytes,6,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Score            float64 `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
	Product          string  `protobuf:"bytes,8,opt,name=Product,proto3" json:"Product,omitempty"`
	// by published_date
	AfterYear               string `protobuf:"bytes,9,opt,name=AfterYear,proto3" json:"AfterYear,omitempty"`
	ChineseTranslationFirst bool   `protobuf:"varint,10,opt,name=ChineseTranslationFirst,proto3" json:"ChineseTranslationFirst,omitempty"`
	Keywords                string `protobuf:"bytes,11,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
}

func (x *QueryCVERequest) Reset() {
	*x = QueryCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVERequest) ProtoMessage() {}

func (x *QueryCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVERequest.ProtoReflect.Descriptor instead.
func (*QueryCVERequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{5}
}

func (x *QueryCVERequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVERequest) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *QueryCVERequest) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *QueryCVERequest) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *QueryCVERequest) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *QueryCVERequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryCVERequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QueryCVERequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *QueryCVERequest) GetAfterYear() string {
	if x != nil {
		return x.AfterYear
	}
	return ""
}

func (x *QueryCVERequest) GetChineseTranslationFirst() bool {
	if x != nil {
		return x.ChineseTranslationFirst
	}
	return false
}

func (x *QueryCVERequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type ImportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ImportsProfileDatabaseRequest) Reset() {
	*x = ImportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ImportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{6}
}

func (x *ImportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type ExportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ExportsProfileDatabaseRequest) Reset() {
	*x = ExportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ExportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ExportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{7}
}

func (x *ExportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type UpdateCVEDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy               string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	JustUpdateLatestCVE bool   `protobuf:"varint,2,opt,name=JustUpdateLatestCVE,proto3" json:"JustUpdateLatestCVE,omitempty"`
}

func (x *UpdateCVEDatabaseRequest) Reset() {
	*x = UpdateCVEDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCVEDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCVEDatabaseRequest) ProtoMessage() {}

func (x *UpdateCVEDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCVEDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCVEDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCVEDatabaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateCVEDatabaseRequest) GetJustUpdateLatestCVE() bool {
	if x != nil {
		return x.JustUpdateLatestCVE
	}
	return false
}

type IsCVEDatabaseReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ShouldUpdate bool   `protobuf:"varint,3,opt,name=ShouldUpdate,proto3" json:"ShouldUpdate,omitempty"`
}

func (x *IsCVEDatabaseReadyResponse) Reset() {
	*x = IsCVEDatabaseReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyResponse) ProtoMessage() {}

func (x *IsCVEDatabaseReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyResponse.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyResponse) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{9}
}

func (x *IsCVEDatabaseReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsCVEDatabaseReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsCVEDatabaseReadyResponse) GetShouldUpdate() bool {
	if x != nil {
		return x.ShouldUpdate
	}
	return false
}

type IsCVEDatabaseReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCVEDatabaseReadyRequest) Reset() {
	*x = IsCVEDatabaseReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cve_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyRequest) ProtoMessage() {}

func (x *IsCVEDatabaseReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cve_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyRequest.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyRequest) Descriptor() ([]byte, []int) {
	return file_cve_api_proto_rawDescGZIP(), []int{10}
}

var File_cve_api_proto protoreflect.FileDescriptor

var file_cve_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x79, 0x70, 0x62, 0x1a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x03, 0x0a, 0x09, 0x43, 0x57, 0x45, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d,
	0x65, 0x5a, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5a, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x22, 0xff, 0x07,
	0x0a, 0x09, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43,
	0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5a, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x51, 0x0a, 0x0b, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x12, 0x20,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x43, 0x56, 0x45,
	0x12, 0x20, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x43,
	0x57, 0x45, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x43, 0x56, 0x45, 0x22, 0x79, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x56, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x56, 0x45, 0x22, 0x68, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x1b, 0x0a, 0x19, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xb1, 0x03, 0x0a,
	0x06, 0x43, 0x56, 0x45, 0x41, 0x70, 0x69, 0x12, 0x55, 0x0a, 0x12, 0x49, 0x73, 0x43, 0x56, 0x45,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x56, 0x45, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x78,
	0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cve_api_proto_rawDescOnce sync.Once
	file_cve_api_proto_rawDescData = file_cve_api_proto_rawDesc
)

func file_cve_api_proto_rawDescGZIP() []byte {
	file_cve_api_proto_rawDescOnce.Do(func() {
		file_cve_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cve_api_proto_rawDescData)
	})
	return file_cve_api_proto_rawDescData
}

var file_cve_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cve_api_proto_goTypes = []interface{}{
	(*CWEDetail)(nil),                     // 0: ypb.CWEDetail
	(*CVEDetail)(nil),                     // 1: ypb.CVEDetail
	(*CVEDetailEx)(nil),                   // 2: ypb.CVEDetailEx
	(*GetCVERequest)(nil),                 // 3: ypb.GetCVERequest
	(*QueryCVEResponse)(nil),              // 4: ypb.QueryCVEResponse
	(*QueryCVERequest)(nil),               // 5: ypb.QueryCVERequest
	(*ImportsProfileDatabaseRequest)(nil), // 6: ypb.ImportsProfileDatabaseRequest
	(*ExportsProfileDatabaseRequest)(nil), // 7: ypb.ExportsProfileDatabaseRequest
	(*UpdateCVEDatabaseRequest)(nil),      // 8: ypb.UpdateCVEDatabaseRequest
	(*IsCVEDatabaseReadyResponse)(nil),    // 9: ypb.IsCVEDatabaseReadyResponse
	(*IsCVEDatabaseReadyRequest)(nil),     // 10: ypb.IsCVEDatabaseReadyRequest
	(*Paging)(nil),                        // 11: ypb.Paging
	(*ExecResult)(nil),                    // 12: ypb.ExecResult
}
var file_cve_api_proto_depIdxs = []int32{
	1,  // 0: ypb.CVEDetailEx.CVE:type_name -> ypb.CVEDetail
	0,  // 1: ypb.CVEDetailEx.CWE:type_name -> ypb.CWEDetail
	11, // 2: ypb.QueryCVEResponse.Pagination:type_name -> ypb.Paging
	1,  // 3: ypb.QueryCVEResponse.Data:type_name -> ypb.CVEDetail
	11, // 4: ypb.QueryCVERequest.Pagination:type_name -> ypb.Paging
	10, // 5: ypb.CVEApi.IsCVEDatabaseReady:input_type -> ypb.IsCVEDatabaseReadyRequest
	8,  // 6: ypb.CVEApi.UpdateCVEDatabase:input_type -> ypb.UpdateCVEDatabaseRequest
	7,  // 7: ypb.CVEApi.ExportsProfileDatabase:input_type -> ypb.ExportsProfileDatabaseRequest
	6,  // 8: ypb.CVEApi.ImportsProfileDatabase:input_type -> ypb.ImportsProfileDatabaseRequest
	5,  // 9: ypb.CVEApi.QueryCVE:input_type -> ypb.QueryCVERequest
	3,  // 10: ypb.CVEApi.GetCVE:input_type -> ypb.GetCVERequest
	9,  // 11: ypb.CVEApi.IsCVEDatabaseReady:output_type -> ypb.IsCVEDatabaseReadyResponse
	12, // 12: ypb.CVEApi.UpdateCVEDatabase:output_type -> ypb.ExecResult
	12, // 13: ypb.CVEApi.ExportsProfileDatabase:output_type -> ypb.ExecResult
	12, // 14: ypb.CVEApi.ImportsProfileDatabase:output_type -> ypb.ExecResult
	4,  // 15: ypb.CVEApi.QueryCVE:output_type -> ypb.QueryCVEResponse
	2,  // 16: ypb.CVEApi.GetCVE:output_type -> ypb.CVEDetailEx
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_cve_api_proto_init() }
func file_cve_api_proto_init() {
	if File_cve_api_proto != nil {
		return
	}
	file_message_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cve_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetailEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCVEDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cve_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cve_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cve_api_proto_goTypes,
		DependencyIndexes: file_cve_api_proto_depIdxs,
		MessageInfos:      file_cve_api_proto_msgTypes,
	}.Build()
	File_cve_api_proto = out.File
	file_cve_api_proto_rawDesc = nil
	file_cve_api_proto_goTypes = nil
	file_cve_api_proto_depIdxs = nil
}
