// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: websocket.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

type WebsocketFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	WebsocketRequestHash string `protobuf:"bytes,3,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	FrameIndex           int64  `protobuf:"varint,4,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	FromServer           bool   `protobuf:"varint,5,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	MessageType          string `protobuf:"bytes,6,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Data                 []byte `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	DataSizeVerbose      string `protobuf:"bytes,8,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataLength           int64  `protobuf:"varint,9,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	DataVerbose          string `protobuf:"bytes,10,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	IsJson               bool   `protobuf:"varint,11,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf           bool   `protobuf:"varint,12,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
}

func (x *WebsocketFlow) Reset() {
	*x = WebsocketFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlow) ProtoMessage() {}

func (x *WebsocketFlow) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlow.ProtoReflect.Descriptor instead.
func (*WebsocketFlow) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{1}
}

func (x *WebsocketFlow) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebsocketFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebsocketFlow) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *WebsocketFlow) GetFrameIndex() int64 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *WebsocketFlow) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *WebsocketFlow) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WebsocketFlow) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlow) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *WebsocketFlow) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *WebsocketFlow) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

type WebsocketFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging          `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*WebsocketFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64            `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *WebsocketFlows) Reset() {
	*x = WebsocketFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlows) ProtoMessage() {}

func (x *WebsocketFlows) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlows.ProtoReflect.Descriptor instead.
func (*WebsocketFlows) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{2}
}

func (x *WebsocketFlows) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *WebsocketFlows) GetData() []*WebsocketFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlows) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string  `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	Pagination           *Paging `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = QueryWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{3}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ClientWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 切换协议是否成功
	SwitchProtocolSucceeded bool `protobuf:"varint,2,opt,name=SwitchProtocolSucceeded,proto3" json:"SwitchProtocolSucceeded,omitempty"`
	// 是 Websocket 数据帧吗？
	IsDataFrame bool `protobuf:"varint,1,opt,name=IsDataFrame,proto3" json:"IsDataFrame,omitempty"`
	// 服务器端返回还是？
	FromServer bool `protobuf:"varint,4,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	// 编码是啥样的？
	GuessEncode []string `protobuf:"bytes,5,rep,name=GuessEncode,proto3" json:"GuessEncode,omitempty"`
	// 其他状态，以及出现问题的原因
	StatusVerbose string `protobuf:"bytes,6,opt,name=StatusVerbose,proto3" json:"StatusVerbose,omitempty"`
	ReasonVerbose string `protobuf:"bytes,7,opt,name=ReasonVerbose,proto3" json:"ReasonVerbose,omitempty"`
	// DataLength
	DataLength     int64  `protobuf:"varint,8,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	Data           []byte `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	IsJson         bool   `protobuf:"varint,10,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf     bool   `protobuf:"varint,11,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
	DataFrameIndex int64  `protobuf:"varint,12,opt,name=DataFrameIndex,proto3" json:"DataFrameIndex,omitempty"`
	WebsocketHash  string `protobuf:"bytes,13,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 设置大小
	DataSizeVerbose string `protobuf:"bytes,14,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataVerbose     string `protobuf:"bytes,15,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	// 升级
	IsUpgradeResponse bool   `protobuf:"varint,16,opt,name=IsUpgradeResponse,proto3" json:"IsUpgradeResponse,omitempty"`
	UpgradeResponse   []byte `protobuf:"bytes,17,opt,name=UpgradeResponse,proto3" json:"UpgradeResponse,omitempty"`
}

func (x *ClientWebsocketResponse) Reset() {
	*x = ClientWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketResponse) ProtoMessage() {}

func (x *ClientWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ClientWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{4}
}

func (x *ClientWebsocketResponse) GetSwitchProtocolSucceeded() bool {
	if x != nil {
		return x.SwitchProtocolSucceeded
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsDataFrame() bool {
	if x != nil {
		return x.IsDataFrame
	}
	return false
}

func (x *ClientWebsocketResponse) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *ClientWebsocketResponse) GetGuessEncode() []string {
	if x != nil {
		return x.GuessEncode
	}
	return nil
}

func (x *ClientWebsocketResponse) GetStatusVerbose() string {
	if x != nil {
		return x.StatusVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetReasonVerbose() string {
	if x != nil {
		return x.ReasonVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *ClientWebsocketResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientWebsocketResponse) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

func (x *ClientWebsocketResponse) GetDataFrameIndex() int64 {
	if x != nil {
		return x.DataFrameIndex
	}
	return 0
}

func (x *ClientWebsocketResponse) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetIsUpgradeResponse() bool {
	if x != nil {
		return x.IsUpgradeResponse
	}
	return false
}

func (x *ClientWebsocketResponse) GetUpgradeResponse() []byte {
	if x != nil {
		return x.UpgradeResponse
	}
	return nil
}

type ClientWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTLS          bool   `protobuf:"varint,1,opt,name=IsTLS,proto3" json:"IsTLS,omitempty"`
	UpgradeRequest []byte `protobuf:"bytes,2,opt,name=UpgradeRequest,proto3" json:"UpgradeRequest,omitempty"`
	// 要发送到服务器的请求
	ToServer []byte   `protobuf:"bytes,3,opt,name=ToServer,proto3" json:"ToServer,omitempty"`
	Encode   []string `protobuf:"bytes,4,rep,name=Encode,proto3" json:"Encode,omitempty"`
	// 是否允许 fuzz 标签渲染，然后发送
	AllowToFuzz         bool   `protobuf:"varint,5,opt,name=AllowToFuzz,proto3" json:"AllowToFuzz,omitempty"`
	TotalTimeoutSeconds int64  `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Proxy               string `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ClientWebsocketRequest) Reset() {
	*x = ClientWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websocket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketRequest) ProtoMessage() {}

func (x *ClientWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ClientWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_websocket_proto_rawDescGZIP(), []int{5}
}

func (x *ClientWebsocketRequest) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *ClientWebsocketRequest) GetUpgradeRequest() []byte {
	if x != nil {
		return x.UpgradeRequest
	}
	return nil
}

func (x *ClientWebsocketRequest) GetToServer() []byte {
	if x != nil {
		return x.ToServer
	}
	return nil
}

func (x *ClientWebsocketRequest) GetEncode() []string {
	if x != nil {
		return x.Encode
	}
	return nil
}

func (x *ClientWebsocketRequest) GetAllowToFuzz() bool {
	if x != nil {
		return x.AllowToFuzz
	}
	return false
}

func (x *ClientWebsocketRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ClientWebsocketRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

var File_websocket_proto protoreflect.FileDescriptor

var file_websocket_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8b,
	0x03, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x7b, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe1, 0x04, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x75,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49,
	0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49,
	0x73, 0x54, 0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75,
	0x7a, 0x7a, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x32, 0x87, 0x03, 0x0a, 0x10, 0x57,
	0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x56, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x70, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_websocket_proto_rawDescOnce sync.Once
	file_websocket_proto_rawDescData = file_websocket_proto_rawDesc
)

func file_websocket_proto_rawDescGZIP() []byte {
	file_websocket_proto_rawDescOnce.Do(func() {
		file_websocket_proto_rawDescData = protoimpl.X.CompressGZIP(file_websocket_proto_rawDescData)
	})
	return file_websocket_proto_rawDescData
}

var file_websocket_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_websocket_proto_goTypes = []interface{}{
	(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil), // 0: ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*WebsocketFlow)(nil),  // 1: ypb.WebsocketFlow
	(*WebsocketFlows)(nil), // 2: ypb.WebsocketFlows
	(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil), // 3: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*ClientWebsocketResponse)(nil),                          // 4: ypb.ClientWebsocketResponse
	(*ClientWebsocketRequest)(nil),                           // 5: ypb.ClientWebsocketRequest
	(*Paging)(nil),                                           // 6: ypb.Paging
	(*Empty)(nil),                                            // 7: ypb.Empty
}
var file_websocket_proto_depIdxs = []int32{
	6, // 0: ypb.WebsocketFlows.Pagination:type_name -> ypb.Paging
	1, // 1: ypb.WebsocketFlows.Data:type_name -> ypb.WebsocketFlow
	6, // 2: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.Pagination:type_name -> ypb.Paging
	5, // 3: ypb.WebSocketService.CreateWebsocketFuzzer:input_type -> ypb.ClientWebsocketRequest
	3, // 4: ypb.WebSocketService.QueryWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	0, // 5: ypb.WebSocketService.DeleteWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	7, // 6: ypb.WebSocketService.DeleteWebsocketFlowAll:input_type -> ypb.Empty
	4, // 7: ypb.WebSocketService.CreateWebsocketFuzzer:output_type -> ypb.ClientWebsocketResponse
	2, // 8: ypb.WebSocketService.QueryWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.WebsocketFlows
	7, // 9: ypb.WebSocketService.DeleteWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.Empty
	7, // 10: ypb.WebSocketService.DeleteWebsocketFlowAll:output_type -> ypb.Empty
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_websocket_proto_init() }
func file_websocket_proto_init() {
	if File_websocket_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_websocket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websocket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websocket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websocket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websocket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websocket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_websocket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_websocket_proto_goTypes,
		DependencyIndexes: file_websocket_proto_depIdxs,
		MessageInfos:      file_websocket_proto_msgTypes,
	}.Build()
	File_websocket_proto = out.File
	file_websocket_proto_rawDesc = nil
	file_websocket_proto_goTypes = nil
	file_websocket_proto_depIdxs = nil
}
