// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: http_flow.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=Raw,proto3" json:"Raw,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{0}
}

func (x *Bytes) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type GetHTTPPacketBodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet    string `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	PacketRaw []byte `protobuf:"bytes,2,opt,name=PacketRaw,proto3" json:"PacketRaw,omitempty"`
}

func (x *GetHTTPPacketBodyRequest) Reset() {
	*x = GetHTTPPacketBodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPPacketBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPPacketBodyRequest) ProtoMessage() {}

func (x *GetHTTPPacketBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPPacketBodyRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPPacketBodyRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{1}
}

func (x *GetHTTPPacketBodyRequest) GetPacket() string {
	if x != nil {
		return x.Packet
	}
	return ""
}

func (x *GetHTTPPacketBodyRequest) GetPacketRaw() []byte {
	if x != nil {
		return x.PacketRaw
	}
	return nil
}

type DownloadBodyByHTTPFlowIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DownloadBodyByHTTPFlowIDRequest) Reset() {
	*x = DownloadBodyByHTTPFlowIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBodyByHTTPFlowIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBodyByHTTPFlowIDRequest) ProtoMessage() {}

func (x *DownloadBodyByHTTPFlowIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBodyByHTTPFlowIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadBodyByHTTPFlowIDRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{2}
}

func (x *DownloadBodyByHTTPFlowIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TagsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TagsCode) Reset() {
	*x = TagsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsCode) ProtoMessage() {}

func (x *TagsCode) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsCode.ProtoReflect.Descriptor instead.
func (*TagsCode) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{3}
}

func (x *TagsCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsCode) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type HTTPFlowsFieldGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags       []*TagsCode `protobuf:"bytes,1,rep,name=Tags,proto3" json:"Tags,omitempty"`
	StatusCode []*TagsCode `protobuf:"bytes,2,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *HTTPFlowsFieldGroupResponse) Reset() {
	*x = HTTPFlowsFieldGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupResponse) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{4}
}

func (x *HTTPFlowsFieldGroupResponse) GetTags() []*TagsCode {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HTTPFlowsFieldGroupResponse) GetStatusCode() []*TagsCode {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type HTTPFlowsFieldGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshRequest bool `protobuf:"varint,1,opt,name=RefreshRequest,proto3" json:"RefreshRequest,omitempty"`
}

func (x *HTTPFlowsFieldGroupRequest) Reset() {
	*x = HTTPFlowsFieldGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupRequest) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{5}
}

func (x *HTTPFlowsFieldGroupRequest) GetRefreshRequest() bool {
	if x != nil {
		return x.RefreshRequest
	}
	return false
}

type SetTagForHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash      string                  `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags      []string                `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CheckTags []*CheckSetTagsHTTPFlow `protobuf:"bytes,4,rep,name=CheckTags,proto3" json:"CheckTags,omitempty"`
}

func (x *SetTagForHTTPFlowRequest) Reset() {
	*x = SetTagForHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagForHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForHTTPFlowRequest) ProtoMessage() {}

func (x *SetTagForHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*SetTagForHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{6}
}

func (x *SetTagForHTTPFlowRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForHTTPFlowRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SetTagForHTTPFlowRequest) GetCheckTags() []*CheckSetTagsHTTPFlow {
	if x != nil {
		return x.CheckTags
	}
	return nil
}

type CheckSetTagsHTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags []string `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *CheckSetTagsHTTPFlow) Reset() {
	*x = CheckSetTagsHTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSetTagsHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSetTagsHTTPFlow) ProtoMessage() {}

func (x *CheckSetTagsHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSetTagsHTTPFlow.ProtoReflect.Descriptor instead.
func (*CheckSetTagsHTTPFlow) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{7}
}

func (x *CheckSetTagsHTTPFlow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckSetTagsHTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckSetTagsHTTPFlow) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type QueryHTTPFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging     `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*HTTPFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64       `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryHTTPFlowResponse) Reset() {
	*x = QueryHTTPFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowResponse) ProtoMessage() {}

func (x *QueryHTTPFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowResponse) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{8}
}

func (x *QueryHTTPFlowResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination        *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	SourceType        string  `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Methods           string  `protobuf:"bytes,3,opt,name=Methods,proto3" json:"Methods,omitempty"`
	SearchURL         string  `protobuf:"bytes,4,opt,name=SearchURL,proto3" json:"SearchURL,omitempty"`
	StatusCode        string  `protobuf:"bytes,5,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	HaveCommonParams  bool    `protobuf:"varint,6,opt,name=HaveCommonParams,proto3" json:"HaveCommonParams,omitempty"`
	HaveBody          bool    `protobuf:"varint,7,opt,name=HaveBody,proto3" json:"HaveBody,omitempty"`
	SearchContentType string  `protobuf:"bytes,9,opt,name=SearchContentType,proto3" json:"SearchContentType,omitempty"`
	// 一般用于查询增量，查询所有更新前的内容
	BeforeUpdatedAt int64  `protobuf:"varint,10,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt  int64  `protobuf:"varint,11,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId         int64  `protobuf:"varint,12,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId        int64  `protobuf:"varint,13,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	Keyword         string `protobuf:"bytes,14,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyWebsocket   bool   `protobuf:"varint,15,opt,name=OnlyWebsocket,proto3" json:"OnlyWebsocket,omitempty"`
	// 查询包含在这个 URL 中的搜索结果
	IncludeInUrl []string `protobuf:"bytes,16,rep,name=IncludeInUrl,proto3" json:"IncludeInUrl,omitempty"`
	// 不查询当前 URL 中的结果
	ExcludeInUrl []string `protobuf:"bytes,17,rep,name=ExcludeInUrl,proto3" json:"ExcludeInUrl,omitempty"`
	// 仅查看当前 IP 对应的结果或不包含
	IncludeInIP      []string `protobuf:"bytes,18,rep,name=IncludeInIP,proto3" json:"IncludeInIP,omitempty"`
	ExcludeInIP      []string `protobuf:"bytes,19,rep,name=ExcludeInIP,proto3" json:"ExcludeInIP,omitempty"`
	ExcludeId        []int64  `protobuf:"varint,20,rep,packed,name=ExcludeId,proto3" json:"ExcludeId,omitempty"`
	IncludeInWhere   []string `protobuf:"bytes,21,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	IncludeId        []int64  `protobuf:"varint,22,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
	Tags             []string `protobuf:"bytes,23,rep,name=Tags,proto3" json:"Tags,omitempty"`
	HaveParamsTotal  string   `protobuf:"bytes,24,opt,name=HaveParamsTotal,proto3" json:"HaveParamsTotal,omitempty"`
	Color            []string `protobuf:"bytes,25,rep,name=Color,proto3" json:"Color,omitempty"`
	OffsetId         int64    `protobuf:"varint,26,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	AfterBodyLength  int64    `protobuf:"varint,27,opt,name=AfterBodyLength,proto3" json:"AfterBodyLength,omitempty"`
	BeforeBodyLength int64    `protobuf:"varint,28,opt,name=BeforeBodyLength,proto3" json:"BeforeBodyLength,omitempty"`
	IsWebsocket      string   `protobuf:"bytes,29,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
}

func (x *QueryHTTPFlowRequest) Reset() {
	*x = QueryHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowRequest) ProtoMessage() {}

func (x *QueryHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{9}
}

func (x *QueryHTTPFlowRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetMethods() string {
	if x != nil {
		return x.Methods
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetSearchURL() string {
	if x != nil {
		return x.SearchURL
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetHaveCommonParams() bool {
	if x != nil {
		return x.HaveCommonParams
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetHaveBody() bool {
	if x != nil {
		return x.HaveBody
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetSearchContentType() string {
	if x != nil {
		return x.SearchContentType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetOnlyWebsocket() bool {
	if x != nil {
		return x.OnlyWebsocket
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludeInUrl() []string {
	if x != nil {
		return x.IncludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInUrl() []string {
	if x != nil {
		return x.ExcludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInIP() []string {
	if x != nil {
		return x.IncludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInIP() []string {
	if x != nil {
		return x.ExcludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeId() []int64 {
	if x != nil {
		return x.ExcludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHaveParamsTotal() string {
	if x != nil {
		return x.HaveParamsTotal
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetColor() []string {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterBodyLength() int64 {
	if x != nil {
		return x.AfterBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeBodyLength() int64 {
	if x != nil {
		return x.BeforeBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetIsWebsocket() string {
	if x != nil {
		return x.IsWebsocket
	}
	return ""
}

type DeleteHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll      bool                  `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Id             []int64               `protobuf:"varint,4,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	ItemHash       []string              `protobuf:"bytes,2,rep,name=ItemHash,proto3" json:"ItemHash,omitempty"`
	URLPrefix      string                `protobuf:"bytes,3,opt,name=URLPrefix,proto3" json:"URLPrefix,omitempty"`
	Filter         *QueryHTTPFlowRequest `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	URLPrefixBatch []string              `protobuf:"bytes,6,rep,name=URLPrefixBatch,proto3" json:"URLPrefixBatch,omitempty"`
}

func (x *DeleteHTTPFlowRequest) Reset() {
	*x = DeleteHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPFlowRequest) ProtoMessage() {}

func (x *DeleteHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteHTTPFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHTTPFlowRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetItemHash() []string {
	if x != nil {
		return x.ItemHash
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefix() string {
	if x != nil {
		return x.URLPrefix
	}
	return ""
}

func (x *DeleteHTTPFlowRequest) GetFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefixBatch() []string {
	if x != nil {
		return x.URLPrefixBatch
	}
	return nil
}

type QueryHTTPFlowsIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeInWhere []string `protobuf:"bytes,1,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	SourceType     string   `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
}

func (x *QueryHTTPFlowsIdsRequest) Reset() {
	*x = QueryHTTPFlowsIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsRequest) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{11}
}

func (x *QueryHTTPFlowsIdsRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowsIdsRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type QueryHTTPFlowsIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryHTTPFlowsIdsResponse) Reset() {
	*x = QueryHTTPFlowsIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsResponse) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{12}
}

func (x *QueryHTTPFlowsIdsResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetHTTPFlowByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *GetHTTPFlowByIdsRequest) Reset() {
	*x = GetHTTPFlowByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdsRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdsRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{13}
}

func (x *GetHTTPFlowByIdsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetHTTPFlowByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHTTPFlowByIdRequest) Reset() {
	*x = GetHTTPFlowByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{14}
}

func (x *GetHTTPFlowByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHTTPFlowByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *GetHTTPFlowByHashRequest) Reset() {
	*x = GetHTTPFlowByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByHashRequest) ProtoMessage() {}

func (x *GetHTTPFlowByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByHashRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByHashRequest) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{15}
}

func (x *GetHTTPFlowByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type FuzzableParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     string `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	ParamName    string `protobuf:"bytes,2,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	OriginValue  []byte `protobuf:"bytes,3,opt,name=OriginValue,proto3" json:"OriginValue,omitempty"`
	AutoTemplate []byte `protobuf:"bytes,4,opt,name=AutoTemplate,proto3" json:"AutoTemplate,omitempty"`
	IsHTTPS      bool   `protobuf:"varint,5,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
}

func (x *FuzzableParam) Reset() {
	*x = FuzzableParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzableParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzableParam) ProtoMessage() {}

func (x *FuzzableParam) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzableParam.ProtoReflect.Descriptor instead.
func (*FuzzableParam) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{16}
}

func (x *FuzzableParam) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FuzzableParam) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *FuzzableParam) GetOriginValue() []byte {
	if x != nil {
		return x.OriginValue
	}
	return nil
}

func (x *FuzzableParam) GetAutoTemplate() []byte {
	if x != nil {
		return x.AutoTemplate
	}
	return nil
}

func (x *FuzzableParam) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type HTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHTTPS            bool             `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Url                string           `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	RequestHeader      []*HTTPHeader    `protobuf:"bytes,4,rep,name=RequestHeader,proto3" json:"RequestHeader,omitempty"`
	Request            []byte           `protobuf:"bytes,5,opt,name=Request,proto3" json:"Request,omitempty"`
	ResponseHeader     []*HTTPHeader    `protobuf:"bytes,6,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty"`
	Response           []byte           `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
	SourceType         string           `protobuf:"bytes,8,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Path               string           `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	Method             string           `protobuf:"bytes,10,opt,name=Method,proto3" json:"Method,omitempty"`
	BodyLength         int64            `protobuf:"varint,11,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	BodySizeVerbose    string           `protobuf:"bytes,19,opt,name=BodySizeVerbose,proto3" json:"BodySizeVerbose,omitempty"`
	RequestLength      int64            `protobuf:"varint,31,opt,name=RequestLength,proto3" json:"RequestLength,omitempty"`          // 设置 Request Body 长度
	RequestSizeVerbose string           `protobuf:"bytes,32,opt,name=RequestSizeVerbose,proto3" json:"RequestSizeVerbose,omitempty"` // 设置 Request
	ContentType        string           `protobuf:"bytes,12,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	StatusCode         int64            `protobuf:"varint,13,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	GetParamsTotal     int64            `protobuf:"varint,14,opt,name=GetParamsTotal,proto3" json:"GetParamsTotal,omitempty"`
	PostParamsTotal    int64            `protobuf:"varint,15,opt,name=PostParamsTotal,proto3" json:"PostParamsTotal,omitempty"`
	CookieParamsTotal  int64            `protobuf:"varint,22,opt,name=CookieParamsTotal,proto3" json:"CookieParamsTotal,omitempty"`
	UpdatedAt          int64            `protobuf:"varint,16,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt          int64            `protobuf:"varint,17,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Hash               string           `protobuf:"bytes,18,opt,name=Hash,proto3" json:"Hash,omitempty"`
	GetParams          []*FuzzableParam `protobuf:"bytes,20,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	PostParams         []*FuzzableParam `protobuf:"bytes,21,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	CookieParams       []*FuzzableParam `protobuf:"bytes,23,rep,name=CookieParams,proto3" json:"CookieParams,omitempty"`
	HostPort           string           `protobuf:"bytes,24,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	IPAddress          string           `protobuf:"bytes,25,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	HtmlTitle          string           `protobuf:"bytes,26,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Tags               string           `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	NoFixContentLength bool             `protobuf:"varint,28,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	Id                 uint64           `protobuf:"varint,29,opt,name=Id,proto3" json:"Id,omitempty"`
	// websocket 相关字段
	IsWebsocket   bool   `protobuf:"varint,30,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	WebsocketHash string `protobuf:"bytes,33,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	// 一般这不是无损的情况，会涉及到用户 Copy Paste 直接 Body 的需求
	InvalidForUTF8Request  bool   `protobuf:"varint,34,opt,name=InvalidForUTF8Request,proto3" json:"InvalidForUTF8Request,omitempty"`
	InvalidForUTF8Response bool   `protobuf:"varint,35,opt,name=InvalidForUTF8Response,proto3" json:"InvalidForUTF8Response,omitempty"`
	RawRequestBodyBase64   string `protobuf:"bytes,36,opt,name=RawRequestBodyBase64,proto3" json:"RawRequestBodyBase64,omitempty"`
	RawResponseBodyBase64  string `protobuf:"bytes,37,opt,name=RawResponseBodyBase64,proto3" json:"RawResponseBodyBase64,omitempty"`
	// 可以安全的传输到 Fuzzer 的 HTTPRequest
	SafeHTTPRequest string `protobuf:"bytes,38,opt,name=SafeHTTPRequest,proto3" json:"SafeHTTPRequest,omitempty"`
	// 在完全数据下，可加载 Domain 和 RootDomain 还有 Json
	Domains     []string `protobuf:"bytes,40,rep,name=Domains,proto3" json:"Domains,omitempty"`
	RootDomains []string `protobuf:"bytes,41,rep,name=RootDomains,proto3" json:"RootDomains,omitempty"`
	JsonObjects []string `protobuf:"bytes,42,rep,name=JsonObjects,proto3" json:"JsonObjects,omitempty"`
}

func (x *HTTPFlow) Reset() {
	*x = HTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlow) ProtoMessage() {}

func (x *HTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlow.ProtoReflect.Descriptor instead.
func (*HTTPFlow) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{17}
}

func (x *HTTPFlow) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPFlow) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPFlow) GetRequestHeader() []*HTTPHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *HTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPFlow) GetResponseHeader() []*HTTPHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *HTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPFlow) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *HTTPFlow) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPFlow) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPFlow) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *HTTPFlow) GetBodySizeVerbose() string {
	if x != nil {
		return x.BodySizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetRequestLength() int64 {
	if x != nil {
		return x.RequestLength
	}
	return 0
}

func (x *HTTPFlow) GetRequestSizeVerbose() string {
	if x != nil {
		return x.RequestSizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HTTPFlow) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPFlow) GetGetParamsTotal() int64 {
	if x != nil {
		return x.GetParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetPostParamsTotal() int64 {
	if x != nil {
		return x.PostParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetCookieParamsTotal() int64 {
	if x != nil {
		return x.CookieParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HTTPFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HTTPFlow) GetGetParams() []*FuzzableParam {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPFlow) GetPostParams() []*FuzzableParam {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPFlow) GetCookieParams() []*FuzzableParam {
	if x != nil {
		return x.CookieParams
	}
	return nil
}

func (x *HTTPFlow) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *HTTPFlow) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *HTTPFlow) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *HTTPFlow) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *HTTPFlow) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *HTTPFlow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlow) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *HTTPFlow) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *HTTPFlow) GetInvalidForUTF8Request() bool {
	if x != nil {
		return x.InvalidForUTF8Request
	}
	return false
}

func (x *HTTPFlow) GetInvalidForUTF8Response() bool {
	if x != nil {
		return x.InvalidForUTF8Response
	}
	return false
}

func (x *HTTPFlow) GetRawRequestBodyBase64() string {
	if x != nil {
		return x.RawRequestBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetRawResponseBodyBase64() string {
	if x != nil {
		return x.RawResponseBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetSafeHTTPRequest() string {
	if x != nil {
		return x.SafeHTTPRequest
	}
	return ""
}

func (x *HTTPFlow) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *HTTPFlow) GetRootDomains() []string {
	if x != nil {
		return x.RootDomains
	}
	return nil
}

func (x *HTTPFlow) GetJsonObjects() []string {
	if x != nil {
		return x.JsonObjects
	}
	return nil
}

type HTTPFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *HTTPFlows) Reset() {
	*x = HTTPFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlows) ProtoMessage() {}

func (x *HTTPFlows) ProtoReflect() protoreflect.Message {
	mi := &file_http_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlows.ProtoReflect.Descriptor instead.
func (*HTTPFlows) Descriptor() ([]byte, []int) {
	return file_http_flow_proto_rawDescGZIP(), []int{18}
}

func (x *HTTPFlows) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_http_flow_proto protoreflect.FileDescriptor

var file_http_flow_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77,
	0x22, 0x50, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x61, 0x77, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6f, 0x0a,
	0x1b, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x2d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44,
	0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46,
	0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xd1, 0x07, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x48,
	0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x49, 0x50, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x52, 0x4c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x52,
	0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x52,
	0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x62, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x49, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa9, 0x01,
	0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0xcc, 0x0b, 0x0a, 0x08, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42,
	0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0c,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f,
	0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x61,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x32, 0xa8, 0x06, 0x0a, 0x0f, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x40,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x47, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44,
	0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_http_flow_proto_rawDescOnce sync.Once
	file_http_flow_proto_rawDescData = file_http_flow_proto_rawDesc
)

func file_http_flow_proto_rawDescGZIP() []byte {
	file_http_flow_proto_rawDescOnce.Do(func() {
		file_http_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_http_flow_proto_rawDescData)
	})
	return file_http_flow_proto_rawDescData
}

var file_http_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_http_flow_proto_goTypes = []interface{}{
	(*Bytes)(nil),                           // 0: ypb.Bytes
	(*GetHTTPPacketBodyRequest)(nil),        // 1: ypb.GetHTTPPacketBodyRequest
	(*DownloadBodyByHTTPFlowIDRequest)(nil), // 2: ypb.DownloadBodyByHTTPFlowIDRequest
	(*TagsCode)(nil),                        // 3: ypb.TagsCode
	(*HTTPFlowsFieldGroupResponse)(nil),     // 4: ypb.HTTPFlowsFieldGroupResponse
	(*HTTPFlowsFieldGroupRequest)(nil),      // 5: ypb.HTTPFlowsFieldGroupRequest
	(*SetTagForHTTPFlowRequest)(nil),        // 6: ypb.SetTagForHTTPFlowRequest
	(*CheckSetTagsHTTPFlow)(nil),            // 7: ypb.CheckSetTagsHTTPFlow
	(*QueryHTTPFlowResponse)(nil),           // 8: ypb.QueryHTTPFlowResponse
	(*QueryHTTPFlowRequest)(nil),            // 9: ypb.QueryHTTPFlowRequest
	(*DeleteHTTPFlowRequest)(nil),           // 10: ypb.DeleteHTTPFlowRequest
	(*QueryHTTPFlowsIdsRequest)(nil),        // 11: ypb.QueryHTTPFlowsIdsRequest
	(*QueryHTTPFlowsIdsResponse)(nil),       // 12: ypb.QueryHTTPFlowsIdsResponse
	(*GetHTTPFlowByIdsRequest)(nil),         // 13: ypb.GetHTTPFlowByIdsRequest
	(*GetHTTPFlowByIdRequest)(nil),          // 14: ypb.GetHTTPFlowByIdRequest
	(*GetHTTPFlowByHashRequest)(nil),        // 15: ypb.GetHTTPFlowByHashRequest
	(*FuzzableParam)(nil),                   // 16: ypb.FuzzableParam
	(*HTTPFlow)(nil),                        // 17: ypb.HTTPFlow
	(*HTTPFlows)(nil),                       // 18: ypb.HTTPFlows
	(*Paging)(nil),                          // 19: ypb.Paging
	(*HTTPHeader)(nil),                      // 20: ypb.HTTPHeader
	(*Empty)(nil),                           // 21: ypb.Empty
}
var file_http_flow_proto_depIdxs = []int32{
	3,  // 0: ypb.HTTPFlowsFieldGroupResponse.Tags:type_name -> ypb.TagsCode
	3,  // 1: ypb.HTTPFlowsFieldGroupResponse.StatusCode:type_name -> ypb.TagsCode
	7,  // 2: ypb.SetTagForHTTPFlowRequest.CheckTags:type_name -> ypb.CheckSetTagsHTTPFlow
	19, // 3: ypb.QueryHTTPFlowResponse.Pagination:type_name -> ypb.Paging
	17, // 4: ypb.QueryHTTPFlowResponse.Data:type_name -> ypb.HTTPFlow
	19, // 5: ypb.QueryHTTPFlowRequest.Pagination:type_name -> ypb.Paging
	9,  // 6: ypb.DeleteHTTPFlowRequest.Filter:type_name -> ypb.QueryHTTPFlowRequest
	17, // 7: ypb.QueryHTTPFlowsIdsResponse.Data:type_name -> ypb.HTTPFlow
	20, // 8: ypb.HTTPFlow.RequestHeader:type_name -> ypb.HTTPHeader
	20, // 9: ypb.HTTPFlow.ResponseHeader:type_name -> ypb.HTTPHeader
	16, // 10: ypb.HTTPFlow.GetParams:type_name -> ypb.FuzzableParam
	16, // 11: ypb.HTTPFlow.PostParams:type_name -> ypb.FuzzableParam
	16, // 12: ypb.HTTPFlow.CookieParams:type_name -> ypb.FuzzableParam
	17, // 13: ypb.HTTPFlows.Data:type_name -> ypb.HTTPFlow
	15, // 14: ypb.HTTPFlowService.GetHTTPFlowByHash:input_type -> ypb.GetHTTPFlowByHashRequest
	14, // 15: ypb.HTTPFlowService.GetHTTPFlowById:input_type -> ypb.GetHTTPFlowByIdRequest
	13, // 16: ypb.HTTPFlowService.GetHTTPFlowByIds:input_type -> ypb.GetHTTPFlowByIdsRequest
	9,  // 17: ypb.HTTPFlowService.QueryHTTPFlows:input_type -> ypb.QueryHTTPFlowRequest
	10, // 18: ypb.HTTPFlowService.DeleteHTTPFlows:input_type -> ypb.DeleteHTTPFlowRequest
	6,  // 19: ypb.HTTPFlowService.SetTagForHTTPFlow:input_type -> ypb.SetTagForHTTPFlowRequest
	11, // 20: ypb.HTTPFlowService.QueryHTTPFlowsIds:input_type -> ypb.QueryHTTPFlowsIdsRequest
	5,  // 21: ypb.HTTPFlowService.HTTPFlowsFieldGroup:input_type -> ypb.HTTPFlowsFieldGroupRequest
	2,  // 22: ypb.HTTPFlowService.GetRequestBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	2,  // 23: ypb.HTTPFlowService.GetResponseBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	1,  // 24: ypb.HTTPFlowService.GetHTTPPacketBody:input_type -> ypb.GetHTTPPacketBodyRequest
	17, // 25: ypb.HTTPFlowService.GetHTTPFlowByHash:output_type -> ypb.HTTPFlow
	17, // 26: ypb.HTTPFlowService.GetHTTPFlowById:output_type -> ypb.HTTPFlow
	18, // 27: ypb.HTTPFlowService.GetHTTPFlowByIds:output_type -> ypb.HTTPFlows
	8,  // 28: ypb.HTTPFlowService.QueryHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	21, // 29: ypb.HTTPFlowService.DeleteHTTPFlows:output_type -> ypb.Empty
	21, // 30: ypb.HTTPFlowService.SetTagForHTTPFlow:output_type -> ypb.Empty
	12, // 31: ypb.HTTPFlowService.QueryHTTPFlowsIds:output_type -> ypb.QueryHTTPFlowsIdsResponse
	4,  // 32: ypb.HTTPFlowService.HTTPFlowsFieldGroup:output_type -> ypb.HTTPFlowsFieldGroupResponse
	0,  // 33: ypb.HTTPFlowService.GetRequestBodyByHTTPFlowID:output_type -> ypb.Bytes
	0,  // 34: ypb.HTTPFlowService.GetResponseBodyByHTTPFlowID:output_type -> ypb.Bytes
	0,  // 35: ypb.HTTPFlowService.GetHTTPPacketBody:output_type -> ypb.Bytes
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_http_flow_proto_init() }
func file_http_flow_proto_init() {
	if File_http_flow_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_http_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPPacketBodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBodyByHTTPFlowIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagForHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSetTagsHTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzableParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_http_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_http_flow_proto_goTypes,
		DependencyIndexes: file_http_flow_proto_depIdxs,
		MessageInfos:      file_http_flow_proto_msgTypes,
	}.Build()
	File_http_flow_proto = out.File
	file_http_flow_proto_rawDesc = nil
	file_http_flow_proto_goTypes = nil
	file_http_flow_proto_depIdxs = nil
}
