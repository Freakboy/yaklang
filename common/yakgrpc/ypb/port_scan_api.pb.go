// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: port_scan_api.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LastRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecordPtr        int64   `protobuf:"varint,1,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Percent              float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,3,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	ExtraInfo            string  `protobuf:"bytes,4,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
}

func (x *LastRecord) Reset() {
	*x = LastRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastRecord) ProtoMessage() {}

func (x *LastRecord) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastRecord.ProtoReflect.Descriptor instead.
func (*LastRecord) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{0}
}

func (x *LastRecord) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *LastRecord) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LastRecord) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *LastRecord) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type SimpleDetectUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64   `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
}

func (x *SimpleDetectUnfinishedTask) Reset() {
	*x = SimpleDetectUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleDetectUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectUnfinishedTask) ProtoMessage() {}

func (x *SimpleDetectUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectUnfinishedTask.ProtoReflect.Descriptor instead.
func (*SimpleDetectUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleDetectUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

type GetSimpleDetectUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*SimpleDetectUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetSimpleDetectUnfinishedTaskResponse) Reset() {
	*x = GetSimpleDetectUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimpleDetectUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetSimpleDetectUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimpleDetectUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetSimpleDetectUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) GetTasks() []*SimpleDetectUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type RecordPortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecord      *LastRecord      `protobuf:"bytes,1,opt,name=LastRecord,proto3" json:"LastRecord,omitempty"`
	PortScanRequest *PortScanRequest `protobuf:"bytes,2,opt,name=PortScanRequest,proto3" json:"PortScanRequest,omitempty"`
}

func (x *RecordPortScanRequest) Reset() {
	*x = RecordPortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPortScanRequest) ProtoMessage() {}

func (x *RecordPortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPortScanRequest.ProtoReflect.Descriptor instead.
func (*RecordPortScanRequest) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{3}
}

func (x *RecordPortScanRequest) GetLastRecord() *LastRecord {
	if x != nil {
		return x.LastRecord
	}
	return nil
}

func (x *RecordPortScanRequest) GetPortScanRequest() *PortScanRequest {
	if x != nil {
		return x.PortScanRequest
	}
	return nil
}

type PortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets    string   `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	Ports      string   `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Mode       string   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Proto      []string `protobuf:"bytes,4,rep,name=Proto,proto3" json:"Proto,omitempty"`
	Concurrent int64    `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 主动发包模式
	Active bool `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	// service / web / all
	FingerprintMode string `protobuf:"bytes,7,opt,name=FingerprintMode,proto3" json:"FingerprintMode,omitempty"`
	// 保存数据库
	SaveToDB bool `protobuf:"varint,8,opt,name=SaveToDB,proto3" json:"SaveToDB,omitempty"`
	// 保存已经关闭的端口
	SaveClosedPorts bool `protobuf:"varint,9,opt,name=SaveClosedPorts,proto3" json:"SaveClosedPorts,omitempty"`
	// 上传扫描目标为文件
	TargetsFile string `protobuf:"bytes,10,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	// 设置上传的文件
	ScriptNames []string `protobuf:"bytes,11,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// TCPProxy
	Proxy []string `protobuf:"bytes,12,rep,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 设置单次探测超时时间
	ProbeTimeout float64 `protobuf:"fixed64,13,opt,name=ProbeTimeout,proto3" json:"ProbeTimeout,omitempty"`
	// ProbeMax 设置指纹探测条数
	ProbeMax int32 `protobuf:"varint,14,opt,name=ProbeMax,proto3" json:"ProbeMax,omitempty"`
	// 启用 C 段扫描
	EnableCClassScan bool `protobuf:"varint,15,opt,name=EnableCClassScan,proto3" json:"EnableCClassScan,omitempty"`
	// HostAlive Scan
	SkippedHostAliveScan bool    `protobuf:"varint,16,opt,name=SkippedHostAliveScan,proto3" json:"SkippedHostAliveScan,omitempty"`
	HostAliveTimeout     float64 `protobuf:"fixed64,17,opt,name=HostAliveTimeout,proto3" json:"HostAliveTimeout,omitempty"`
	HostAliveConcurrent  int32   `protobuf:"varint,18,opt,name=HostAliveConcurrent,proto3" json:"HostAliveConcurrent,omitempty"`
	HostAlivePorts       string  `protobuf:"bytes,19,opt,name=HostAlivePorts,proto3" json:"HostAlivePorts,omitempty"`
	// 排除端口与主机
	ExcludeHosts string `protobuf:"bytes,20,opt,name=ExcludeHosts,proto3" json:"ExcludeHosts,omitempty"`
	ExcludePorts string `protobuf:"bytes,21,opt,name=ExcludePorts,proto3" json:"ExcludePorts,omitempty"`
	// EnableBasicCrawler
	// 是否启用基础爬虫，以及基础爬虫最多几个请求？
	EnableBasicCrawler     bool  `protobuf:"varint,22,opt,name=EnableBasicCrawler,proto3" json:"EnableBasicCrawler,omitempty"`
	BasicCrawlerRequestMax int64 `protobuf:"varint,23,opt,name=BasicCrawlerRequestMax,proto3" json:"BasicCrawlerRequestMax,omitempty"`
	// SYN Concurrent
	// 简易设置 SYN 每秒并发
	SynConcurrent int64  `protobuf:"varint,24,opt,name=SynConcurrent,proto3" json:"SynConcurrent,omitempty"`
	TaskName      string `protobuf:"bytes,25,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *PortScanRequest) Reset() {
	*x = PortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortScanRequest) ProtoMessage() {}

func (x *PortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortScanRequest.ProtoReflect.Descriptor instead.
func (*PortScanRequest) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{4}
}

func (x *PortScanRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *PortScanRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *PortScanRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PortScanRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *PortScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *PortScanRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PortScanRequest) GetFingerprintMode() string {
	if x != nil {
		return x.FingerprintMode
	}
	return ""
}

func (x *PortScanRequest) GetSaveToDB() bool {
	if x != nil {
		return x.SaveToDB
	}
	return false
}

func (x *PortScanRequest) GetSaveClosedPorts() bool {
	if x != nil {
		return x.SaveClosedPorts
	}
	return false
}

func (x *PortScanRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *PortScanRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *PortScanRequest) GetProxy() []string {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *PortScanRequest) GetProbeTimeout() float64 {
	if x != nil {
		return x.ProbeTimeout
	}
	return 0
}

func (x *PortScanRequest) GetProbeMax() int32 {
	if x != nil {
		return x.ProbeMax
	}
	return 0
}

func (x *PortScanRequest) GetEnableCClassScan() bool {
	if x != nil {
		return x.EnableCClassScan
	}
	return false
}

func (x *PortScanRequest) GetSkippedHostAliveScan() bool {
	if x != nil {
		return x.SkippedHostAliveScan
	}
	return false
}

func (x *PortScanRequest) GetHostAliveTimeout() float64 {
	if x != nil {
		return x.HostAliveTimeout
	}
	return 0
}

func (x *PortScanRequest) GetHostAliveConcurrent() int32 {
	if x != nil {
		return x.HostAliveConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetHostAlivePorts() string {
	if x != nil {
		return x.HostAlivePorts
	}
	return ""
}

func (x *PortScanRequest) GetExcludeHosts() string {
	if x != nil {
		return x.ExcludeHosts
	}
	return ""
}

func (x *PortScanRequest) GetExcludePorts() string {
	if x != nil {
		return x.ExcludePorts
	}
	return ""
}

func (x *PortScanRequest) GetEnableBasicCrawler() bool {
	if x != nil {
		return x.EnableBasicCrawler
	}
	return false
}

func (x *PortScanRequest) GetBasicCrawlerRequestMax() int64 {
	if x != nil {
		return x.BasicCrawlerRequestMax
	}
	return 0
}

func (x *PortScanRequest) GetSynConcurrent() int64 {
	if x != nil {
		return x.SynConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type SimpleDetectYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = SimpleDetectYakScriptUnfinishedTaskByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_scan_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_port_scan_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*SimpleDetectYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_port_scan_api_proto_rawDescGZIP(), []int{5}
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

var File_port_scan_api_proto protoreflect.FileDescriptor

var file_port_scan_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x79, 0x70, 0x62, 0x1a, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdc,
	0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x22, 0x5e, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x88, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x07, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x6f, 0x44, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x6f, 0x44, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x2f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x69, 0x64, 0x32, 0xad, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x10, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x16,
	0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x76, 0x0a, 0x22, 0x50, 0x6f, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_port_scan_api_proto_rawDescOnce sync.Once
	file_port_scan_api_proto_rawDescData = file_port_scan_api_proto_rawDesc
)

func file_port_scan_api_proto_rawDescGZIP() []byte {
	file_port_scan_api_proto_rawDescOnce.Do(func() {
		file_port_scan_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_port_scan_api_proto_rawDescData)
	})
	return file_port_scan_api_proto_rawDescData
}

var file_port_scan_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_port_scan_api_proto_goTypes = []interface{}{
	(*LastRecord)(nil),                                      // 0: ypb.LastRecord
	(*SimpleDetectUnfinishedTask)(nil),                      // 1: ypb.SimpleDetectUnfinishedTask
	(*GetSimpleDetectUnfinishedTaskResponse)(nil),           // 2: ypb.GetSimpleDetectUnfinishedTaskResponse
	(*RecordPortScanRequest)(nil),                           // 3: ypb.RecordPortScanRequest
	(*PortScanRequest)(nil),                                 // 4: ypb.PortScanRequest
	(*SimpleDetectYakScriptUnfinishedTaskByUidRequest)(nil), // 5: ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	(*Empty)(nil),                                           // 6: ypb.Empty
	(*ExecResult)(nil),                                      // 7: ypb.ExecResult
	(*SimpleScript)(nil),                                    // 8: ypb.SimpleScript
}
var file_port_scan_api_proto_depIdxs = []int32{
	1,  // 0: ypb.GetSimpleDetectUnfinishedTaskResponse.Tasks:type_name -> ypb.SimpleDetectUnfinishedTask
	0,  // 1: ypb.RecordPortScanRequest.LastRecord:type_name -> ypb.LastRecord
	4,  // 2: ypb.RecordPortScanRequest.PortScanRequest:type_name -> ypb.PortScanRequest
	4,  // 3: ypb.PortScanApi.PortScan:input_type -> ypb.PortScanRequest
	6,  // 4: ypb.PortScanApi.ViewPortScanCode:input_type -> ypb.Empty
	3,  // 5: ypb.PortScanApi.SimpleDetect:input_type -> ypb.RecordPortScanRequest
	3,  // 6: ypb.PortScanApi.SaveCancelSimpleDetect:input_type -> ypb.RecordPortScanRequest
	6,  // 7: ypb.PortScanApi.GetSimpleDetectUnfinishedTask:input_type -> ypb.Empty
	5,  // 8: ypb.PortScanApi.GetSimpleDetectUnfinishedTaskByUid:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	5,  // 9: ypb.PortScanApi.PopSimpleDetectUnfinishedTaskByUid:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	5,  // 10: ypb.PortScanApi.RecoverSimpleDetectUnfinishedTask:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	7,  // 11: ypb.PortScanApi.PortScan:output_type -> ypb.ExecResult
	8,  // 12: ypb.PortScanApi.ViewPortScanCode:output_type -> ypb.SimpleScript
	7,  // 13: ypb.PortScanApi.SimpleDetect:output_type -> ypb.ExecResult
	6,  // 14: ypb.PortScanApi.SaveCancelSimpleDetect:output_type -> ypb.Empty
	2,  // 15: ypb.PortScanApi.GetSimpleDetectUnfinishedTask:output_type -> ypb.GetSimpleDetectUnfinishedTaskResponse
	3,  // 16: ypb.PortScanApi.GetSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	3,  // 17: ypb.PortScanApi.PopSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	7,  // 18: ypb.PortScanApi.RecoverSimpleDetectUnfinishedTask:output_type -> ypb.ExecResult
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_port_scan_api_proto_init() }
func file_port_scan_api_proto_init() {
	if File_port_scan_api_proto != nil {
		return
	}
	file_message_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_port_scan_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_scan_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleDetectUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_scan_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimpleDetectUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_scan_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_scan_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_scan_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_port_scan_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_port_scan_api_proto_goTypes,
		DependencyIndexes: file_port_scan_api_proto_depIdxs,
		MessageInfos:      file_port_scan_api_proto_msgTypes,
	}.Build()
	File_port_scan_api_proto = out.File
	file_port_scan_api_proto_rawDesc = nil
	file_port_scan_api_proto_goTypes = nil
	file_port_scan_api_proto_depIdxs = nil
}
