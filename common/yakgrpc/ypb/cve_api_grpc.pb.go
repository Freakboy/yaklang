// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cve_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CVEApi_IsCVEDatabaseReady_FullMethodName     = "/ypb.CVEApi/IsCVEDatabaseReady"
	CVEApi_UpdateCVEDatabase_FullMethodName      = "/ypb.CVEApi/UpdateCVEDatabase"
	CVEApi_ExportsProfileDatabase_FullMethodName = "/ypb.CVEApi/ExportsProfileDatabase"
	CVEApi_ImportsProfileDatabase_FullMethodName = "/ypb.CVEApi/ImportsProfileDatabase"
	CVEApi_QueryCVE_FullMethodName               = "/ypb.CVEApi/QueryCVE"
	CVEApi_GetCVE_FullMethodName                 = "/ypb.CVEApi/GetCVE"
)

// CVEApiClient is the client API for CVEApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVEApiClient interface {
	// CVE
	IsCVEDatabaseReady(ctx context.Context, in *IsCVEDatabaseReadyRequest, opts ...grpc.CallOption) (*IsCVEDatabaseReadyResponse, error)
	UpdateCVEDatabase(ctx context.Context, in *UpdateCVEDatabaseRequest, opts ...grpc.CallOption) (CVEApi_UpdateCVEDatabaseClient, error)
	ExportsProfileDatabase(ctx context.Context, in *ExportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEApi_ExportsProfileDatabaseClient, error)
	ImportsProfileDatabase(ctx context.Context, in *ImportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEApi_ImportsProfileDatabaseClient, error)
	QueryCVE(ctx context.Context, in *QueryCVERequest, opts ...grpc.CallOption) (*QueryCVEResponse, error)
	GetCVE(ctx context.Context, in *GetCVERequest, opts ...grpc.CallOption) (*CVEDetailEx, error)
}

type cVEApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCVEApiClient(cc grpc.ClientConnInterface) CVEApiClient {
	return &cVEApiClient{cc}
}

func (c *cVEApiClient) IsCVEDatabaseReady(ctx context.Context, in *IsCVEDatabaseReadyRequest, opts ...grpc.CallOption) (*IsCVEDatabaseReadyResponse, error) {
	out := new(IsCVEDatabaseReadyResponse)
	err := c.cc.Invoke(ctx, CVEApi_IsCVEDatabaseReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVEApiClient) UpdateCVEDatabase(ctx context.Context, in *UpdateCVEDatabaseRequest, opts ...grpc.CallOption) (CVEApi_UpdateCVEDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEApi_ServiceDesc.Streams[0], CVEApi_UpdateCVEDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEApiUpdateCVEDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEApi_UpdateCVEDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEApiUpdateCVEDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEApiUpdateCVEDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEApiClient) ExportsProfileDatabase(ctx context.Context, in *ExportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEApi_ExportsProfileDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEApi_ServiceDesc.Streams[1], CVEApi_ExportsProfileDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEApiExportsProfileDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEApi_ExportsProfileDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEApiExportsProfileDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEApiExportsProfileDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEApiClient) ImportsProfileDatabase(ctx context.Context, in *ImportsProfileDatabaseRequest, opts ...grpc.CallOption) (CVEApi_ImportsProfileDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CVEApi_ServiceDesc.Streams[2], CVEApi_ImportsProfileDatabase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cVEApiImportsProfileDatabaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CVEApi_ImportsProfileDatabaseClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type cVEApiImportsProfileDatabaseClient struct {
	grpc.ClientStream
}

func (x *cVEApiImportsProfileDatabaseClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVEApiClient) QueryCVE(ctx context.Context, in *QueryCVERequest, opts ...grpc.CallOption) (*QueryCVEResponse, error) {
	out := new(QueryCVEResponse)
	err := c.cc.Invoke(ctx, CVEApi_QueryCVE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVEApiClient) GetCVE(ctx context.Context, in *GetCVERequest, opts ...grpc.CallOption) (*CVEDetailEx, error) {
	out := new(CVEDetailEx)
	err := c.cc.Invoke(ctx, CVEApi_GetCVE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CVEApiServer is the server API for CVEApi service.
// All implementations must embed UnimplementedCVEApiServer
// for forward compatibility
type CVEApiServer interface {
	// CVE
	IsCVEDatabaseReady(context.Context, *IsCVEDatabaseReadyRequest) (*IsCVEDatabaseReadyResponse, error)
	UpdateCVEDatabase(*UpdateCVEDatabaseRequest, CVEApi_UpdateCVEDatabaseServer) error
	ExportsProfileDatabase(*ExportsProfileDatabaseRequest, CVEApi_ExportsProfileDatabaseServer) error
	ImportsProfileDatabase(*ImportsProfileDatabaseRequest, CVEApi_ImportsProfileDatabaseServer) error
	QueryCVE(context.Context, *QueryCVERequest) (*QueryCVEResponse, error)
	GetCVE(context.Context, *GetCVERequest) (*CVEDetailEx, error)
	mustEmbedUnimplementedCVEApiServer()
}

// UnimplementedCVEApiServer must be embedded to have forward compatible implementations.
type UnimplementedCVEApiServer struct {
}

func (UnimplementedCVEApiServer) IsCVEDatabaseReady(context.Context, *IsCVEDatabaseReadyRequest) (*IsCVEDatabaseReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCVEDatabaseReady not implemented")
}
func (UnimplementedCVEApiServer) UpdateCVEDatabase(*UpdateCVEDatabaseRequest, CVEApi_UpdateCVEDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCVEDatabase not implemented")
}
func (UnimplementedCVEApiServer) ExportsProfileDatabase(*ExportsProfileDatabaseRequest, CVEApi_ExportsProfileDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportsProfileDatabase not implemented")
}
func (UnimplementedCVEApiServer) ImportsProfileDatabase(*ImportsProfileDatabaseRequest, CVEApi_ImportsProfileDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportsProfileDatabase not implemented")
}
func (UnimplementedCVEApiServer) QueryCVE(context.Context, *QueryCVERequest) (*QueryCVEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCVE not implemented")
}
func (UnimplementedCVEApiServer) GetCVE(context.Context, *GetCVERequest) (*CVEDetailEx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCVE not implemented")
}
func (UnimplementedCVEApiServer) mustEmbedUnimplementedCVEApiServer() {}

// UnsafeCVEApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVEApiServer will
// result in compilation errors.
type UnsafeCVEApiServer interface {
	mustEmbedUnimplementedCVEApiServer()
}

func RegisterCVEApiServer(s grpc.ServiceRegistrar, srv CVEApiServer) {
	s.RegisterService(&CVEApi_ServiceDesc, srv)
}

func _CVEApi_IsCVEDatabaseReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCVEDatabaseReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEApiServer).IsCVEDatabaseReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEApi_IsCVEDatabaseReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEApiServer).IsCVEDatabaseReady(ctx, req.(*IsCVEDatabaseReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CVEApi_UpdateCVEDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateCVEDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEApiServer).UpdateCVEDatabase(m, &cVEApiUpdateCVEDatabaseServer{stream})
}

type CVEApi_UpdateCVEDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEApiUpdateCVEDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEApiUpdateCVEDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEApi_ExportsProfileDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportsProfileDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEApiServer).ExportsProfileDatabase(m, &cVEApiExportsProfileDatabaseServer{stream})
}

type CVEApi_ExportsProfileDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEApiExportsProfileDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEApiExportsProfileDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEApi_ImportsProfileDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImportsProfileDatabaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVEApiServer).ImportsProfileDatabase(m, &cVEApiImportsProfileDatabaseServer{stream})
}

type CVEApi_ImportsProfileDatabaseServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type cVEApiImportsProfileDatabaseServer struct {
	grpc.ServerStream
}

func (x *cVEApiImportsProfileDatabaseServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CVEApi_QueryCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEApiServer).QueryCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEApi_QueryCVE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEApiServer).QueryCVE(ctx, req.(*QueryCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CVEApi_GetCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEApiServer).GetCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CVEApi_GetCVE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEApiServer).GetCVE(ctx, req.(*GetCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CVEApi_ServiceDesc is the grpc.ServiceDesc for CVEApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVEApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.CVEApi",
	HandlerType: (*CVEApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsCVEDatabaseReady",
			Handler:    _CVEApi_IsCVEDatabaseReady_Handler,
		},
		{
			MethodName: "QueryCVE",
			Handler:    _CVEApi_QueryCVE_Handler,
		},
		{
			MethodName: "GetCVE",
			Handler:    _CVEApi_GetCVE_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateCVEDatabase",
			Handler:       _CVEApi_UpdateCVEDatabase_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportsProfileDatabase",
			Handler:       _CVEApi_ExportsProfileDatabase_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportsProfileDatabase",
			Handler:       _CVEApi_ImportsProfileDatabase_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cve_api.proto",
}
