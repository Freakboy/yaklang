// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: facades.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FacadesService_StartFacades_FullMethodName              = "/ypb.FacadesService/StartFacades"
	FacadesService_StartFacadesWithYsoObject_FullMethodName = "/ypb.FacadesService/StartFacadesWithYsoObject"
	FacadesService_ApplyClassToFacades_FullMethodName       = "/ypb.FacadesService/ApplyClassToFacades"
	FacadesService_BytesToBase64_FullMethodName             = "/ypb.FacadesService/BytesToBase64"
	FacadesService_ConfigGlobalReverse_FullMethodName       = "/ypb.FacadesService/ConfigGlobalReverse"
	FacadesService_AvailableLocalAddr_FullMethodName        = "/ypb.FacadesService/AvailableLocalAddr"
	FacadesService_GetGlobalReverseServer_FullMethodName    = "/ypb.FacadesService/GetGlobalReverseServer"
	FacadesService_RegisterFacadesHTTP_FullMethodName       = "/ypb.FacadesService/RegisterFacadesHTTP"
)

// FacadesServiceClient is the client API for FacadesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacadesServiceClient interface {
	// RMI/DNSLog
	StartFacades(ctx context.Context, in *StartFacadesParams, opts ...grpc.CallOption) (FacadesService_StartFacadesClient, error)
	StartFacadesWithYsoObject(ctx context.Context, in *StartFacadesWithYsoParams, opts ...grpc.CallOption) (FacadesService_StartFacadesWithYsoObjectClient, error)
	ApplyClassToFacades(ctx context.Context, in *ApplyClassToFacadesParamsWithVerbose, opts ...grpc.CallOption) (*Empty, error)
	BytesToBase64(ctx context.Context, in *BytesToBase64Request, opts ...grpc.CallOption) (*BytesToBase64Response, error)
	ConfigGlobalReverse(ctx context.Context, in *ConfigGlobalReverseParams, opts ...grpc.CallOption) (FacadesService_ConfigGlobalReverseClient, error)
	AvailableLocalAddr(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableLocalAddrResponse, error)
	GetGlobalReverseServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGlobalReverseServerResponse, error)
	// 注册一个 Facades HTTP 响应
	RegisterFacadesHTTP(ctx context.Context, in *RegisterFacadesHTTPRequest, opts ...grpc.CallOption) (*RegisterFacadesHTTPResponse, error)
}

type facadesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacadesServiceClient(cc grpc.ClientConnInterface) FacadesServiceClient {
	return &facadesServiceClient{cc}
}

func (c *facadesServiceClient) StartFacades(ctx context.Context, in *StartFacadesParams, opts ...grpc.CallOption) (FacadesService_StartFacadesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FacadesService_ServiceDesc.Streams[0], FacadesService_StartFacades_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &facadesServiceStartFacadesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FacadesService_StartFacadesClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type facadesServiceStartFacadesClient struct {
	grpc.ClientStream
}

func (x *facadesServiceStartFacadesClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *facadesServiceClient) StartFacadesWithYsoObject(ctx context.Context, in *StartFacadesWithYsoParams, opts ...grpc.CallOption) (FacadesService_StartFacadesWithYsoObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &FacadesService_ServiceDesc.Streams[1], FacadesService_StartFacadesWithYsoObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &facadesServiceStartFacadesWithYsoObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FacadesService_StartFacadesWithYsoObjectClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type facadesServiceStartFacadesWithYsoObjectClient struct {
	grpc.ClientStream
}

func (x *facadesServiceStartFacadesWithYsoObjectClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *facadesServiceClient) ApplyClassToFacades(ctx context.Context, in *ApplyClassToFacadesParamsWithVerbose, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FacadesService_ApplyClassToFacades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadesServiceClient) BytesToBase64(ctx context.Context, in *BytesToBase64Request, opts ...grpc.CallOption) (*BytesToBase64Response, error) {
	out := new(BytesToBase64Response)
	err := c.cc.Invoke(ctx, FacadesService_BytesToBase64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadesServiceClient) ConfigGlobalReverse(ctx context.Context, in *ConfigGlobalReverseParams, opts ...grpc.CallOption) (FacadesService_ConfigGlobalReverseClient, error) {
	stream, err := c.cc.NewStream(ctx, &FacadesService_ServiceDesc.Streams[2], FacadesService_ConfigGlobalReverse_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &facadesServiceConfigGlobalReverseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FacadesService_ConfigGlobalReverseClient interface {
	Recv() (*Empty, error)
	grpc.ClientStream
}

type facadesServiceConfigGlobalReverseClient struct {
	grpc.ClientStream
}

func (x *facadesServiceConfigGlobalReverseClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *facadesServiceClient) AvailableLocalAddr(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableLocalAddrResponse, error) {
	out := new(AvailableLocalAddrResponse)
	err := c.cc.Invoke(ctx, FacadesService_AvailableLocalAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadesServiceClient) GetGlobalReverseServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGlobalReverseServerResponse, error) {
	out := new(GetGlobalReverseServerResponse)
	err := c.cc.Invoke(ctx, FacadesService_GetGlobalReverseServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadesServiceClient) RegisterFacadesHTTP(ctx context.Context, in *RegisterFacadesHTTPRequest, opts ...grpc.CallOption) (*RegisterFacadesHTTPResponse, error) {
	out := new(RegisterFacadesHTTPResponse)
	err := c.cc.Invoke(ctx, FacadesService_RegisterFacadesHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacadesServiceServer is the server API for FacadesService service.
// All implementations must embed UnimplementedFacadesServiceServer
// for forward compatibility
type FacadesServiceServer interface {
	// RMI/DNSLog
	StartFacades(*StartFacadesParams, FacadesService_StartFacadesServer) error
	StartFacadesWithYsoObject(*StartFacadesWithYsoParams, FacadesService_StartFacadesWithYsoObjectServer) error
	ApplyClassToFacades(context.Context, *ApplyClassToFacadesParamsWithVerbose) (*Empty, error)
	BytesToBase64(context.Context, *BytesToBase64Request) (*BytesToBase64Response, error)
	ConfigGlobalReverse(*ConfigGlobalReverseParams, FacadesService_ConfigGlobalReverseServer) error
	AvailableLocalAddr(context.Context, *Empty) (*AvailableLocalAddrResponse, error)
	GetGlobalReverseServer(context.Context, *Empty) (*GetGlobalReverseServerResponse, error)
	// 注册一个 Facades HTTP 响应
	RegisterFacadesHTTP(context.Context, *RegisterFacadesHTTPRequest) (*RegisterFacadesHTTPResponse, error)
	mustEmbedUnimplementedFacadesServiceServer()
}

// UnimplementedFacadesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFacadesServiceServer struct {
}

func (UnimplementedFacadesServiceServer) StartFacades(*StartFacadesParams, FacadesService_StartFacadesServer) error {
	return status.Errorf(codes.Unimplemented, "method StartFacades not implemented")
}
func (UnimplementedFacadesServiceServer) StartFacadesWithYsoObject(*StartFacadesWithYsoParams, FacadesService_StartFacadesWithYsoObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method StartFacadesWithYsoObject not implemented")
}
func (UnimplementedFacadesServiceServer) ApplyClassToFacades(context.Context, *ApplyClassToFacadesParamsWithVerbose) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyClassToFacades not implemented")
}
func (UnimplementedFacadesServiceServer) BytesToBase64(context.Context, *BytesToBase64Request) (*BytesToBase64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesToBase64 not implemented")
}
func (UnimplementedFacadesServiceServer) ConfigGlobalReverse(*ConfigGlobalReverseParams, FacadesService_ConfigGlobalReverseServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigGlobalReverse not implemented")
}
func (UnimplementedFacadesServiceServer) AvailableLocalAddr(context.Context, *Empty) (*AvailableLocalAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableLocalAddr not implemented")
}
func (UnimplementedFacadesServiceServer) GetGlobalReverseServer(context.Context, *Empty) (*GetGlobalReverseServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalReverseServer not implemented")
}
func (UnimplementedFacadesServiceServer) RegisterFacadesHTTP(context.Context, *RegisterFacadesHTTPRequest) (*RegisterFacadesHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFacadesHTTP not implemented")
}
func (UnimplementedFacadesServiceServer) mustEmbedUnimplementedFacadesServiceServer() {}

// UnsafeFacadesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacadesServiceServer will
// result in compilation errors.
type UnsafeFacadesServiceServer interface {
	mustEmbedUnimplementedFacadesServiceServer()
}

func RegisterFacadesServiceServer(s grpc.ServiceRegistrar, srv FacadesServiceServer) {
	s.RegisterService(&FacadesService_ServiceDesc, srv)
}

func _FacadesService_StartFacades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartFacadesParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FacadesServiceServer).StartFacades(m, &facadesServiceStartFacadesServer{stream})
}

type FacadesService_StartFacadesServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type facadesServiceStartFacadesServer struct {
	grpc.ServerStream
}

func (x *facadesServiceStartFacadesServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _FacadesService_StartFacadesWithYsoObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartFacadesWithYsoParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FacadesServiceServer).StartFacadesWithYsoObject(m, &facadesServiceStartFacadesWithYsoObjectServer{stream})
}

type FacadesService_StartFacadesWithYsoObjectServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type facadesServiceStartFacadesWithYsoObjectServer struct {
	grpc.ServerStream
}

func (x *facadesServiceStartFacadesWithYsoObjectServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _FacadesService_ApplyClassToFacades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyClassToFacadesParamsWithVerbose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadesServiceServer).ApplyClassToFacades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadesService_ApplyClassToFacades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadesServiceServer).ApplyClassToFacades(ctx, req.(*ApplyClassToFacadesParamsWithVerbose))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadesService_BytesToBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesToBase64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadesServiceServer).BytesToBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadesService_BytesToBase64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadesServiceServer).BytesToBase64(ctx, req.(*BytesToBase64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadesService_ConfigGlobalReverse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigGlobalReverseParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FacadesServiceServer).ConfigGlobalReverse(m, &facadesServiceConfigGlobalReverseServer{stream})
}

type FacadesService_ConfigGlobalReverseServer interface {
	Send(*Empty) error
	grpc.ServerStream
}

type facadesServiceConfigGlobalReverseServer struct {
	grpc.ServerStream
}

func (x *facadesServiceConfigGlobalReverseServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _FacadesService_AvailableLocalAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadesServiceServer).AvailableLocalAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadesService_AvailableLocalAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadesServiceServer).AvailableLocalAddr(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadesService_GetGlobalReverseServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadesServiceServer).GetGlobalReverseServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadesService_GetGlobalReverseServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadesServiceServer).GetGlobalReverseServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadesService_RegisterFacadesHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFacadesHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadesServiceServer).RegisterFacadesHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadesService_RegisterFacadesHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadesServiceServer).RegisterFacadesHTTP(ctx, req.(*RegisterFacadesHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacadesService_ServiceDesc is the grpc.ServiceDesc for FacadesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacadesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.FacadesService",
	HandlerType: (*FacadesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyClassToFacades",
			Handler:    _FacadesService_ApplyClassToFacades_Handler,
		},
		{
			MethodName: "BytesToBase64",
			Handler:    _FacadesService_BytesToBase64_Handler,
		},
		{
			MethodName: "AvailableLocalAddr",
			Handler:    _FacadesService_AvailableLocalAddr_Handler,
		},
		{
			MethodName: "GetGlobalReverseServer",
			Handler:    _FacadesService_GetGlobalReverseServer_Handler,
		},
		{
			MethodName: "RegisterFacadesHTTP",
			Handler:    _FacadesService_RegisterFacadesHTTP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartFacades",
			Handler:       _FacadesService_StartFacades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartFacadesWithYsoObject",
			Handler:       _FacadesService_StartFacadesWithYsoObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConfigGlobalReverse",
			Handler:       _FacadesService_ConfigGlobalReverse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "facades.proto",
}
