// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: misc.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiscService_ResetAndInvalidUserData_FullMethodName      = "/ypb.MiscService/ResetAndInvalidUserData"
	MiscService_IsPrivilegedForNetRaw_FullMethodName        = "/ypb.MiscService/IsPrivilegedForNetRaw"
	MiscService_PromotePermissionForUserPcap_FullMethodName = "/ypb.MiscService/PromotePermissionForUserPcap"
)

// MiscServiceClient is the client API for MiscService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiscServiceClient interface {
	// 重置到恢复出厂设置
	ResetAndInvalidUserData(ctx context.Context, in *ResetAndInvalidUserDataRequest, opts ...grpc.CallOption) (*Empty, error)
	// 判断当前引擎对网卡是否有操作权限？
	// 主要是能否发包等敏感操作
	// Windows 判断是否是管理员即可 I Am Admin
	// Linux 和 MacOS 应该尝试 pcap 打开网卡就行
	IsPrivilegedForNetRaw(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IsPrivilegedForNetRawResponse, error)
	PromotePermissionForUserPcap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type miscServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiscServiceClient(cc grpc.ClientConnInterface) MiscServiceClient {
	return &miscServiceClient{cc}
}

func (c *miscServiceClient) ResetAndInvalidUserData(ctx context.Context, in *ResetAndInvalidUserDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiscService_ResetAndInvalidUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miscServiceClient) IsPrivilegedForNetRaw(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IsPrivilegedForNetRawResponse, error) {
	out := new(IsPrivilegedForNetRawResponse)
	err := c.cc.Invoke(ctx, MiscService_IsPrivilegedForNetRaw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miscServiceClient) PromotePermissionForUserPcap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiscService_PromotePermissionForUserPcap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiscServiceServer is the server API for MiscService service.
// All implementations must embed UnimplementedMiscServiceServer
// for forward compatibility
type MiscServiceServer interface {
	// 重置到恢复出厂设置
	ResetAndInvalidUserData(context.Context, *ResetAndInvalidUserDataRequest) (*Empty, error)
	// 判断当前引擎对网卡是否有操作权限？
	// 主要是能否发包等敏感操作
	// Windows 判断是否是管理员即可 I Am Admin
	// Linux 和 MacOS 应该尝试 pcap 打开网卡就行
	IsPrivilegedForNetRaw(context.Context, *Empty) (*IsPrivilegedForNetRawResponse, error)
	PromotePermissionForUserPcap(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedMiscServiceServer()
}

// UnimplementedMiscServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiscServiceServer struct {
}

func (UnimplementedMiscServiceServer) ResetAndInvalidUserData(context.Context, *ResetAndInvalidUserDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAndInvalidUserData not implemented")
}
func (UnimplementedMiscServiceServer) IsPrivilegedForNetRaw(context.Context, *Empty) (*IsPrivilegedForNetRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPrivilegedForNetRaw not implemented")
}
func (UnimplementedMiscServiceServer) PromotePermissionForUserPcap(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotePermissionForUserPcap not implemented")
}
func (UnimplementedMiscServiceServer) mustEmbedUnimplementedMiscServiceServer() {}

// UnsafeMiscServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiscServiceServer will
// result in compilation errors.
type UnsafeMiscServiceServer interface {
	mustEmbedUnimplementedMiscServiceServer()
}

func RegisterMiscServiceServer(s grpc.ServiceRegistrar, srv MiscServiceServer) {
	s.RegisterService(&MiscService_ServiceDesc, srv)
}

func _MiscService_ResetAndInvalidUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAndInvalidUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiscServiceServer).ResetAndInvalidUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiscService_ResetAndInvalidUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiscServiceServer).ResetAndInvalidUserData(ctx, req.(*ResetAndInvalidUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiscService_IsPrivilegedForNetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiscServiceServer).IsPrivilegedForNetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiscService_IsPrivilegedForNetRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiscServiceServer).IsPrivilegedForNetRaw(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiscService_PromotePermissionForUserPcap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiscServiceServer).PromotePermissionForUserPcap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiscService_PromotePermissionForUserPcap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiscServiceServer).PromotePermissionForUserPcap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MiscService_ServiceDesc is the grpc.ServiceDesc for MiscService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiscService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.MiscService",
	HandlerType: (*MiscServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetAndInvalidUserData",
			Handler:    _MiscService_ResetAndInvalidUserData_Handler,
		},
		{
			MethodName: "IsPrivilegedForNetRaw",
			Handler:    _MiscService_IsPrivilegedForNetRaw_Handler,
		},
		{
			MethodName: "PromotePermissionForUserPcap",
			Handler:    _MiscService_PromotePermissionForUserPcap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "misc.proto",
}
