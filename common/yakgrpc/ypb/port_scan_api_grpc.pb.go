// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: port_scan_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortScanService_PortScan_FullMethodName                           = "/ypb.PortScanService/PortScan"
	PortScanService_ViewPortScanCode_FullMethodName                   = "/ypb.PortScanService/ViewPortScanCode"
	PortScanService_SimpleDetect_FullMethodName                       = "/ypb.PortScanService/SimpleDetect"
	PortScanService_SaveCancelSimpleDetect_FullMethodName             = "/ypb.PortScanService/SaveCancelSimpleDetect"
	PortScanService_GetSimpleDetectUnfinishedTask_FullMethodName      = "/ypb.PortScanService/GetSimpleDetectUnfinishedTask"
	PortScanService_GetSimpleDetectUnfinishedTaskByUid_FullMethodName = "/ypb.PortScanService/GetSimpleDetectUnfinishedTaskByUid"
	PortScanService_PopSimpleDetectUnfinishedTaskByUid_FullMethodName = "/ypb.PortScanService/PopSimpleDetectUnfinishedTaskByUid"
	PortScanService_RecoverSimpleDetectUnfinishedTask_FullMethodName  = "/ypb.PortScanService/RecoverSimpleDetectUnfinishedTask"
)

// PortScanServiceClient is the client API for PortScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortScanServiceClient interface {
	// 端口扫描的封装
	PortScan(ctx context.Context, in *PortScanRequest, opts ...grpc.CallOption) (PortScanService_PortScanClient, error)
	ViewPortScanCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleScript, error)
	SimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (PortScanService_SimpleDetectClient, error)
	SaveCancelSimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (*Empty, error)
	GetSimpleDetectUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSimpleDetectUnfinishedTaskResponse, error)
	GetSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error)
	PopSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error)
	RecoverSimpleDetectUnfinishedTask(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (PortScanService_RecoverSimpleDetectUnfinishedTaskClient, error)
}

type portScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortScanServiceClient(cc grpc.ClientConnInterface) PortScanServiceClient {
	return &portScanServiceClient{cc}
}

func (c *portScanServiceClient) PortScan(ctx context.Context, in *PortScanRequest, opts ...grpc.CallOption) (PortScanService_PortScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanService_ServiceDesc.Streams[0], PortScanService_PortScan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanServicePortScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanService_PortScanClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanServicePortScanClient struct {
	grpc.ClientStream
}

func (x *portScanServicePortScanClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portScanServiceClient) ViewPortScanCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleScript, error) {
	out := new(SimpleScript)
	err := c.cc.Invoke(ctx, PortScanService_ViewPortScanCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanServiceClient) SimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (PortScanService_SimpleDetectClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanService_ServiceDesc.Streams[1], PortScanService_SimpleDetect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanServiceSimpleDetectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanService_SimpleDetectClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanServiceSimpleDetectClient struct {
	grpc.ClientStream
}

func (x *portScanServiceSimpleDetectClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portScanServiceClient) SaveCancelSimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PortScanService_SaveCancelSimpleDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanServiceClient) GetSimpleDetectUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSimpleDetectUnfinishedTaskResponse, error) {
	out := new(GetSimpleDetectUnfinishedTaskResponse)
	err := c.cc.Invoke(ctx, PortScanService_GetSimpleDetectUnfinishedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanServiceClient) GetSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error) {
	out := new(RecordPortScanRequest)
	err := c.cc.Invoke(ctx, PortScanService_GetSimpleDetectUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanServiceClient) PopSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error) {
	out := new(RecordPortScanRequest)
	err := c.cc.Invoke(ctx, PortScanService_PopSimpleDetectUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanServiceClient) RecoverSimpleDetectUnfinishedTask(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (PortScanService_RecoverSimpleDetectUnfinishedTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanService_ServiceDesc.Streams[2], PortScanService_RecoverSimpleDetectUnfinishedTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanServiceRecoverSimpleDetectUnfinishedTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanService_RecoverSimpleDetectUnfinishedTaskClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanServiceRecoverSimpleDetectUnfinishedTaskClient struct {
	grpc.ClientStream
}

func (x *portScanServiceRecoverSimpleDetectUnfinishedTaskClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortScanServiceServer is the server API for PortScanService service.
// All implementations must embed UnimplementedPortScanServiceServer
// for forward compatibility
type PortScanServiceServer interface {
	// 端口扫描的封装
	PortScan(*PortScanRequest, PortScanService_PortScanServer) error
	ViewPortScanCode(context.Context, *Empty) (*SimpleScript, error)
	SimpleDetect(*RecordPortScanRequest, PortScanService_SimpleDetectServer) error
	SaveCancelSimpleDetect(context.Context, *RecordPortScanRequest) (*Empty, error)
	GetSimpleDetectUnfinishedTask(context.Context, *Empty) (*GetSimpleDetectUnfinishedTaskResponse, error)
	GetSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error)
	PopSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error)
	RecoverSimpleDetectUnfinishedTask(*SimpleDetectYakScriptUnfinishedTaskByUidRequest, PortScanService_RecoverSimpleDetectUnfinishedTaskServer) error
	mustEmbedUnimplementedPortScanServiceServer()
}

// UnimplementedPortScanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortScanServiceServer struct {
}

func (UnimplementedPortScanServiceServer) PortScan(*PortScanRequest, PortScanService_PortScanServer) error {
	return status.Errorf(codes.Unimplemented, "method PortScan not implemented")
}
func (UnimplementedPortScanServiceServer) ViewPortScanCode(context.Context, *Empty) (*SimpleScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPortScanCode not implemented")
}
func (UnimplementedPortScanServiceServer) SimpleDetect(*RecordPortScanRequest, PortScanService_SimpleDetectServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDetect not implemented")
}
func (UnimplementedPortScanServiceServer) SaveCancelSimpleDetect(context.Context, *RecordPortScanRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCancelSimpleDetect not implemented")
}
func (UnimplementedPortScanServiceServer) GetSimpleDetectUnfinishedTask(context.Context, *Empty) (*GetSimpleDetectUnfinishedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleDetectUnfinishedTask not implemented")
}
func (UnimplementedPortScanServiceServer) GetSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleDetectUnfinishedTaskByUid not implemented")
}
func (UnimplementedPortScanServiceServer) PopSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopSimpleDetectUnfinishedTaskByUid not implemented")
}
func (UnimplementedPortScanServiceServer) RecoverSimpleDetectUnfinishedTask(*SimpleDetectYakScriptUnfinishedTaskByUidRequest, PortScanService_RecoverSimpleDetectUnfinishedTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RecoverSimpleDetectUnfinishedTask not implemented")
}
func (UnimplementedPortScanServiceServer) mustEmbedUnimplementedPortScanServiceServer() {}

// UnsafePortScanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortScanServiceServer will
// result in compilation errors.
type UnsafePortScanServiceServer interface {
	mustEmbedUnimplementedPortScanServiceServer()
}

func RegisterPortScanServiceServer(s grpc.ServiceRegistrar, srv PortScanServiceServer) {
	s.RegisterService(&PortScanService_ServiceDesc, srv)
}

func _PortScanService_PortScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanServiceServer).PortScan(m, &portScanServicePortScanServer{stream})
}

type PortScanService_PortScanServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanServicePortScanServer struct {
	grpc.ServerStream
}

func (x *portScanServicePortScanServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PortScanService_ViewPortScanCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanServiceServer).ViewPortScanCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanService_ViewPortScanCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanServiceServer).ViewPortScanCode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanService_SimpleDetect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecordPortScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanServiceServer).SimpleDetect(m, &portScanServiceSimpleDetectServer{stream})
}

type PortScanService_SimpleDetectServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanServiceSimpleDetectServer struct {
	grpc.ServerStream
}

func (x *portScanServiceSimpleDetectServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PortScanService_SaveCancelSimpleDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPortScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanServiceServer).SaveCancelSimpleDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanService_SaveCancelSimpleDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanServiceServer).SaveCancelSimpleDetect(ctx, req.(*RecordPortScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanService_GetSimpleDetectUnfinishedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanServiceServer).GetSimpleDetectUnfinishedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanService_GetSimpleDetectUnfinishedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanServiceServer).GetSimpleDetectUnfinishedTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanService_GetSimpleDetectUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanServiceServer).GetSimpleDetectUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanService_GetSimpleDetectUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanServiceServer).GetSimpleDetectUnfinishedTaskByUid(ctx, req.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanService_PopSimpleDetectUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanServiceServer).PopSimpleDetectUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanService_PopSimpleDetectUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanServiceServer).PopSimpleDetectUnfinishedTaskByUid(ctx, req.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanService_RecoverSimpleDetectUnfinishedTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanServiceServer).RecoverSimpleDetectUnfinishedTask(m, &portScanServiceRecoverSimpleDetectUnfinishedTaskServer{stream})
}

type PortScanService_RecoverSimpleDetectUnfinishedTaskServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanServiceRecoverSimpleDetectUnfinishedTaskServer struct {
	grpc.ServerStream
}

func (x *portScanServiceRecoverSimpleDetectUnfinishedTaskServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

// PortScanService_ServiceDesc is the grpc.ServiceDesc for PortScanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortScanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.PortScanService",
	HandlerType: (*PortScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewPortScanCode",
			Handler:    _PortScanService_ViewPortScanCode_Handler,
		},
		{
			MethodName: "SaveCancelSimpleDetect",
			Handler:    _PortScanService_SaveCancelSimpleDetect_Handler,
		},
		{
			MethodName: "GetSimpleDetectUnfinishedTask",
			Handler:    _PortScanService_GetSimpleDetectUnfinishedTask_Handler,
		},
		{
			MethodName: "GetSimpleDetectUnfinishedTaskByUid",
			Handler:    _PortScanService_GetSimpleDetectUnfinishedTaskByUid_Handler,
		},
		{
			MethodName: "PopSimpleDetectUnfinishedTaskByUid",
			Handler:    _PortScanService_PopSimpleDetectUnfinishedTaskByUid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PortScan",
			Handler:       _PortScanService_PortScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimpleDetect",
			Handler:       _PortScanService_SimpleDetect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecoverSimpleDetectUnfinishedTask",
			Handler:       _PortScanService_RecoverSimpleDetectUnfinishedTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "port_scan_api.proto",
}
