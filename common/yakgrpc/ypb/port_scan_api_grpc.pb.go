// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: port_scan_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortScanApi_PortScan_FullMethodName                           = "/ypb.PortScanApi/PortScan"
	PortScanApi_ViewPortScanCode_FullMethodName                   = "/ypb.PortScanApi/ViewPortScanCode"
	PortScanApi_SimpleDetect_FullMethodName                       = "/ypb.PortScanApi/SimpleDetect"
	PortScanApi_SaveCancelSimpleDetect_FullMethodName             = "/ypb.PortScanApi/SaveCancelSimpleDetect"
	PortScanApi_GetSimpleDetectUnfinishedTask_FullMethodName      = "/ypb.PortScanApi/GetSimpleDetectUnfinishedTask"
	PortScanApi_GetSimpleDetectUnfinishedTaskByUid_FullMethodName = "/ypb.PortScanApi/GetSimpleDetectUnfinishedTaskByUid"
	PortScanApi_PopSimpleDetectUnfinishedTaskByUid_FullMethodName = "/ypb.PortScanApi/PopSimpleDetectUnfinishedTaskByUid"
	PortScanApi_RecoverSimpleDetectUnfinishedTask_FullMethodName  = "/ypb.PortScanApi/RecoverSimpleDetectUnfinishedTask"
)

// PortScanApiClient is the client API for PortScanApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortScanApiClient interface {
	// 端口扫描的封装
	PortScan(ctx context.Context, in *PortScanRequest, opts ...grpc.CallOption) (PortScanApi_PortScanClient, error)
	ViewPortScanCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleScript, error)
	SimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (PortScanApi_SimpleDetectClient, error)
	SaveCancelSimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (*Empty, error)
	GetSimpleDetectUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSimpleDetectUnfinishedTaskResponse, error)
	GetSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error)
	PopSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error)
	RecoverSimpleDetectUnfinishedTask(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (PortScanApi_RecoverSimpleDetectUnfinishedTaskClient, error)
}

type portScanApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortScanApiClient(cc grpc.ClientConnInterface) PortScanApiClient {
	return &portScanApiClient{cc}
}

func (c *portScanApiClient) PortScan(ctx context.Context, in *PortScanRequest, opts ...grpc.CallOption) (PortScanApi_PortScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanApi_ServiceDesc.Streams[0], PortScanApi_PortScan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanApiPortScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanApi_PortScanClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanApiPortScanClient struct {
	grpc.ClientStream
}

func (x *portScanApiPortScanClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portScanApiClient) ViewPortScanCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleScript, error) {
	out := new(SimpleScript)
	err := c.cc.Invoke(ctx, PortScanApi_ViewPortScanCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanApiClient) SimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (PortScanApi_SimpleDetectClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanApi_ServiceDesc.Streams[1], PortScanApi_SimpleDetect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanApiSimpleDetectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanApi_SimpleDetectClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanApiSimpleDetectClient struct {
	grpc.ClientStream
}

func (x *portScanApiSimpleDetectClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portScanApiClient) SaveCancelSimpleDetect(ctx context.Context, in *RecordPortScanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PortScanApi_SaveCancelSimpleDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanApiClient) GetSimpleDetectUnfinishedTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSimpleDetectUnfinishedTaskResponse, error) {
	out := new(GetSimpleDetectUnfinishedTaskResponse)
	err := c.cc.Invoke(ctx, PortScanApi_GetSimpleDetectUnfinishedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanApiClient) GetSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error) {
	out := new(RecordPortScanRequest)
	err := c.cc.Invoke(ctx, PortScanApi_GetSimpleDetectUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanApiClient) PopSimpleDetectUnfinishedTaskByUid(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (*RecordPortScanRequest, error) {
	out := new(RecordPortScanRequest)
	err := c.cc.Invoke(ctx, PortScanApi_PopSimpleDetectUnfinishedTaskByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanApiClient) RecoverSimpleDetectUnfinishedTask(ctx context.Context, in *SimpleDetectYakScriptUnfinishedTaskByUidRequest, opts ...grpc.CallOption) (PortScanApi_RecoverSimpleDetectUnfinishedTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortScanApi_ServiceDesc.Streams[2], PortScanApi_RecoverSimpleDetectUnfinishedTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portScanApiRecoverSimpleDetectUnfinishedTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortScanApi_RecoverSimpleDetectUnfinishedTaskClient interface {
	Recv() (*ExecResult, error)
	grpc.ClientStream
}

type portScanApiRecoverSimpleDetectUnfinishedTaskClient struct {
	grpc.ClientStream
}

func (x *portScanApiRecoverSimpleDetectUnfinishedTaskClient) Recv() (*ExecResult, error) {
	m := new(ExecResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortScanApiServer is the server API for PortScanApi service.
// All implementations must embed UnimplementedPortScanApiServer
// for forward compatibility
type PortScanApiServer interface {
	// 端口扫描的封装
	PortScan(*PortScanRequest, PortScanApi_PortScanServer) error
	ViewPortScanCode(context.Context, *Empty) (*SimpleScript, error)
	SimpleDetect(*RecordPortScanRequest, PortScanApi_SimpleDetectServer) error
	SaveCancelSimpleDetect(context.Context, *RecordPortScanRequest) (*Empty, error)
	GetSimpleDetectUnfinishedTask(context.Context, *Empty) (*GetSimpleDetectUnfinishedTaskResponse, error)
	GetSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error)
	PopSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error)
	RecoverSimpleDetectUnfinishedTask(*SimpleDetectYakScriptUnfinishedTaskByUidRequest, PortScanApi_RecoverSimpleDetectUnfinishedTaskServer) error
	mustEmbedUnimplementedPortScanApiServer()
}

// UnimplementedPortScanApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortScanApiServer struct {
}

func (UnimplementedPortScanApiServer) PortScan(*PortScanRequest, PortScanApi_PortScanServer) error {
	return status.Errorf(codes.Unimplemented, "method PortScan not implemented")
}
func (UnimplementedPortScanApiServer) ViewPortScanCode(context.Context, *Empty) (*SimpleScript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPortScanCode not implemented")
}
func (UnimplementedPortScanApiServer) SimpleDetect(*RecordPortScanRequest, PortScanApi_SimpleDetectServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDetect not implemented")
}
func (UnimplementedPortScanApiServer) SaveCancelSimpleDetect(context.Context, *RecordPortScanRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCancelSimpleDetect not implemented")
}
func (UnimplementedPortScanApiServer) GetSimpleDetectUnfinishedTask(context.Context, *Empty) (*GetSimpleDetectUnfinishedTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleDetectUnfinishedTask not implemented")
}
func (UnimplementedPortScanApiServer) GetSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleDetectUnfinishedTaskByUid not implemented")
}
func (UnimplementedPortScanApiServer) PopSimpleDetectUnfinishedTaskByUid(context.Context, *SimpleDetectYakScriptUnfinishedTaskByUidRequest) (*RecordPortScanRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopSimpleDetectUnfinishedTaskByUid not implemented")
}
func (UnimplementedPortScanApiServer) RecoverSimpleDetectUnfinishedTask(*SimpleDetectYakScriptUnfinishedTaskByUidRequest, PortScanApi_RecoverSimpleDetectUnfinishedTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RecoverSimpleDetectUnfinishedTask not implemented")
}
func (UnimplementedPortScanApiServer) mustEmbedUnimplementedPortScanApiServer() {}

// UnsafePortScanApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortScanApiServer will
// result in compilation errors.
type UnsafePortScanApiServer interface {
	mustEmbedUnimplementedPortScanApiServer()
}

func RegisterPortScanApiServer(s grpc.ServiceRegistrar, srv PortScanApiServer) {
	s.RegisterService(&PortScanApi_ServiceDesc, srv)
}

func _PortScanApi_PortScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanApiServer).PortScan(m, &portScanApiPortScanServer{stream})
}

type PortScanApi_PortScanServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanApiPortScanServer struct {
	grpc.ServerStream
}

func (x *portScanApiPortScanServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PortScanApi_ViewPortScanCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanApiServer).ViewPortScanCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanApi_ViewPortScanCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanApiServer).ViewPortScanCode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanApi_SimpleDetect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecordPortScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanApiServer).SimpleDetect(m, &portScanApiSimpleDetectServer{stream})
}

type PortScanApi_SimpleDetectServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanApiSimpleDetectServer struct {
	grpc.ServerStream
}

func (x *portScanApiSimpleDetectServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PortScanApi_SaveCancelSimpleDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPortScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanApiServer).SaveCancelSimpleDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanApi_SaveCancelSimpleDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanApiServer).SaveCancelSimpleDetect(ctx, req.(*RecordPortScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanApi_GetSimpleDetectUnfinishedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanApiServer).GetSimpleDetectUnfinishedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanApi_GetSimpleDetectUnfinishedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanApiServer).GetSimpleDetectUnfinishedTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanApi_GetSimpleDetectUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanApiServer).GetSimpleDetectUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanApi_GetSimpleDetectUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanApiServer).GetSimpleDetectUnfinishedTaskByUid(ctx, req.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanApi_PopSimpleDetectUnfinishedTaskByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanApiServer).PopSimpleDetectUnfinishedTaskByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortScanApi_PopSimpleDetectUnfinishedTaskByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanApiServer).PopSimpleDetectUnfinishedTaskByUid(ctx, req.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanApi_RecoverSimpleDetectUnfinishedTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleDetectYakScriptUnfinishedTaskByUidRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortScanApiServer).RecoverSimpleDetectUnfinishedTask(m, &portScanApiRecoverSimpleDetectUnfinishedTaskServer{stream})
}

type PortScanApi_RecoverSimpleDetectUnfinishedTaskServer interface {
	Send(*ExecResult) error
	grpc.ServerStream
}

type portScanApiRecoverSimpleDetectUnfinishedTaskServer struct {
	grpc.ServerStream
}

func (x *portScanApiRecoverSimpleDetectUnfinishedTaskServer) Send(m *ExecResult) error {
	return x.ServerStream.SendMsg(m)
}

// PortScanApi_ServiceDesc is the grpc.ServiceDesc for PortScanApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortScanApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.PortScanApi",
	HandlerType: (*PortScanApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewPortScanCode",
			Handler:    _PortScanApi_ViewPortScanCode_Handler,
		},
		{
			MethodName: "SaveCancelSimpleDetect",
			Handler:    _PortScanApi_SaveCancelSimpleDetect_Handler,
		},
		{
			MethodName: "GetSimpleDetectUnfinishedTask",
			Handler:    _PortScanApi_GetSimpleDetectUnfinishedTask_Handler,
		},
		{
			MethodName: "GetSimpleDetectUnfinishedTaskByUid",
			Handler:    _PortScanApi_GetSimpleDetectUnfinishedTaskByUid_Handler,
		},
		{
			MethodName: "PopSimpleDetectUnfinishedTaskByUid",
			Handler:    _PortScanApi_PopSimpleDetectUnfinishedTaskByUid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PortScan",
			Handler:       _PortScanApi_PortScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimpleDetect",
			Handler:       _PortScanApi_SimpleDetect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecoverSimpleDetectUnfinishedTask",
			Handler:       _PortScanApi_RecoverSimpleDetectUnfinishedTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "port_scan_api.proto",
}
