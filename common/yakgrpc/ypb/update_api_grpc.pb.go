// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: update_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UpdateApi_UpdateFromYakitResource_FullMethodName = "/ypb.UpdateApi/UpdateFromYakitResource"
	UpdateApi_UpdateFromGithub_FullMethodName        = "/ypb.UpdateApi/UpdateFromGithub"
)

// UpdateApiClient is the client API for UpdateApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateApiClient interface {
	// Yakit Store
	UpdateFromYakitResource(ctx context.Context, in *UpdateFromYakitResourceRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateFromGithub(ctx context.Context, in *UpdateFromGithubRequest, opts ...grpc.CallOption) (*Empty, error)
}

type updateApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateApiClient(cc grpc.ClientConnInterface) UpdateApiClient {
	return &updateApiClient{cc}
}

func (c *updateApiClient) UpdateFromYakitResource(ctx context.Context, in *UpdateFromYakitResourceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UpdateApi_UpdateFromYakitResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateApiClient) UpdateFromGithub(ctx context.Context, in *UpdateFromGithubRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UpdateApi_UpdateFromGithub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateApiServer is the server API for UpdateApi service.
// All implementations must embed UnimplementedUpdateApiServer
// for forward compatibility
type UpdateApiServer interface {
	// Yakit Store
	UpdateFromYakitResource(context.Context, *UpdateFromYakitResourceRequest) (*Empty, error)
	UpdateFromGithub(context.Context, *UpdateFromGithubRequest) (*Empty, error)
	mustEmbedUnimplementedUpdateApiServer()
}

// UnimplementedUpdateApiServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateApiServer struct {
}

func (UnimplementedUpdateApiServer) UpdateFromYakitResource(context.Context, *UpdateFromYakitResourceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromYakitResource not implemented")
}
func (UnimplementedUpdateApiServer) UpdateFromGithub(context.Context, *UpdateFromGithubRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromGithub not implemented")
}
func (UnimplementedUpdateApiServer) mustEmbedUnimplementedUpdateApiServer() {}

// UnsafeUpdateApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateApiServer will
// result in compilation errors.
type UnsafeUpdateApiServer interface {
	mustEmbedUnimplementedUpdateApiServer()
}

func RegisterUpdateApiServer(s grpc.ServiceRegistrar, srv UpdateApiServer) {
	s.RegisterService(&UpdateApi_ServiceDesc, srv)
}

func _UpdateApi_UpdateFromYakitResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromYakitResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateApiServer).UpdateFromYakitResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateApi_UpdateFromYakitResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateApiServer).UpdateFromYakitResource(ctx, req.(*UpdateFromYakitResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateApi_UpdateFromGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateApiServer).UpdateFromGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateApi_UpdateFromGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateApiServer).UpdateFromGithub(ctx, req.(*UpdateFromGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateApi_ServiceDesc is the grpc.ServiceDesc for UpdateApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.UpdateApi",
	HandlerType: (*UpdateApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFromYakitResource",
			Handler:    _UpdateApi_UpdateFromYakitResource_Handler,
		},
		{
			MethodName: "UpdateFromGithub",
			Handler:    _UpdateApi_UpdateFromGithub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update_api.proto",
}
