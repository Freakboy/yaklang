// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: generate_code.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenerateCode_GenerateYakCodeByPacket_FullMethodName = "/ypb.GenerateCode/GenerateYakCodeByPacket"
	GenerateCode_GenerateCSRFPocByPacket_FullMethodName = "/ypb.GenerateCode/GenerateCSRFPocByPacket"
)

// GenerateCodeClient is the client API for GenerateCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerateCodeClient interface {
	// GenerateYakCodeByPacket
	GenerateYakCodeByPacket(ctx context.Context, in *GenerateYakCodeByPacketRequest, opts ...grpc.CallOption) (*GenerateYakCodeByPacketResponse, error)
	// CSRF Generator
	GenerateCSRFPocByPacket(ctx context.Context, in *GenerateCSRFPocByPacketRequest, opts ...grpc.CallOption) (*GenerateCSRFPocByPacketResponse, error)
}

type generateCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerateCodeClient(cc grpc.ClientConnInterface) GenerateCodeClient {
	return &generateCodeClient{cc}
}

func (c *generateCodeClient) GenerateYakCodeByPacket(ctx context.Context, in *GenerateYakCodeByPacketRequest, opts ...grpc.CallOption) (*GenerateYakCodeByPacketResponse, error) {
	out := new(GenerateYakCodeByPacketResponse)
	err := c.cc.Invoke(ctx, GenerateCode_GenerateYakCodeByPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateCodeClient) GenerateCSRFPocByPacket(ctx context.Context, in *GenerateCSRFPocByPacketRequest, opts ...grpc.CallOption) (*GenerateCSRFPocByPacketResponse, error) {
	out := new(GenerateCSRFPocByPacketResponse)
	err := c.cc.Invoke(ctx, GenerateCode_GenerateCSRFPocByPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerateCodeServer is the server API for GenerateCode service.
// All implementations must embed UnimplementedGenerateCodeServer
// for forward compatibility
type GenerateCodeServer interface {
	// GenerateYakCodeByPacket
	GenerateYakCodeByPacket(context.Context, *GenerateYakCodeByPacketRequest) (*GenerateYakCodeByPacketResponse, error)
	// CSRF Generator
	GenerateCSRFPocByPacket(context.Context, *GenerateCSRFPocByPacketRequest) (*GenerateCSRFPocByPacketResponse, error)
	mustEmbedUnimplementedGenerateCodeServer()
}

// UnimplementedGenerateCodeServer must be embedded to have forward compatible implementations.
type UnimplementedGenerateCodeServer struct {
}

func (UnimplementedGenerateCodeServer) GenerateYakCodeByPacket(context.Context, *GenerateYakCodeByPacketRequest) (*GenerateYakCodeByPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateYakCodeByPacket not implemented")
}
func (UnimplementedGenerateCodeServer) GenerateCSRFPocByPacket(context.Context, *GenerateCSRFPocByPacketRequest) (*GenerateCSRFPocByPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCSRFPocByPacket not implemented")
}
func (UnimplementedGenerateCodeServer) mustEmbedUnimplementedGenerateCodeServer() {}

// UnsafeGenerateCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerateCodeServer will
// result in compilation errors.
type UnsafeGenerateCodeServer interface {
	mustEmbedUnimplementedGenerateCodeServer()
}

func RegisterGenerateCodeServer(s grpc.ServiceRegistrar, srv GenerateCodeServer) {
	s.RegisterService(&GenerateCode_ServiceDesc, srv)
}

func _GenerateCode_GenerateYakCodeByPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateYakCodeByPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateCodeServer).GenerateYakCodeByPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateCode_GenerateYakCodeByPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateCodeServer).GenerateYakCodeByPacket(ctx, req.(*GenerateYakCodeByPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateCode_GenerateCSRFPocByPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCSRFPocByPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateCodeServer).GenerateCSRFPocByPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateCode_GenerateCSRFPocByPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateCodeServer).GenerateCSRFPocByPacket(ctx, req.(*GenerateCSRFPocByPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerateCode_ServiceDesc is the grpc.ServiceDesc for GenerateCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerateCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.GenerateCode",
	HandlerType: (*GenerateCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateYakCodeByPacket",
			Handler:    _GenerateCode_GenerateYakCodeByPacket_Handler,
		},
		{
			MethodName: "GenerateCSRFPocByPacket",
			Handler:    _GenerateCode_GenerateCSRFPocByPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generate_code.proto",
}
