// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: payloads.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PayloadsService_QueryPayload_FullMethodName         = "/ypb.PayloadsService/QueryPayload"
	PayloadsService_DeletePayloadByGroup_FullMethodName = "/ypb.PayloadsService/DeletePayloadByGroup"
	PayloadsService_DeletePayload_FullMethodName        = "/ypb.PayloadsService/DeletePayload"
	PayloadsService_SavePayload_FullMethodName          = "/ypb.PayloadsService/SavePayload"
	PayloadsService_SavePayloadStream_FullMethodName    = "/ypb.PayloadsService/SavePayloadStream"
	PayloadsService_GetAllPayloadGroup_FullMethodName   = "/ypb.PayloadsService/GetAllPayloadGroup"
	PayloadsService_UpdatePayload_FullMethodName        = "/ypb.PayloadsService/UpdatePayload"
	PayloadsService_GetAllPayload_FullMethodName        = "/ypb.PayloadsService/GetAllPayload"
)

// PayloadsServiceClient is the client API for PayloadsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayloadsServiceClient interface {
	// Payload 相关接口
	QueryPayload(ctx context.Context, in *QueryPayloadRequest, opts ...grpc.CallOption) (*QueryPayloadResponse, error)
	DeletePayloadByGroup(ctx context.Context, in *DeletePayloadByGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeletePayload(ctx context.Context, in *DeletePayloadRequest, opts ...grpc.CallOption) (*Empty, error)
	SavePayload(ctx context.Context, in *SavePayloadRequest, opts ...grpc.CallOption) (*Empty, error)
	SavePayloadStream(ctx context.Context, in *SavePayloadRequest, opts ...grpc.CallOption) (PayloadsService_SavePayloadStreamClient, error)
	GetAllPayloadGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllPayloadGroupResponse, error)
	UpdatePayload(ctx context.Context, in *UpdatePayloadRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllPayload(ctx context.Context, in *GetAllPayloadRequest, opts ...grpc.CallOption) (*GetAllPayloadResponse, error)
}

type payloadsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayloadsServiceClient(cc grpc.ClientConnInterface) PayloadsServiceClient {
	return &payloadsServiceClient{cc}
}

func (c *payloadsServiceClient) QueryPayload(ctx context.Context, in *QueryPayloadRequest, opts ...grpc.CallOption) (*QueryPayloadResponse, error) {
	out := new(QueryPayloadResponse)
	err := c.cc.Invoke(ctx, PayloadsService_QueryPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) DeletePayloadByGroup(ctx context.Context, in *DeletePayloadByGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PayloadsService_DeletePayloadByGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) DeletePayload(ctx context.Context, in *DeletePayloadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PayloadsService_DeletePayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) SavePayload(ctx context.Context, in *SavePayloadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PayloadsService_SavePayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) SavePayloadStream(ctx context.Context, in *SavePayloadRequest, opts ...grpc.CallOption) (PayloadsService_SavePayloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PayloadsService_ServiceDesc.Streams[0], PayloadsService_SavePayloadStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &payloadsServiceSavePayloadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PayloadsService_SavePayloadStreamClient interface {
	Recv() (*SavePayloadProgress, error)
	grpc.ClientStream
}

type payloadsServiceSavePayloadStreamClient struct {
	grpc.ClientStream
}

func (x *payloadsServiceSavePayloadStreamClient) Recv() (*SavePayloadProgress, error) {
	m := new(SavePayloadProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *payloadsServiceClient) GetAllPayloadGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllPayloadGroupResponse, error) {
	out := new(GetAllPayloadGroupResponse)
	err := c.cc.Invoke(ctx, PayloadsService_GetAllPayloadGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) UpdatePayload(ctx context.Context, in *UpdatePayloadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PayloadsService_UpdatePayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadsServiceClient) GetAllPayload(ctx context.Context, in *GetAllPayloadRequest, opts ...grpc.CallOption) (*GetAllPayloadResponse, error) {
	out := new(GetAllPayloadResponse)
	err := c.cc.Invoke(ctx, PayloadsService_GetAllPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayloadsServiceServer is the server API for PayloadsService service.
// All implementations must embed UnimplementedPayloadsServiceServer
// for forward compatibility
type PayloadsServiceServer interface {
	// Payload 相关接口
	QueryPayload(context.Context, *QueryPayloadRequest) (*QueryPayloadResponse, error)
	DeletePayloadByGroup(context.Context, *DeletePayloadByGroupRequest) (*Empty, error)
	DeletePayload(context.Context, *DeletePayloadRequest) (*Empty, error)
	SavePayload(context.Context, *SavePayloadRequest) (*Empty, error)
	SavePayloadStream(*SavePayloadRequest, PayloadsService_SavePayloadStreamServer) error
	GetAllPayloadGroup(context.Context, *Empty) (*GetAllPayloadGroupResponse, error)
	UpdatePayload(context.Context, *UpdatePayloadRequest) (*Empty, error)
	GetAllPayload(context.Context, *GetAllPayloadRequest) (*GetAllPayloadResponse, error)
	mustEmbedUnimplementedPayloadsServiceServer()
}

// UnimplementedPayloadsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayloadsServiceServer struct {
}

func (UnimplementedPayloadsServiceServer) QueryPayload(context.Context, *QueryPayloadRequest) (*QueryPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPayload not implemented")
}
func (UnimplementedPayloadsServiceServer) DeletePayloadByGroup(context.Context, *DeletePayloadByGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayloadByGroup not implemented")
}
func (UnimplementedPayloadsServiceServer) DeletePayload(context.Context, *DeletePayloadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayload not implemented")
}
func (UnimplementedPayloadsServiceServer) SavePayload(context.Context, *SavePayloadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayload not implemented")
}
func (UnimplementedPayloadsServiceServer) SavePayloadStream(*SavePayloadRequest, PayloadsService_SavePayloadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePayloadStream not implemented")
}
func (UnimplementedPayloadsServiceServer) GetAllPayloadGroup(context.Context, *Empty) (*GetAllPayloadGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPayloadGroup not implemented")
}
func (UnimplementedPayloadsServiceServer) UpdatePayload(context.Context, *UpdatePayloadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayload not implemented")
}
func (UnimplementedPayloadsServiceServer) GetAllPayload(context.Context, *GetAllPayloadRequest) (*GetAllPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPayload not implemented")
}
func (UnimplementedPayloadsServiceServer) mustEmbedUnimplementedPayloadsServiceServer() {}

// UnsafePayloadsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayloadsServiceServer will
// result in compilation errors.
type UnsafePayloadsServiceServer interface {
	mustEmbedUnimplementedPayloadsServiceServer()
}

func RegisterPayloadsServiceServer(s grpc.ServiceRegistrar, srv PayloadsServiceServer) {
	s.RegisterService(&PayloadsService_ServiceDesc, srv)
}

func _PayloadsService_QueryPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).QueryPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_QueryPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).QueryPayload(ctx, req.(*QueryPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_DeletePayloadByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayloadByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).DeletePayloadByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_DeletePayloadByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).DeletePayloadByGroup(ctx, req.(*DeletePayloadByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_DeletePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).DeletePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_DeletePayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).DeletePayload(ctx, req.(*DeletePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_SavePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).SavePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_SavePayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).SavePayload(ctx, req.(*SavePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_SavePayloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SavePayloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PayloadsServiceServer).SavePayloadStream(m, &payloadsServiceSavePayloadStreamServer{stream})
}

type PayloadsService_SavePayloadStreamServer interface {
	Send(*SavePayloadProgress) error
	grpc.ServerStream
}

type payloadsServiceSavePayloadStreamServer struct {
	grpc.ServerStream
}

func (x *payloadsServiceSavePayloadStreamServer) Send(m *SavePayloadProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _PayloadsService_GetAllPayloadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).GetAllPayloadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_GetAllPayloadGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).GetAllPayloadGroup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_UpdatePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).UpdatePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_UpdatePayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).UpdatePayload(ctx, req.(*UpdatePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadsService_GetAllPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadsServiceServer).GetAllPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadsService_GetAllPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadsServiceServer).GetAllPayload(ctx, req.(*GetAllPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayloadsService_ServiceDesc is the grpc.ServiceDesc for PayloadsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayloadsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.PayloadsService",
	HandlerType: (*PayloadsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPayload",
			Handler:    _PayloadsService_QueryPayload_Handler,
		},
		{
			MethodName: "DeletePayloadByGroup",
			Handler:    _PayloadsService_DeletePayloadByGroup_Handler,
		},
		{
			MethodName: "DeletePayload",
			Handler:    _PayloadsService_DeletePayload_Handler,
		},
		{
			MethodName: "SavePayload",
			Handler:    _PayloadsService_SavePayload_Handler,
		},
		{
			MethodName: "GetAllPayloadGroup",
			Handler:    _PayloadsService_GetAllPayloadGroup_Handler,
		},
		{
			MethodName: "UpdatePayload",
			Handler:    _PayloadsService_UpdatePayload_Handler,
		},
		{
			MethodName: "GetAllPayload",
			Handler:    _PayloadsService_GetAllPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SavePayloadStream",
			Handler:       _PayloadsService_SavePayloadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "payloads.proto",
}
