// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: system_proxy_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemProxyApi_GetSystemProxy_FullMethodName = "/ypb.SystemProxyApi/GetSystemProxy"
	SystemProxyApi_SetSystemProxy_FullMethodName = "/ypb.SystemProxyApi/SetSystemProxy"
)

// SystemProxyApiClient is the client API for SystemProxyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemProxyApiClient interface {
	GetSystemProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSystemProxyResult, error)
	SetSystemProxy(ctx context.Context, in *SetSystemProxyRequest, opts ...grpc.CallOption) (*Empty, error)
}

type systemProxyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemProxyApiClient(cc grpc.ClientConnInterface) SystemProxyApiClient {
	return &systemProxyApiClient{cc}
}

func (c *systemProxyApiClient) GetSystemProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSystemProxyResult, error) {
	out := new(GetSystemProxyResult)
	err := c.cc.Invoke(ctx, SystemProxyApi_GetSystemProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemProxyApiClient) SetSystemProxy(ctx context.Context, in *SetSystemProxyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SystemProxyApi_SetSystemProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemProxyApiServer is the server API for SystemProxyApi service.
// All implementations must embed UnimplementedSystemProxyApiServer
// for forward compatibility
type SystemProxyApiServer interface {
	GetSystemProxy(context.Context, *Empty) (*GetSystemProxyResult, error)
	SetSystemProxy(context.Context, *SetSystemProxyRequest) (*Empty, error)
	mustEmbedUnimplementedSystemProxyApiServer()
}

// UnimplementedSystemProxyApiServer must be embedded to have forward compatible implementations.
type UnimplementedSystemProxyApiServer struct {
}

func (UnimplementedSystemProxyApiServer) GetSystemProxy(context.Context, *Empty) (*GetSystemProxyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemProxy not implemented")
}
func (UnimplementedSystemProxyApiServer) SetSystemProxy(context.Context, *SetSystemProxyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemProxy not implemented")
}
func (UnimplementedSystemProxyApiServer) mustEmbedUnimplementedSystemProxyApiServer() {}

// UnsafeSystemProxyApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemProxyApiServer will
// result in compilation errors.
type UnsafeSystemProxyApiServer interface {
	mustEmbedUnimplementedSystemProxyApiServer()
}

func RegisterSystemProxyApiServer(s grpc.ServiceRegistrar, srv SystemProxyApiServer) {
	s.RegisterService(&SystemProxyApi_ServiceDesc, srv)
}

func _SystemProxyApi_GetSystemProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemProxyApiServer).GetSystemProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemProxyApi_GetSystemProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemProxyApiServer).GetSystemProxy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemProxyApi_SetSystemProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemProxyApiServer).SetSystemProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemProxyApi_SetSystemProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemProxyApiServer).SetSystemProxy(ctx, req.(*SetSystemProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemProxyApi_ServiceDesc is the grpc.ServiceDesc for SystemProxyApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemProxyApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.SystemProxyApi",
	HandlerType: (*SystemProxyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemProxy",
			Handler:    _SystemProxyApi_GetSystemProxy_Handler,
		},
		{
			MethodName: "SetSystemProxy",
			Handler:    _SystemProxyApi_SetSystemProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_proxy_api.proto",
}
