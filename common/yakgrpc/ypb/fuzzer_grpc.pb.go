// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fuzzer.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FuzzerService_GetHistoryHTTPFuzzerTask_FullMethodName        = "/ypb.FuzzerService/GetHistoryHTTPFuzzerTask"
	FuzzerService_QueryHistoryHTTPFuzzerTask_FullMethodName      = "/ypb.FuzzerService/QueryHistoryHTTPFuzzerTask"
	FuzzerService_QueryHistoryHTTPFuzzerTaskEx_FullMethodName    = "/ypb.FuzzerService/QueryHistoryHTTPFuzzerTaskEx"
	FuzzerService_DeleteHistoryHTTPFuzzerTask_FullMethodName     = "/ypb.FuzzerService/DeleteHistoryHTTPFuzzerTask"
	FuzzerService_HTTPFuzzer_FullMethodName                      = "/ypb.FuzzerService/HTTPFuzzer"
	FuzzerService_PreloadHTTPFuzzerParams_FullMethodName         = "/ypb.FuzzerService/PreloadHTTPFuzzerParams"
	FuzzerService_RenderVariables_FullMethodName                 = "/ypb.FuzzerService/RenderVariables"
	FuzzerService_MatchHTTPResponse_FullMethodName               = "/ypb.FuzzerService/MatchHTTPResponse"
	FuzzerService_ExtractHTTPResponse_FullMethodName             = "/ypb.FuzzerService/ExtractHTTPResponse"
	FuzzerService_RedirectRequest_FullMethodName                 = "/ypb.FuzzerService/RedirectRequest"
	FuzzerService_HTTPRequestMutate_FullMethodName               = "/ypb.FuzzerService/HTTPRequestMutate"
	FuzzerService_HTTPResponseMutate_FullMethodName              = "/ypb.FuzzerService/HTTPResponseMutate"
	FuzzerService_FixUploadPacket_FullMethodName                 = "/ypb.FuzzerService/FixUploadPacket"
	FuzzerService_IsMultipartFormDataRequest_FullMethodName      = "/ypb.FuzzerService/IsMultipartFormDataRequest"
	FuzzerService_GenerateExtractRule_FullMethodName             = "/ypb.FuzzerService/GenerateExtractRule"
	FuzzerService_ExtractData_FullMethodName                     = "/ypb.FuzzerService/ExtractData"
	FuzzerService_QueryHTTPFuzzerResponseByTaskId_FullMethodName = "/ypb.FuzzerService/QueryHTTPFuzzerResponseByTaskId"
	FuzzerService_ExtractUrl_FullMethodName                      = "/ypb.FuzzerService/ExtractUrl"
	FuzzerService_ConvertFuzzerResponseToHTTPFlow_FullMethodName = "/ypb.FuzzerService/ConvertFuzzerResponseToHTTPFlow"
	FuzzerService_StringFuzzer_FullMethodName                    = "/ypb.FuzzerService/StringFuzzer"
)

// FuzzerServiceClient is the client API for FuzzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuzzerServiceClient interface {
	GetHistoryHTTPFuzzerTask(ctx context.Context, in *GetHistoryHTTPFuzzerTaskRequest, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTaskDetail, error)
	QueryHistoryHTTPFuzzerTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTasks, error)
	QueryHistoryHTTPFuzzerTaskEx(ctx context.Context, in *QueryHistoryHTTPFuzzerTaskExParams, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTasksResponse, error)
	DeleteHistoryHTTPFuzzerTask(ctx context.Context, in *DeleteHistoryHTTPFuzzerTaskRequest, opts ...grpc.CallOption) (*Empty, error)
	HTTPFuzzer(ctx context.Context, in *FuzzerRequest, opts ...grpc.CallOption) (FuzzerService_HTTPFuzzerClient, error)
	PreloadHTTPFuzzerParams(ctx context.Context, in *PreloadHTTPFuzzerParamsRequest, opts ...grpc.CallOption) (*PreloadHTTPFuzzerParamsResponse, error)
	RenderVariables(ctx context.Context, in *RenderVariablesRequest, opts ...grpc.CallOption) (*RenderVariablesResponse, error)
	MatchHTTPResponse(ctx context.Context, in *MatchHTTPResponseParams, opts ...grpc.CallOption) (*MatchHTTPResponseResult, error)
	ExtractHTTPResponse(ctx context.Context, in *ExtractHTTPResponseParams, opts ...grpc.CallOption) (*ExtractHTTPResponseResult, error)
	RedirectRequest(ctx context.Context, in *RedirectRequestParams, opts ...grpc.CallOption) (*FuzzerResponse, error)
	HTTPRequestMutate(ctx context.Context, in *HTTPRequestMutateParams, opts ...grpc.CallOption) (*MutateResult, error)
	HTTPResponseMutate(ctx context.Context, in *HTTPResponseMutateParams, opts ...grpc.CallOption) (*MutateResult, error)
	FixUploadPacket(ctx context.Context, in *FixUploadPacketRequest, opts ...grpc.CallOption) (*FixUploadPacketResponse, error)
	IsMultipartFormDataRequest(ctx context.Context, in *FixUploadPacketRequest, opts ...grpc.CallOption) (*IsMultipartFormDataRequestResult, error)
	GenerateExtractRule(ctx context.Context, in *GenerateExtractRuleRequest, opts ...grpc.CallOption) (*GenerateExtractRuleResponse, error)
	ExtractData(ctx context.Context, opts ...grpc.CallOption) (FuzzerService_ExtractDataClient, error)
	// HTTPFuzzerResponse
	// 这个挺特殊的，因为数据包太多了，会卡，所以后端会保存一份，通过这个接口做缓存查询
	QueryHTTPFuzzerResponseByTaskId(ctx context.Context, in *QueryHTTPFuzzerResponseByTaskIdRequest, opts ...grpc.CallOption) (*QueryHTTPFuzzerResponseByTaskIdResponse, error)
	// 从一个 FuzzerRequest 中提取 Url
	ExtractUrl(ctx context.Context, in *FuzzerRequest, opts ...grpc.CallOption) (*ExtractedUrl, error)
	// FuzzerResponse 对象转 HTTPFlow：以便分析和模糊测试
	ConvertFuzzerResponseToHTTPFlow(ctx context.Context, in *FuzzerResponse, opts ...grpc.CallOption) (*HTTPFlow, error)
	// 渲染 Fuzzer 模版
	StringFuzzer(ctx context.Context, in *StringFuzzerRequest, opts ...grpc.CallOption) (*StringFuzzerResponse, error)
}

type fuzzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuzzerServiceClient(cc grpc.ClientConnInterface) FuzzerServiceClient {
	return &fuzzerServiceClient{cc}
}

func (c *fuzzerServiceClient) GetHistoryHTTPFuzzerTask(ctx context.Context, in *GetHistoryHTTPFuzzerTaskRequest, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTaskDetail, error) {
	out := new(HistoryHTTPFuzzerTaskDetail)
	err := c.cc.Invoke(ctx, FuzzerService_GetHistoryHTTPFuzzerTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) QueryHistoryHTTPFuzzerTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTasks, error) {
	out := new(HistoryHTTPFuzzerTasks)
	err := c.cc.Invoke(ctx, FuzzerService_QueryHistoryHTTPFuzzerTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) QueryHistoryHTTPFuzzerTaskEx(ctx context.Context, in *QueryHistoryHTTPFuzzerTaskExParams, opts ...grpc.CallOption) (*HistoryHTTPFuzzerTasksResponse, error) {
	out := new(HistoryHTTPFuzzerTasksResponse)
	err := c.cc.Invoke(ctx, FuzzerService_QueryHistoryHTTPFuzzerTaskEx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) DeleteHistoryHTTPFuzzerTask(ctx context.Context, in *DeleteHistoryHTTPFuzzerTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FuzzerService_DeleteHistoryHTTPFuzzerTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) HTTPFuzzer(ctx context.Context, in *FuzzerRequest, opts ...grpc.CallOption) (FuzzerService_HTTPFuzzerClient, error) {
	stream, err := c.cc.NewStream(ctx, &FuzzerService_ServiceDesc.Streams[0], FuzzerService_HTTPFuzzer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fuzzerServiceHTTPFuzzerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FuzzerService_HTTPFuzzerClient interface {
	Recv() (*FuzzerResponse, error)
	grpc.ClientStream
}

type fuzzerServiceHTTPFuzzerClient struct {
	grpc.ClientStream
}

func (x *fuzzerServiceHTTPFuzzerClient) Recv() (*FuzzerResponse, error) {
	m := new(FuzzerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fuzzerServiceClient) PreloadHTTPFuzzerParams(ctx context.Context, in *PreloadHTTPFuzzerParamsRequest, opts ...grpc.CallOption) (*PreloadHTTPFuzzerParamsResponse, error) {
	out := new(PreloadHTTPFuzzerParamsResponse)
	err := c.cc.Invoke(ctx, FuzzerService_PreloadHTTPFuzzerParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) RenderVariables(ctx context.Context, in *RenderVariablesRequest, opts ...grpc.CallOption) (*RenderVariablesResponse, error) {
	out := new(RenderVariablesResponse)
	err := c.cc.Invoke(ctx, FuzzerService_RenderVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) MatchHTTPResponse(ctx context.Context, in *MatchHTTPResponseParams, opts ...grpc.CallOption) (*MatchHTTPResponseResult, error) {
	out := new(MatchHTTPResponseResult)
	err := c.cc.Invoke(ctx, FuzzerService_MatchHTTPResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) ExtractHTTPResponse(ctx context.Context, in *ExtractHTTPResponseParams, opts ...grpc.CallOption) (*ExtractHTTPResponseResult, error) {
	out := new(ExtractHTTPResponseResult)
	err := c.cc.Invoke(ctx, FuzzerService_ExtractHTTPResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) RedirectRequest(ctx context.Context, in *RedirectRequestParams, opts ...grpc.CallOption) (*FuzzerResponse, error) {
	out := new(FuzzerResponse)
	err := c.cc.Invoke(ctx, FuzzerService_RedirectRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) HTTPRequestMutate(ctx context.Context, in *HTTPRequestMutateParams, opts ...grpc.CallOption) (*MutateResult, error) {
	out := new(MutateResult)
	err := c.cc.Invoke(ctx, FuzzerService_HTTPRequestMutate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) HTTPResponseMutate(ctx context.Context, in *HTTPResponseMutateParams, opts ...grpc.CallOption) (*MutateResult, error) {
	out := new(MutateResult)
	err := c.cc.Invoke(ctx, FuzzerService_HTTPResponseMutate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) FixUploadPacket(ctx context.Context, in *FixUploadPacketRequest, opts ...grpc.CallOption) (*FixUploadPacketResponse, error) {
	out := new(FixUploadPacketResponse)
	err := c.cc.Invoke(ctx, FuzzerService_FixUploadPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) IsMultipartFormDataRequest(ctx context.Context, in *FixUploadPacketRequest, opts ...grpc.CallOption) (*IsMultipartFormDataRequestResult, error) {
	out := new(IsMultipartFormDataRequestResult)
	err := c.cc.Invoke(ctx, FuzzerService_IsMultipartFormDataRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) GenerateExtractRule(ctx context.Context, in *GenerateExtractRuleRequest, opts ...grpc.CallOption) (*GenerateExtractRuleResponse, error) {
	out := new(GenerateExtractRuleResponse)
	err := c.cc.Invoke(ctx, FuzzerService_GenerateExtractRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) ExtractData(ctx context.Context, opts ...grpc.CallOption) (FuzzerService_ExtractDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FuzzerService_ServiceDesc.Streams[1], FuzzerService_ExtractData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fuzzerServiceExtractDataClient{stream}
	return x, nil
}

type FuzzerService_ExtractDataClient interface {
	Send(*ExtractDataRequest) error
	Recv() (*ExtractDataResponse, error)
	grpc.ClientStream
}

type fuzzerServiceExtractDataClient struct {
	grpc.ClientStream
}

func (x *fuzzerServiceExtractDataClient) Send(m *ExtractDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fuzzerServiceExtractDataClient) Recv() (*ExtractDataResponse, error) {
	m := new(ExtractDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fuzzerServiceClient) QueryHTTPFuzzerResponseByTaskId(ctx context.Context, in *QueryHTTPFuzzerResponseByTaskIdRequest, opts ...grpc.CallOption) (*QueryHTTPFuzzerResponseByTaskIdResponse, error) {
	out := new(QueryHTTPFuzzerResponseByTaskIdResponse)
	err := c.cc.Invoke(ctx, FuzzerService_QueryHTTPFuzzerResponseByTaskId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) ExtractUrl(ctx context.Context, in *FuzzerRequest, opts ...grpc.CallOption) (*ExtractedUrl, error) {
	out := new(ExtractedUrl)
	err := c.cc.Invoke(ctx, FuzzerService_ExtractUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) ConvertFuzzerResponseToHTTPFlow(ctx context.Context, in *FuzzerResponse, opts ...grpc.CallOption) (*HTTPFlow, error) {
	out := new(HTTPFlow)
	err := c.cc.Invoke(ctx, FuzzerService_ConvertFuzzerResponseToHTTPFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuzzerServiceClient) StringFuzzer(ctx context.Context, in *StringFuzzerRequest, opts ...grpc.CallOption) (*StringFuzzerResponse, error) {
	out := new(StringFuzzerResponse)
	err := c.cc.Invoke(ctx, FuzzerService_StringFuzzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuzzerServiceServer is the server API for FuzzerService service.
// All implementations must embed UnimplementedFuzzerServiceServer
// for forward compatibility
type FuzzerServiceServer interface {
	GetHistoryHTTPFuzzerTask(context.Context, *GetHistoryHTTPFuzzerTaskRequest) (*HistoryHTTPFuzzerTaskDetail, error)
	QueryHistoryHTTPFuzzerTask(context.Context, *Empty) (*HistoryHTTPFuzzerTasks, error)
	QueryHistoryHTTPFuzzerTaskEx(context.Context, *QueryHistoryHTTPFuzzerTaskExParams) (*HistoryHTTPFuzzerTasksResponse, error)
	DeleteHistoryHTTPFuzzerTask(context.Context, *DeleteHistoryHTTPFuzzerTaskRequest) (*Empty, error)
	HTTPFuzzer(*FuzzerRequest, FuzzerService_HTTPFuzzerServer) error
	PreloadHTTPFuzzerParams(context.Context, *PreloadHTTPFuzzerParamsRequest) (*PreloadHTTPFuzzerParamsResponse, error)
	RenderVariables(context.Context, *RenderVariablesRequest) (*RenderVariablesResponse, error)
	MatchHTTPResponse(context.Context, *MatchHTTPResponseParams) (*MatchHTTPResponseResult, error)
	ExtractHTTPResponse(context.Context, *ExtractHTTPResponseParams) (*ExtractHTTPResponseResult, error)
	RedirectRequest(context.Context, *RedirectRequestParams) (*FuzzerResponse, error)
	HTTPRequestMutate(context.Context, *HTTPRequestMutateParams) (*MutateResult, error)
	HTTPResponseMutate(context.Context, *HTTPResponseMutateParams) (*MutateResult, error)
	FixUploadPacket(context.Context, *FixUploadPacketRequest) (*FixUploadPacketResponse, error)
	IsMultipartFormDataRequest(context.Context, *FixUploadPacketRequest) (*IsMultipartFormDataRequestResult, error)
	GenerateExtractRule(context.Context, *GenerateExtractRuleRequest) (*GenerateExtractRuleResponse, error)
	ExtractData(FuzzerService_ExtractDataServer) error
	// HTTPFuzzerResponse
	// 这个挺特殊的，因为数据包太多了，会卡，所以后端会保存一份，通过这个接口做缓存查询
	QueryHTTPFuzzerResponseByTaskId(context.Context, *QueryHTTPFuzzerResponseByTaskIdRequest) (*QueryHTTPFuzzerResponseByTaskIdResponse, error)
	// 从一个 FuzzerRequest 中提取 Url
	ExtractUrl(context.Context, *FuzzerRequest) (*ExtractedUrl, error)
	// FuzzerResponse 对象转 HTTPFlow：以便分析和模糊测试
	ConvertFuzzerResponseToHTTPFlow(context.Context, *FuzzerResponse) (*HTTPFlow, error)
	// 渲染 Fuzzer 模版
	StringFuzzer(context.Context, *StringFuzzerRequest) (*StringFuzzerResponse, error)
	mustEmbedUnimplementedFuzzerServiceServer()
}

// UnimplementedFuzzerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuzzerServiceServer struct {
}

func (UnimplementedFuzzerServiceServer) GetHistoryHTTPFuzzerTask(context.Context, *GetHistoryHTTPFuzzerTaskRequest) (*HistoryHTTPFuzzerTaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHTTPFuzzerTask not implemented")
}
func (UnimplementedFuzzerServiceServer) QueryHistoryHTTPFuzzerTask(context.Context, *Empty) (*HistoryHTTPFuzzerTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistoryHTTPFuzzerTask not implemented")
}
func (UnimplementedFuzzerServiceServer) QueryHistoryHTTPFuzzerTaskEx(context.Context, *QueryHistoryHTTPFuzzerTaskExParams) (*HistoryHTTPFuzzerTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistoryHTTPFuzzerTaskEx not implemented")
}
func (UnimplementedFuzzerServiceServer) DeleteHistoryHTTPFuzzerTask(context.Context, *DeleteHistoryHTTPFuzzerTaskRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryHTTPFuzzerTask not implemented")
}
func (UnimplementedFuzzerServiceServer) HTTPFuzzer(*FuzzerRequest, FuzzerService_HTTPFuzzerServer) error {
	return status.Errorf(codes.Unimplemented, "method HTTPFuzzer not implemented")
}
func (UnimplementedFuzzerServiceServer) PreloadHTTPFuzzerParams(context.Context, *PreloadHTTPFuzzerParamsRequest) (*PreloadHTTPFuzzerParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadHTTPFuzzerParams not implemented")
}
func (UnimplementedFuzzerServiceServer) RenderVariables(context.Context, *RenderVariablesRequest) (*RenderVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderVariables not implemented")
}
func (UnimplementedFuzzerServiceServer) MatchHTTPResponse(context.Context, *MatchHTTPResponseParams) (*MatchHTTPResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchHTTPResponse not implemented")
}
func (UnimplementedFuzzerServiceServer) ExtractHTTPResponse(context.Context, *ExtractHTTPResponseParams) (*ExtractHTTPResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractHTTPResponse not implemented")
}
func (UnimplementedFuzzerServiceServer) RedirectRequest(context.Context, *RedirectRequestParams) (*FuzzerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectRequest not implemented")
}
func (UnimplementedFuzzerServiceServer) HTTPRequestMutate(context.Context, *HTTPRequestMutateParams) (*MutateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPRequestMutate not implemented")
}
func (UnimplementedFuzzerServiceServer) HTTPResponseMutate(context.Context, *HTTPResponseMutateParams) (*MutateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPResponseMutate not implemented")
}
func (UnimplementedFuzzerServiceServer) FixUploadPacket(context.Context, *FixUploadPacketRequest) (*FixUploadPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixUploadPacket not implemented")
}
func (UnimplementedFuzzerServiceServer) IsMultipartFormDataRequest(context.Context, *FixUploadPacketRequest) (*IsMultipartFormDataRequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMultipartFormDataRequest not implemented")
}
func (UnimplementedFuzzerServiceServer) GenerateExtractRule(context.Context, *GenerateExtractRuleRequest) (*GenerateExtractRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExtractRule not implemented")
}
func (UnimplementedFuzzerServiceServer) ExtractData(FuzzerService_ExtractDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtractData not implemented")
}
func (UnimplementedFuzzerServiceServer) QueryHTTPFuzzerResponseByTaskId(context.Context, *QueryHTTPFuzzerResponseByTaskIdRequest) (*QueryHTTPFuzzerResponseByTaskIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHTTPFuzzerResponseByTaskId not implemented")
}
func (UnimplementedFuzzerServiceServer) ExtractUrl(context.Context, *FuzzerRequest) (*ExtractedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractUrl not implemented")
}
func (UnimplementedFuzzerServiceServer) ConvertFuzzerResponseToHTTPFlow(context.Context, *FuzzerResponse) (*HTTPFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertFuzzerResponseToHTTPFlow not implemented")
}
func (UnimplementedFuzzerServiceServer) StringFuzzer(context.Context, *StringFuzzerRequest) (*StringFuzzerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringFuzzer not implemented")
}
func (UnimplementedFuzzerServiceServer) mustEmbedUnimplementedFuzzerServiceServer() {}

// UnsafeFuzzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuzzerServiceServer will
// result in compilation errors.
type UnsafeFuzzerServiceServer interface {
	mustEmbedUnimplementedFuzzerServiceServer()
}

func RegisterFuzzerServiceServer(s grpc.ServiceRegistrar, srv FuzzerServiceServer) {
	s.RegisterService(&FuzzerService_ServiceDesc, srv)
}

func _FuzzerService_GetHistoryHTTPFuzzerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryHTTPFuzzerTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).GetHistoryHTTPFuzzerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_GetHistoryHTTPFuzzerTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).GetHistoryHTTPFuzzerTask(ctx, req.(*GetHistoryHTTPFuzzerTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_QueryHistoryHTTPFuzzerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).QueryHistoryHTTPFuzzerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_QueryHistoryHTTPFuzzerTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).QueryHistoryHTTPFuzzerTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_QueryHistoryHTTPFuzzerTaskEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryHTTPFuzzerTaskExParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).QueryHistoryHTTPFuzzerTaskEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_QueryHistoryHTTPFuzzerTaskEx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).QueryHistoryHTTPFuzzerTaskEx(ctx, req.(*QueryHistoryHTTPFuzzerTaskExParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_DeleteHistoryHTTPFuzzerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoryHTTPFuzzerTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).DeleteHistoryHTTPFuzzerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_DeleteHistoryHTTPFuzzerTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).DeleteHistoryHTTPFuzzerTask(ctx, req.(*DeleteHistoryHTTPFuzzerTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_HTTPFuzzer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FuzzerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FuzzerServiceServer).HTTPFuzzer(m, &fuzzerServiceHTTPFuzzerServer{stream})
}

type FuzzerService_HTTPFuzzerServer interface {
	Send(*FuzzerResponse) error
	grpc.ServerStream
}

type fuzzerServiceHTTPFuzzerServer struct {
	grpc.ServerStream
}

func (x *fuzzerServiceHTTPFuzzerServer) Send(m *FuzzerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FuzzerService_PreloadHTTPFuzzerParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadHTTPFuzzerParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).PreloadHTTPFuzzerParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_PreloadHTTPFuzzerParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).PreloadHTTPFuzzerParams(ctx, req.(*PreloadHTTPFuzzerParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_RenderVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).RenderVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_RenderVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).RenderVariables(ctx, req.(*RenderVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_MatchHTTPResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchHTTPResponseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).MatchHTTPResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_MatchHTTPResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).MatchHTTPResponse(ctx, req.(*MatchHTTPResponseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_ExtractHTTPResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractHTTPResponseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).ExtractHTTPResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_ExtractHTTPResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).ExtractHTTPResponse(ctx, req.(*ExtractHTTPResponseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_RedirectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).RedirectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_RedirectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).RedirectRequest(ctx, req.(*RedirectRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_HTTPRequestMutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequestMutateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).HTTPRequestMutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_HTTPRequestMutate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).HTTPRequestMutate(ctx, req.(*HTTPRequestMutateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_HTTPResponseMutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPResponseMutateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).HTTPResponseMutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_HTTPResponseMutate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).HTTPResponseMutate(ctx, req.(*HTTPResponseMutateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_FixUploadPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixUploadPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).FixUploadPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_FixUploadPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).FixUploadPacket(ctx, req.(*FixUploadPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_IsMultipartFormDataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixUploadPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).IsMultipartFormDataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_IsMultipartFormDataRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).IsMultipartFormDataRequest(ctx, req.(*FixUploadPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_GenerateExtractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateExtractRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).GenerateExtractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_GenerateExtractRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).GenerateExtractRule(ctx, req.(*GenerateExtractRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_ExtractData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FuzzerServiceServer).ExtractData(&fuzzerServiceExtractDataServer{stream})
}

type FuzzerService_ExtractDataServer interface {
	Send(*ExtractDataResponse) error
	Recv() (*ExtractDataRequest, error)
	grpc.ServerStream
}

type fuzzerServiceExtractDataServer struct {
	grpc.ServerStream
}

func (x *fuzzerServiceExtractDataServer) Send(m *ExtractDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fuzzerServiceExtractDataServer) Recv() (*ExtractDataRequest, error) {
	m := new(ExtractDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FuzzerService_QueryHTTPFuzzerResponseByTaskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHTTPFuzzerResponseByTaskIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).QueryHTTPFuzzerResponseByTaskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_QueryHTTPFuzzerResponseByTaskId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).QueryHTTPFuzzerResponseByTaskId(ctx, req.(*QueryHTTPFuzzerResponseByTaskIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_ExtractUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuzzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).ExtractUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_ExtractUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).ExtractUrl(ctx, req.(*FuzzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_ConvertFuzzerResponseToHTTPFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuzzerResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).ConvertFuzzerResponseToHTTPFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_ConvertFuzzerResponseToHTTPFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).ConvertFuzzerResponseToHTTPFlow(ctx, req.(*FuzzerResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuzzerService_StringFuzzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringFuzzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzerServiceServer).StringFuzzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzerService_StringFuzzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzerServiceServer).StringFuzzer(ctx, req.(*StringFuzzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuzzerService_ServiceDesc is the grpc.ServiceDesc for FuzzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuzzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.FuzzerService",
	HandlerType: (*FuzzerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistoryHTTPFuzzerTask",
			Handler:    _FuzzerService_GetHistoryHTTPFuzzerTask_Handler,
		},
		{
			MethodName: "QueryHistoryHTTPFuzzerTask",
			Handler:    _FuzzerService_QueryHistoryHTTPFuzzerTask_Handler,
		},
		{
			MethodName: "QueryHistoryHTTPFuzzerTaskEx",
			Handler:    _FuzzerService_QueryHistoryHTTPFuzzerTaskEx_Handler,
		},
		{
			MethodName: "DeleteHistoryHTTPFuzzerTask",
			Handler:    _FuzzerService_DeleteHistoryHTTPFuzzerTask_Handler,
		},
		{
			MethodName: "PreloadHTTPFuzzerParams",
			Handler:    _FuzzerService_PreloadHTTPFuzzerParams_Handler,
		},
		{
			MethodName: "RenderVariables",
			Handler:    _FuzzerService_RenderVariables_Handler,
		},
		{
			MethodName: "MatchHTTPResponse",
			Handler:    _FuzzerService_MatchHTTPResponse_Handler,
		},
		{
			MethodName: "ExtractHTTPResponse",
			Handler:    _FuzzerService_ExtractHTTPResponse_Handler,
		},
		{
			MethodName: "RedirectRequest",
			Handler:    _FuzzerService_RedirectRequest_Handler,
		},
		{
			MethodName: "HTTPRequestMutate",
			Handler:    _FuzzerService_HTTPRequestMutate_Handler,
		},
		{
			MethodName: "HTTPResponseMutate",
			Handler:    _FuzzerService_HTTPResponseMutate_Handler,
		},
		{
			MethodName: "FixUploadPacket",
			Handler:    _FuzzerService_FixUploadPacket_Handler,
		},
		{
			MethodName: "IsMultipartFormDataRequest",
			Handler:    _FuzzerService_IsMultipartFormDataRequest_Handler,
		},
		{
			MethodName: "GenerateExtractRule",
			Handler:    _FuzzerService_GenerateExtractRule_Handler,
		},
		{
			MethodName: "QueryHTTPFuzzerResponseByTaskId",
			Handler:    _FuzzerService_QueryHTTPFuzzerResponseByTaskId_Handler,
		},
		{
			MethodName: "ExtractUrl",
			Handler:    _FuzzerService_ExtractUrl_Handler,
		},
		{
			MethodName: "ConvertFuzzerResponseToHTTPFlow",
			Handler:    _FuzzerService_ConvertFuzzerResponseToHTTPFlow_Handler,
		},
		{
			MethodName: "StringFuzzer",
			Handler:    _FuzzerService_StringFuzzer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HTTPFuzzer",
			Handler:       _FuzzerService_HTTPFuzzer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExtractData",
			Handler:       _FuzzerService_ExtractData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fuzzer.proto",
}
