// merge multiple proto files, DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: yakgrpc.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateYakCodeByPacketRequest_Template int32

const (
	GenerateYakCodeByPacketRequest_Ordinary GenerateYakCodeByPacketRequest_Template = 0
	GenerateYakCodeByPacketRequest_Batch    GenerateYakCodeByPacketRequest_Template = 1
)

// Enum value maps for GenerateYakCodeByPacketRequest_Template.
var (
	GenerateYakCodeByPacketRequest_Template_name = map[int32]string{
		0: "Ordinary",
		1: "Batch",
	}
	GenerateYakCodeByPacketRequest_Template_value = map[string]int32{
		"Ordinary": 0,
		"Batch":    1,
	}
)

func (x GenerateYakCodeByPacketRequest_Template) Enum() *GenerateYakCodeByPacketRequest_Template {
	p := new(GenerateYakCodeByPacketRequest_Template)
	*p = x
	return p
}

func (x GenerateYakCodeByPacketRequest_Template) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateYakCodeByPacketRequest_Template) Descriptor() protoreflect.EnumDescriptor {
	return file_yakgrpc_proto_enumTypes[0].Descriptor()
}

func (GenerateYakCodeByPacketRequest_Template) Type() protoreflect.EnumType {
	return &file_yakgrpc_proto_enumTypes[0]
}

func (x GenerateYakCodeByPacketRequest_Template) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest_Template.Descriptor instead.
func (GenerateYakCodeByPacketRequest_Template) EnumDescriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{142, 0}
}

type HTTPRequestParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypePosition        string `protobuf:"bytes,1,opt,name=TypePosition,proto3" json:"TypePosition,omitempty"`
	ParamOriginValue    string `protobuf:"bytes,2,opt,name=ParamOriginValue,proto3" json:"ParamOriginValue,omitempty"`
	ParamName           string `protobuf:"bytes,3,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	TypePositionVerbose string `protobuf:"bytes,4,opt,name=TypePositionVerbose,proto3" json:"TypePositionVerbose,omitempty"`
}

func (x *HTTPRequestParamItem) Reset() {
	*x = HTTPRequestParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestParamItem) ProtoMessage() {}

func (x *HTTPRequestParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestParamItem.ProtoReflect.Descriptor instead.
func (*HTTPRequestParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{0}
}

func (x *HTTPRequestParamItem) GetTypePosition() string {
	if x != nil {
		return x.TypePosition
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamOriginValue() string {
	if x != nil {
		return x.ParamOriginValue
	}
	return ""
}

func (x *HTTPRequestParamItem) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *HTTPRequestParamItem) GetTypePositionVerbose() string {
	if x != nil {
		return x.TypePositionVerbose
	}
	return ""
}

type HTTPRequestAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params   []*HTTPRequestParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Requests []string                `protobuf:"bytes,2,rep,name=Requests,proto3" json:"Requests,omitempty"`
	IsHTTPS  bool                    `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
}

func (x *HTTPRequestAnalysis) Reset() {
	*x = HTTPRequestAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysis) ProtoMessage() {}

func (x *HTTPRequestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysis.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysis) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequestAnalysis) GetParams() []*HTTPRequestParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetRequests() []string {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *HTTPRequestAnalysis) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type HTTPRequestAnalysisMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  string `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	IsHTTPS  bool   `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Response string `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPRequestAnalysisMaterial) Reset() {
	*x = HTTPRequestAnalysisMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestAnalysisMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestAnalysisMaterial) ProtoMessage() {}

func (x *HTTPRequestAnalysisMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestAnalysisMaterial.ProtoReflect.Descriptor instead.
func (*HTTPRequestAnalysisMaterial) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{2}
}

func (x *HTTPRequestAnalysisMaterial) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *HTTPRequestAnalysisMaterial) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPRequestAnalysisMaterial) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type GroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType     string `protobuf:"bytes,1,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	ShowServiceType string `protobuf:"bytes,2,opt,name=ShowServiceType,proto3" json:"ShowServiceType,omitempty"`
	Total           int32  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{3}
}

func (x *GroupList) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *GroupList) GetShowServiceType() string {
	if x != nil {
		return x.ShowServiceType
	}
	return ""
}

func (x *GroupList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PortsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName  string       `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupLists []*GroupList `protobuf:"bytes,2,rep,name=GroupLists,proto3" json:"GroupLists,omitempty"`
}

func (x *PortsGroup) Reset() {
	*x = PortsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortsGroup) ProtoMessage() {}

func (x *PortsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortsGroup.ProtoReflect.Descriptor instead.
func (*PortsGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{4}
}

func (x *PortsGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PortsGroup) GetGroupLists() []*GroupList {
	if x != nil {
		return x.GroupLists
	}
	return nil
}

type QueryPortsGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortsGroupList []*PortsGroup `protobuf:"bytes,1,rep,name=PortsGroupList,proto3" json:"PortsGroupList,omitempty"`
}

func (x *QueryPortsGroupResponse) Reset() {
	*x = QueryPortsGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsGroupResponse) ProtoMessage() {}

func (x *QueryPortsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsGroupResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{5}
}

func (x *QueryPortsGroupResponse) GetPortsGroupList() []*PortsGroup {
	if x != nil {
		return x.PortsGroupList
	}
	return nil
}

type QueryPortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination     *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Hosts          string  `protobuf:"bytes,2,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports          string  `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Service        string  `protobuf:"bytes,4,opt,name=Service,proto3" json:"Service,omitempty"`
	State          string  `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Title          string  `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	All            bool    `protobuf:"varint,7,opt,name=All,proto3" json:"All,omitempty"`
	Keywords       string  `protobuf:"bytes,8,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	TitleEffective bool    `protobuf:"varint,9,opt,name=TitleEffective,proto3" json:"TitleEffective,omitempty"`
	ComplexSelect  string  `protobuf:"bytes,10,opt,name=ComplexSelect,proto3" json:"ComplexSelect,omitempty"`
	Proto          string  `protobuf:"bytes,11,opt,name=Proto,proto3" json:"Proto,omitempty"`
}

func (x *QueryPortsRequest) Reset() {
	*x = QueryPortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsRequest) ProtoMessage() {}

func (x *QueryPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsRequest.ProtoReflect.Descriptor instead.
func (*QueryPortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{6}
}

func (x *QueryPortsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *QueryPortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryPortsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *QueryPortsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueryPortsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryPortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *QueryPortsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryPortsRequest) GetTitleEffective() bool {
	if x != nil {
		return x.TitleEffective
	}
	return false
}

func (x *QueryPortsRequest) GetComplexSelect() string {
	if x != nil {
		return x.ComplexSelect
	}
	return ""
}

func (x *QueryPortsRequest) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string   `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	IPInteger   int64    `protobuf:"varint,2,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	Port        int64    `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto       string   `protobuf:"bytes,4,opt,name=Proto,proto3" json:"Proto,omitempty"`
	ServiceType string   `protobuf:"bytes,5,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	State       string   `protobuf:"bytes,6,opt,name=State,proto3" json:"State,omitempty"`
	Reason      string   `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Fingerprint string   `protobuf:"bytes,8,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	CPE         []string `protobuf:"bytes,9,rep,name=CPE,proto3" json:"CPE,omitempty"`
	HtmlTitle   string   `protobuf:"bytes,10,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Id          int64    `protobuf:"varint,11,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt   int64    `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   int64    `protobuf:"varint,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TaskName    string   `protobuf:"bytes,14,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{7}
}

func (x *Port) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Port) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Port) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Port) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Port) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Port) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Port) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Port) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Port) GetCPE() []string {
	if x != nil {
		return x.CPE
	}
	return nil
}

func (x *Port) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *Port) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Port) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Port) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Port) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type QueryPortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Port `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryPortsResponse) Reset() {
	*x = QueryPortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortsResponse) ProtoMessage() {}

func (x *QueryPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortsResponse.ProtoReflect.Descriptor instead.
func (*QueryPortsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{8}
}

func (x *QueryPortsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPortsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPortsResponse) GetData() []*Port {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeletePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts     string             `protobuf:"bytes,1,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Ports     string             `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Id        []int64            `protobuf:"varint,3,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	All       bool               `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	Ids       []int64            `protobuf:"varint,5,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	DeleteAll bool               `protobuf:"varint,6,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	Filter    *QueryPortsRequest `protobuf:"bytes,7,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *DeletePortsRequest) Reset() {
	*x = DeletePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortsRequest) ProtoMessage() {}

func (x *DeletePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortsRequest.ProtoReflect.Descriptor instead.
func (*DeletePortsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePortsRequest) GetHosts() string {
	if x != nil {
		return x.Hosts
	}
	return ""
}

func (x *DeletePortsRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *DeletePortsRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeletePortsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DeletePortsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeletePortsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeletePortsRequest) GetFilter() *QueryPortsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	DomainKeyword string  `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string  `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
}

func (x *QueryHostsRequest) Reset() {
	*x = QueryHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsRequest) ProtoMessage() {}

func (x *QueryHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsRequest.ProtoReflect.Descriptor instead.
func (*QueryHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{10}
}

func (x *QueryHostsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IP            string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	IPInteger     int64    `protobuf:"varint,3,opt,name=IPInteger,proto3" json:"IPInteger,omitempty"`
	IsInPublicNet bool     `protobuf:"varint,4,opt,name=IsInPublicNet,proto3" json:"IsInPublicNet,omitempty"`
	Domains       []string `protobuf:"bytes,5,rep,name=Domains,proto3" json:"Domains,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{11}
}

func (x *Host) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Host) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Host) GetIPInteger() int64 {
	if x != nil {
		return x.IPInteger
	}
	return 0
}

func (x *Host) GetIsInPublicNet() bool {
	if x != nil {
		return x.IsInPublicNet
	}
	return false
}

func (x *Host) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type QueryHostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Host `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryHostsResponse) Reset() {
	*x = QueryHostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHostsResponse) ProtoMessage() {}

func (x *QueryHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHostsResponse.ProtoReflect.Descriptor instead.
func (*QueryHostsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{12}
}

func (x *QueryHostsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHostsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHostsResponse) GetData() []*Host {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll     bool   `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteHostsRequest) Reset() {
	*x = DeleteHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostsRequest) ProtoMessage() {}

func (x *DeleteHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteHostsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHostsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteHostsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteHostsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type QueryDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Network       string  `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	DomainKeyword string  `protobuf:"bytes,3,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Title         string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	All           bool    `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *QueryDomainsRequest) Reset() {
	*x = QueryDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsRequest) ProtoMessage() {}

func (x *QueryDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsRequest.ProtoReflect.Descriptor instead.
func (*QueryDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{14}
}

func (x *QueryDomainsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *QueryDomainsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryDomainsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DomainName string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	IPAddr     string `protobuf:"bytes,3,opt,name=IPAddr,proto3" json:"IPAddr,omitempty"`
	HTTPTitle  string `protobuf:"bytes,4,opt,name=HTTPTitle,proto3" json:"HTTPTitle,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{15}
}

func (x *Domain) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Domain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Domain) GetIPAddr() string {
	if x != nil {
		return x.IPAddr
	}
	return ""
}

func (x *Domain) GetHTTPTitle() string {
	if x != nil {
		return x.HTTPTitle
	}
	return ""
}

type QueryDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging   `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64     `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Domain `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryDomainsResponse) Reset() {
	*x = QueryDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainsResponse) ProtoMessage() {}

func (x *QueryDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainsResponse.ProtoReflect.Descriptor instead.
func (*QueryDomainsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{16}
}

func (x *QueryDomainsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryDomainsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDomainsResponse) GetData() []*Domain {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll     bool                 `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DomainKeyword string               `protobuf:"bytes,2,opt,name=DomainKeyword,proto3" json:"DomainKeyword,omitempty"`
	Network       string               `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	ID            int64                `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Filter        *QueryDomainsRequest `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs           []int64              `protobuf:"varint,6,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *DeleteDomainsRequest) Reset() {
	*x = DeleteDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainsRequest) ProtoMessage() {}

func (x *DeleteDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDomainsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteDomainsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDomainsRequest) GetDomainKeyword() string {
	if x != nil {
		return x.DomainKeyword
	}
	return ""
}

func (x *DeleteDomainsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteDomainsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteDomainsRequest) GetFilter() *QueryDomainsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteDomainsRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type AttachCombinedOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttachCombinedOutputRequest) Reset() {
	*x = AttachCombinedOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachCombinedOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachCombinedOutputRequest) ProtoMessage() {}

func (x *AttachCombinedOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachCombinedOutputRequest.ProtoReflect.Descriptor instead.
func (*AttachCombinedOutputRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{18}
}

type SaveTextToTemporalFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text []byte `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *SaveTextToTemporalFileRequest) Reset() {
	*x = SaveTextToTemporalFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTextToTemporalFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileRequest) ProtoMessage() {}

func (x *SaveTextToTemporalFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileRequest.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{19}
}

func (x *SaveTextToTemporalFileRequest) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type SaveTextToTemporalFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
}

func (x *SaveTextToTemporalFileResponse) Reset() {
	*x = SaveTextToTemporalFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTextToTemporalFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTextToTemporalFileResponse) ProtoMessage() {}

func (x *SaveTextToTemporalFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTextToTemporalFileResponse.ProtoReflect.Descriptor instead.
func (*SaveTextToTemporalFileResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{20}
}

func (x *SaveTextToTemporalFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetAvailableBruteTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []string `protobuf:"bytes,1,rep,name=Types,proto3" json:"Types,omitempty"`
}

func (x *GetAvailableBruteTypesResponse) Reset() {
	*x = GetAvailableBruteTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableBruteTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableBruteTypesResponse) ProtoMessage() {}

func (x *GetAvailableBruteTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableBruteTypesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableBruteTypesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetAvailableBruteTypesResponse) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type StartBruteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                       string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Targets                    string   `protobuf:"bytes,2,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetFile                 string   `protobuf:"bytes,3,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	Usernames                  []string `protobuf:"bytes,4,rep,name=Usernames,proto3" json:"Usernames,omitempty"`
	Passwords                  []string `protobuf:"bytes,5,rep,name=Passwords,proto3" json:"Passwords,omitempty"`
	Prefix                     []string `protobuf:"bytes,6,rep,name=Prefix,proto3" json:"Prefix,omitempty"`
	Timeout                    float32  `protobuf:"fixed32,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Concurrent                 int64    `protobuf:"varint,8,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	Retry                      int64    `protobuf:"varint,9,opt,name=Retry,proto3" json:"Retry,omitempty"`
	TargetTaskConcurrent       int64    `protobuf:"varint,10,opt,name=TargetTaskConcurrent,proto3" json:"TargetTaskConcurrent,omitempty"`
	OkToStop                   bool     `protobuf:"varint,11,opt,name=OkToStop,proto3" json:"OkToStop,omitempty"`
	DelayMin                   int64    `protobuf:"varint,12,opt,name=DelayMin,proto3" json:"DelayMin,omitempty"`
	DelayMax                   int64    `protobuf:"varint,13,opt,name=DelayMax,proto3" json:"DelayMax,omitempty"`
	PluginScriptName           string   `protobuf:"bytes,14,opt,name=PluginScriptName,proto3" json:"PluginScriptName,omitempty"`
	UsernameFile               string   `protobuf:"bytes,24,opt,name=UsernameFile,proto3" json:"UsernameFile,omitempty"`
	PasswordFile               string   `protobuf:"bytes,25,opt,name=PasswordFile,proto3" json:"PasswordFile,omitempty"`
	ReplaceDefaultUsernameDict bool     `protobuf:"varint,28,opt,name=ReplaceDefaultUsernameDict,proto3" json:"ReplaceDefaultUsernameDict,omitempty"`
	ReplaceDefaultPasswordDict bool     `protobuf:"varint,29,opt,name=ReplaceDefaultPasswordDict,proto3" json:"ReplaceDefaultPasswordDict,omitempty"`
}

func (x *StartBruteParams) Reset() {
	*x = StartBruteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBruteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBruteParams) ProtoMessage() {}

func (x *StartBruteParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBruteParams.ProtoReflect.Descriptor instead.
func (*StartBruteParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{22}
}

func (x *StartBruteParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StartBruteParams) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBruteParams) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *StartBruteParams) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *StartBruteParams) GetPasswords() []string {
	if x != nil {
		return x.Passwords
	}
	return nil
}

func (x *StartBruteParams) GetPrefix() []string {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *StartBruteParams) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StartBruteParams) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBruteParams) GetRetry() int64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *StartBruteParams) GetTargetTaskConcurrent() int64 {
	if x != nil {
		return x.TargetTaskConcurrent
	}
	return 0
}

func (x *StartBruteParams) GetOkToStop() bool {
	if x != nil {
		return x.OkToStop
	}
	return false
}

func (x *StartBruteParams) GetDelayMin() int64 {
	if x != nil {
		return x.DelayMin
	}
	return 0
}

func (x *StartBruteParams) GetDelayMax() int64 {
	if x != nil {
		return x.DelayMax
	}
	return 0
}

func (x *StartBruteParams) GetPluginScriptName() string {
	if x != nil {
		return x.PluginScriptName
	}
	return ""
}

func (x *StartBruteParams) GetUsernameFile() string {
	if x != nil {
		return x.UsernameFile
	}
	return ""
}

func (x *StartBruteParams) GetPasswordFile() string {
	if x != nil {
		return x.PasswordFile
	}
	return ""
}

func (x *StartBruteParams) GetReplaceDefaultUsernameDict() bool {
	if x != nil {
		return x.ReplaceDefaultUsernameDict
	}
	return false
}

func (x *StartBruteParams) GetReplaceDefaultPasswordDict() bool {
	if x != nil {
		return x.ReplaceDefaultPasswordDict
	}
	return false
}

type IsRemoteAddrAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IsAvailable bool   `protobuf:"varint,2,opt,name=IsAvailable,proto3" json:"IsAvailable,omitempty"`
	Reason      string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *IsRemoteAddrAvailableResponse) Reset() {
	*x = IsRemoteAddrAvailableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRemoteAddrAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableResponse) ProtoMessage() {}

func (x *IsRemoteAddrAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{23}
}

func (x *IsRemoteAddrAvailableResponse) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *IsRemoteAddrAvailableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsRemoteAddrAvailableResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type IsRemoteAddrAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Probe   string `protobuf:"bytes,3,opt,name=Probe,proto3" json:"Probe,omitempty"`
}

func (x *IsRemoteAddrAvailableRequest) Reset() {
	*x = IsRemoteAddrAvailableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRemoteAddrAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRemoteAddrAvailableRequest) ProtoMessage() {}

func (x *IsRemoteAddrAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRemoteAddrAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsRemoteAddrAvailableRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{24}
}

func (x *IsRemoteAddrAvailableRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *IsRemoteAddrAvailableRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *IsRemoteAddrAvailableRequest) GetProbe() string {
	if x != nil {
		return x.Probe
	}
	return ""
}

type ChaosMakerRuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords    string   `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Protocols   []string `protobuf:"bytes,4,rep,name=Protocols,proto3" json:"Protocols,omitempty"`
	Solution    string   `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
}

func (x *ChaosMakerRuleGroup) Reset() {
	*x = ChaosMakerRuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosMakerRuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRuleGroup) ProtoMessage() {}

func (x *ChaosMakerRuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRuleGroup.ProtoReflect.Descriptor instead.
func (*ChaosMakerRuleGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{25}
}

func (x *ChaosMakerRuleGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRuleGroup) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *ChaosMakerRuleGroup) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

type ExecuteChaosMakerRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups                          []*ChaosMakerRuleGroup `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	ExtraOverrideDestinationAddress []string               `protobuf:"bytes,2,rep,name=ExtraOverrideDestinationAddress,proto3" json:"ExtraOverrideDestinationAddress,omitempty"`
	Concurrent                      int64                  `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	TrafficDelayMinSeconds          int32                  `protobuf:"varint,4,opt,name=TrafficDelayMinSeconds,proto3" json:"TrafficDelayMinSeconds,omitempty"`
	TrafficDelayMaxSeconds          int32                  `protobuf:"varint,5,opt,name=TrafficDelayMaxSeconds,proto3" json:"TrafficDelayMaxSeconds,omitempty"`
	ExtraRepeat                     int64                  `protobuf:"varint,6,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	GroupGapSeconds                 int64                  `protobuf:"varint,7,opt,name=GroupGapSeconds,proto3" json:"GroupGapSeconds,omitempty"`
}

func (x *ExecuteChaosMakerRuleRequest) Reset() {
	*x = ExecuteChaosMakerRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteChaosMakerRuleRequest) ProtoMessage() {}

func (x *ExecuteChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*ExecuteChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{26}
}

func (x *ExecuteChaosMakerRuleRequest) GetGroups() []*ChaosMakerRuleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraOverrideDestinationAddress() []string {
	if x != nil {
		return x.ExtraOverrideDestinationAddress
	}
	return nil
}

func (x *ExecuteChaosMakerRuleRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMinSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMinSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetTrafficDelayMaxSeconds() int32 {
	if x != nil {
		return x.TrafficDelayMaxSeconds
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetExtraRepeat() int64 {
	if x != nil {
		return x.ExtraRepeat
	}
	return 0
}

func (x *ExecuteChaosMakerRuleRequest) GetGroupGapSeconds() int64 {
	if x != nil {
		return x.GroupGapSeconds
	}
	return 0
}

type DeleteChaosMakerRuleByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteChaosMakerRuleByIDRequest) Reset() {
	*x = DeleteChaosMakerRuleByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChaosMakerRuleByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChaosMakerRuleByIDRequest) ProtoMessage() {}

func (x *DeleteChaosMakerRuleByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChaosMakerRuleByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteChaosMakerRuleByIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteChaosMakerRuleByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ChaosMakerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RawTrafficBeyondIpPacketBase64  string   `protobuf:"bytes,2,opt,name=RawTrafficBeyondIpPacketBase64,proto3" json:"RawTrafficBeyondIpPacketBase64,omitempty"`
	RawTrafficBeyondLinkLayerBase64 string   `protobuf:"bytes,3,opt,name=RawTrafficBeyondLinkLayerBase64,proto3" json:"RawTrafficBeyondLinkLayerBase64,omitempty"`
	RawTrafficBeyondHttpBase64      string   `protobuf:"bytes,4,opt,name=RawTrafficBeyondHttpBase64,proto3" json:"RawTrafficBeyondHttpBase64,omitempty"`
	RuleType                        string   `protobuf:"bytes,5,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	SuricataRaw                     string   `protobuf:"bytes,6,opt,name=SuricataRaw,proto3" json:"SuricataRaw,omitempty"`
	Protocol                        string   `protobuf:"bytes,7,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Action                          string   `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
	Name                            string   `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh                          string   `protobuf:"bytes,10,opt,name=NameZh,proto3" json:"NameZh,omitempty"`
	ClassType                       string   `protobuf:"bytes,11,opt,name=ClassType,proto3" json:"ClassType,omitempty"`
	ClassTypeZh                     string   `protobuf:"bytes,12,opt,name=ClassTypeZh,proto3" json:"ClassTypeZh,omitempty"`
	Group                           string   `protobuf:"bytes,13,opt,name=Group,proto3" json:"Group,omitempty"`
	Keywords                        string   `protobuf:"bytes,15,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	KeywordsZh                      string   `protobuf:"bytes,16,opt,name=KeywordsZh,proto3" json:"KeywordsZh,omitempty"`
	Description                     string   `protobuf:"bytes,17,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh                   string   `protobuf:"bytes,18,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	CVE                             []string `protobuf:"bytes,19,rep,name=CVE,proto3" json:"CVE,omitempty"`
}

func (x *ChaosMakerRule) Reset() {
	*x = ChaosMakerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosMakerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosMakerRule) ProtoMessage() {}

func (x *ChaosMakerRule) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosMakerRule.ProtoReflect.Descriptor instead.
func (*ChaosMakerRule) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{28}
}

func (x *ChaosMakerRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChaosMakerRule) GetRawTrafficBeyondIpPacketBase64() string {
	if x != nil {
		return x.RawTrafficBeyondIpPacketBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondLinkLayerBase64() string {
	if x != nil {
		return x.RawTrafficBeyondLinkLayerBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRawTrafficBeyondHttpBase64() string {
	if x != nil {
		return x.RawTrafficBeyondHttpBase64
	}
	return ""
}

func (x *ChaosMakerRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ChaosMakerRule) GetSuricataRaw() string {
	if x != nil {
		return x.SuricataRaw
	}
	return ""
}

func (x *ChaosMakerRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ChaosMakerRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ChaosMakerRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChaosMakerRule) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *ChaosMakerRule) GetClassType() string {
	if x != nil {
		return x.ClassType
	}
	return ""
}

func (x *ChaosMakerRule) GetClassTypeZh() string {
	if x != nil {
		return x.ClassTypeZh
	}
	return ""
}

func (x *ChaosMakerRule) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ChaosMakerRule) GetKeywordsZh() string {
	if x != nil {
		return x.KeywordsZh
	}
	return ""
}

func (x *ChaosMakerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChaosMakerRule) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *ChaosMakerRule) GetCVE() []string {
	if x != nil {
		return x.CVE
	}
	return nil
}

type QueryChaosMakerRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*ChaosMakerRule `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryChaosMakerRuleResponse) Reset() {
	*x = QueryChaosMakerRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaosMakerRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleResponse) ProtoMessage() {}

func (x *QueryChaosMakerRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{29}
}

func (x *QueryChaosMakerRuleResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryChaosMakerRuleResponse) GetData() []*ChaosMakerRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryChaosMakerRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	RuleType   string   `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	Keywords   []string `protobuf:"bytes,3,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
}

func (x *QueryChaosMakerRuleRequest) Reset() {
	*x = QueryChaosMakerRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaosMakerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaosMakerRuleRequest) ProtoMessage() {}

func (x *QueryChaosMakerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaosMakerRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryChaosMakerRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{30}
}

func (x *QueryChaosMakerRuleRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryChaosMakerRuleRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *QueryChaosMakerRuleRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type ImportChaosMakerRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	RuleType string `protobuf:"bytes,2,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
}

func (x *ImportChaosMakerRulesRequest) Reset() {
	*x = ImportChaosMakerRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChaosMakerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChaosMakerRulesRequest) ProtoMessage() {}

func (x *ImportChaosMakerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChaosMakerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportChaosMakerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{31}
}

func (x *ImportChaosMakerRulesRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ImportChaosMakerRulesRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

type AutoDecodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	TypeVerbose string `protobuf:"bytes,2,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	Origin      []byte `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Result      []byte `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AutoDecodeResult) Reset() {
	*x = AutoDecodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResult) ProtoMessage() {}

func (x *AutoDecodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResult.ProtoReflect.Descriptor instead.
func (*AutoDecodeResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{32}
}

func (x *AutoDecodeResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutoDecodeResult) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *AutoDecodeResult) GetOrigin() []byte {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *AutoDecodeResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type AutoDecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AutoDecodeResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *AutoDecodeResponse) Reset() {
	*x = AutoDecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeResponse) ProtoMessage() {}

func (x *AutoDecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeResponse.ProtoReflect.Descriptor instead.
func (*AutoDecodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{33}
}

func (x *AutoDecodeResponse) GetResults() []*AutoDecodeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AutoDecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AutoDecodeRequest) Reset() {
	*x = AutoDecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoDecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDecodeRequest) ProtoMessage() {}

func (x *AutoDecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDecodeRequest.ProtoReflect.Descriptor instead.
func (*AutoDecodeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{34}
}

func (x *AutoDecodeRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CodecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string           `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Type       string           `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Auto       bool             `protobuf:"varint,3,opt,name=Auto,proto3" json:"Auto,omitempty"`
	Params     []*ExecParamItem `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	ScriptName string           `protobuf:"bytes,5,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	InputBytes []byte           `protobuf:"bytes,6,opt,name=InputBytes,proto3" json:"InputBytes,omitempty"`
}

func (x *CodecRequest) Reset() {
	*x = CodecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecRequest) ProtoMessage() {}

func (x *CodecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecRequest.ProtoReflect.Descriptor instead.
func (*CodecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{35}
}

func (x *CodecRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CodecRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodecRequest) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *CodecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CodecRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *CodecRequest) GetInputBytes() []byte {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

type CodecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *CodecResponse) Reset() {
	*x = CodecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecResponse) ProtoMessage() {}

func (x *CodecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecResponse.ProtoReflect.Descriptor instead.
func (*CodecResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{36}
}

func (x *CodecResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type StaticAnalyzeErrorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message         []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	StartLineNumber int64  `protobuf:"varint,2,opt,name=StartLineNumber,proto3" json:"StartLineNumber,omitempty"`
	EndLineNumber   int64  `protobuf:"varint,3,opt,name=EndLineNumber,proto3" json:"EndLineNumber,omitempty"`
	StartColumn     int64  `protobuf:"varint,4,opt,name=StartColumn,proto3" json:"StartColumn,omitempty"`
	EndColumn       int64  `protobuf:"varint,5,opt,name=EndColumn,proto3" json:"EndColumn,omitempty"`
	RawMessage      []byte `protobuf:"bytes,6,opt,name=RawMessage,proto3" json:"RawMessage,omitempty"`
	Severity        string `protobuf:"bytes,7,opt,name=Severity,proto3" json:"Severity,omitempty"`
}

func (x *StaticAnalyzeErrorResult) Reset() {
	*x = StaticAnalyzeErrorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResult) ProtoMessage() {}

func (x *StaticAnalyzeErrorResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResult.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{37}
}

func (x *StaticAnalyzeErrorResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetStartLineNumber() int64 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndLineNumber() int64 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *StaticAnalyzeErrorResult) GetRawMessage() []byte {
	if x != nil {
		return x.RawMessage
	}
	return nil
}

func (x *StaticAnalyzeErrorResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type SuggestionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label             string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	InsertText        string `protobuf:"bytes,3,opt,name=InsertText,proto3" json:"InsertText,omitempty"`
	JustAppend        bool   `protobuf:"varint,4,opt,name=JustAppend,proto3" json:"JustAppend,omitempty"`
	DefinitionVerbose string `protobuf:"bytes,5,opt,name=DefinitionVerbose,proto3" json:"DefinitionVerbose,omitempty"`
}

func (x *SuggestionDescription) Reset() {
	*x = SuggestionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestionDescription) ProtoMessage() {}

func (x *SuggestionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestionDescription.ProtoReflect.Descriptor instead.
func (*SuggestionDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{38}
}

func (x *SuggestionDescription) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SuggestionDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SuggestionDescription) GetInsertText() string {
	if x != nil {
		return x.InsertText
	}
	return ""
}

func (x *SuggestionDescription) GetJustAppend() bool {
	if x != nil {
		return x.JustAppend
	}
	return false
}

func (x *SuggestionDescription) GetDefinitionVerbose() string {
	if x != nil {
		return x.DefinitionVerbose
	}
	return ""
}

type MethodSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExactKeywords []string                 `protobuf:"bytes,1,rep,name=ExactKeywords,proto3" json:"ExactKeywords,omitempty"`
	FuzzKeywords  []string                 `protobuf:"bytes,2,rep,name=FuzzKeywords,proto3" json:"FuzzKeywords,omitempty"`
	Regexp        []string                 `protobuf:"bytes,3,rep,name=Regexp,proto3" json:"Regexp,omitempty"`
	Suggestions   []*SuggestionDescription `protobuf:"bytes,4,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
	Verbose       string                   `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *MethodSuggestion) Reset() {
	*x = MethodSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodSuggestion) ProtoMessage() {}

func (x *MethodSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodSuggestion.ProtoReflect.Descriptor instead.
func (*MethodSuggestion) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{39}
}

func (x *MethodSuggestion) GetExactKeywords() []string {
	if x != nil {
		return x.ExactKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetFuzzKeywords() []string {
	if x != nil {
		return x.FuzzKeywords
	}
	return nil
}

func (x *MethodSuggestion) GetRegexp() []string {
	if x != nil {
		return x.Regexp
	}
	return nil
}

func (x *MethodSuggestion) GetSuggestions() []*SuggestionDescription {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *MethodSuggestion) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type GetYakVMBuildInMethodCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggestions []*MethodSuggestion `protobuf:"bytes,1,rep,name=Suggestions,proto3" json:"Suggestions,omitempty"`
}

func (x *GetYakVMBuildInMethodCompletionResponse) Reset() {
	*x = GetYakVMBuildInMethodCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakVMBuildInMethodCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionResponse) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetYakVMBuildInMethodCompletionResponse) GetSuggestions() []*MethodSuggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type YaklangCompileAndFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string                      `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Errors []*StaticAnalyzeErrorResult `protobuf:"bytes,2,rep,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *YaklangCompileAndFormatResponse) Reset() {
	*x = YaklangCompileAndFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangCompileAndFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatResponse) ProtoMessage() {}

func (x *YaklangCompileAndFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatResponse.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{41}
}

func (x *YaklangCompileAndFormatResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *YaklangCompileAndFormatResponse) GetErrors() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Errors
	}
	return nil
}

type YaklangCompileAndFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *YaklangCompileAndFormatRequest) Reset() {
	*x = YaklangCompileAndFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangCompileAndFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangCompileAndFormatRequest) ProtoMessage() {}

func (x *YaklangCompileAndFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangCompileAndFormatRequest.ProtoReflect.Descriptor instead.
func (*YaklangCompileAndFormatRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{42}
}

func (x *YaklangCompileAndFormatRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type StaticAnalyzeErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*StaticAnalyzeErrorResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *StaticAnalyzeErrorResponse) Reset() {
	*x = StaticAnalyzeErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorResponse) ProtoMessage() {}

func (x *StaticAnalyzeErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorResponse.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{43}
}

func (x *StaticAnalyzeErrorResponse) GetResult() []*StaticAnalyzeErrorResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type StaticAnalyzeErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *StaticAnalyzeErrorRequest) Reset() {
	*x = StaticAnalyzeErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalyzeErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalyzeErrorRequest) ProtoMessage() {}

func (x *StaticAnalyzeErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalyzeErrorRequest.ProtoReflect.Descriptor instead.
func (*StaticAnalyzeErrorRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{44}
}

func (x *StaticAnalyzeErrorRequest) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type YakitCompletionRawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson []byte `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
}

func (x *YakitCompletionRawResponse) Reset() {
	*x = YakitCompletionRawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakitCompletionRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakitCompletionRawResponse) ProtoMessage() {}

func (x *YakitCompletionRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakitCompletionRawResponse.ProtoReflect.Descriptor instead.
func (*YakitCompletionRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{45}
}

func (x *YakitCompletionRawResponse) GetRawJson() []byte {
	if x != nil {
		return x.RawJson
	}
	return nil
}

type GetYakVMBuildInMethodCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetYakVMBuildInMethodCompletionRequest) Reset() {
	*x = GetYakVMBuildInMethodCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakVMBuildInMethodCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakVMBuildInMethodCompletionRequest) ProtoMessage() {}

func (x *GetYakVMBuildInMethodCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakVMBuildInMethodCompletionRequest.ProtoReflect.Descriptor instead.
func (*GetYakVMBuildInMethodCompletionRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{46}
}

type HTTPCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	AllowOverride bool   `protobuf:"varint,3,opt,name=AllowOverride,proto3" json:"AllowOverride,omitempty"`
}

func (x *HTTPCookie) Reset() {
	*x = HTTPCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookie) ProtoMessage() {}

func (x *HTTPCookie) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookie.ProtoReflect.Descriptor instead.
func (*HTTPCookie) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{47}
}

func (x *HTTPCookie) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookie) GetAllowOverride() bool {
	if x != nil {
		return x.AllowOverride
	}
	return false
}

type StartBasicCrawlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets                string        `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	TargetsFile            string        `protobuf:"bytes,2,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	MaxDepth               string        `protobuf:"bytes,3,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	MaxCountOfLinks        string        `protobuf:"bytes,4,opt,name=MaxCountOfLinks,proto3" json:"MaxCountOfLinks,omitempty"`
	MaxCountOfRequest      string        `protobuf:"bytes,5,opt,name=MaxCountOfRequest,proto3" json:"MaxCountOfRequest,omitempty"`
	DisallowSuffix         string        `protobuf:"bytes,6,opt,name=DisallowSuffix,proto3" json:"DisallowSuffix,omitempty"`
	StartFromParentPath    string        `protobuf:"bytes,7,opt,name=StartFromParentPath,proto3" json:"StartFromParentPath,omitempty"`
	MaxRetryTimes          string        `protobuf:"bytes,8,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`
	AllowMethods           string        `protobuf:"bytes,9,opt,name=AllowMethods,proto3" json:"AllowMethods,omitempty"`
	AllowDomains           string        `protobuf:"bytes,10,opt,name=AllowDomains,proto3" json:"AllowDomains,omitempty"`
	ForbiddenDomain        string        `protobuf:"bytes,11,opt,name=ForbiddenDomain,proto3" json:"ForbiddenDomain,omitempty"`
	AllowUrlRegexp         string        `protobuf:"bytes,12,opt,name=AllowUrlRegexp,proto3" json:"AllowUrlRegexp,omitempty"`
	ForbiddenUrlRegexp     string        `protobuf:"bytes,13,opt,name=ForbiddenUrlRegexp,proto3" json:"ForbiddenUrlRegexp,omitempty"`
	UserAgent              string        `protobuf:"bytes,14,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	BasicAuth              string        `protobuf:"bytes,15,opt,name=BasicAuth,proto3" json:"BasicAuth,omitempty"`
	BasicAuthUsername      string        `protobuf:"bytes,16,opt,name=BasicAuthUsername,proto3" json:"BasicAuthUsername,omitempty"`
	BasicAuthPassword      string        `protobuf:"bytes,17,opt,name=BasicAuthPassword,proto3" json:"BasicAuthPassword,omitempty"`
	Proxies                []string      `protobuf:"bytes,18,rep,name=Proxies,proto3" json:"Proxies,omitempty"`
	Concurrent             int64         `protobuf:"varint,19,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	MaxRedirectTimes       int64         `protobuf:"varint,20,opt,name=MaxRedirectTimes,proto3" json:"MaxRedirectTimes,omitempty"`
	ConnectTimeoutSeconds  int64         `protobuf:"varint,21,opt,name=ConnectTimeoutSeconds,proto3" json:"ConnectTimeoutSeconds,omitempty"`
	ResponseTimeoutSeconds int64         `protobuf:"varint,22,opt,name=ResponseTimeoutSeconds,proto3" json:"ResponseTimeoutSeconds,omitempty"`
	Headers                []*HTTPHeader `protobuf:"bytes,23,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookies                []*HTTPCookie `protobuf:"bytes,24,rep,name=Cookies,proto3" json:"Cookies,omitempty"`
}

func (x *StartBasicCrawlerRequest) Reset() {
	*x = StartBasicCrawlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBasicCrawlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBasicCrawlerRequest) ProtoMessage() {}

func (x *StartBasicCrawlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBasicCrawlerRequest.ProtoReflect.Descriptor instead.
func (*StartBasicCrawlerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{48}
}

func (x *StartBasicCrawlerRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxDepth() string {
	if x != nil {
		return x.MaxDepth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfLinks() string {
	if x != nil {
		return x.MaxCountOfLinks
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxCountOfRequest() string {
	if x != nil {
		return x.MaxCountOfRequest
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetDisallowSuffix() string {
	if x != nil {
		return x.DisallowSuffix
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetStartFromParentPath() string {
	if x != nil {
		return x.StartFromParentPath
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetMaxRetryTimes() string {
	if x != nil {
		return x.MaxRetryTimes
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowMethods() string {
	if x != nil {
		return x.AllowMethods
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowDomains() string {
	if x != nil {
		return x.AllowDomains
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenDomain() string {
	if x != nil {
		return x.ForbiddenDomain
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetAllowUrlRegexp() string {
	if x != nil {
		return x.AllowUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetForbiddenUrlRegexp() string {
	if x != nil {
		return x.ForbiddenUrlRegexp
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuth() string {
	if x != nil {
		return x.BasicAuth
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthUsername() string {
	if x != nil {
		return x.BasicAuthUsername
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetBasicAuthPassword() string {
	if x != nil {
		return x.BasicAuthPassword
	}
	return ""
}

func (x *StartBasicCrawlerRequest) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetMaxRedirectTimes() int64 {
	if x != nil {
		return x.MaxRedirectTimes
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetConnectTimeoutSeconds() int64 {
	if x != nil {
		return x.ConnectTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetResponseTimeoutSeconds() int64 {
	if x != nil {
		return x.ResponseTimeoutSeconds
	}
	return 0
}

func (x *StartBasicCrawlerRequest) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *StartBasicCrawlerRequest) GetCookies() []*HTTPCookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

type GenerateWebsiteTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets string `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
}

func (x *GenerateWebsiteTreeRequest) Reset() {
	*x = GenerateWebsiteTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWebsiteTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeRequest) ProtoMessage() {}

func (x *GenerateWebsiteTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeRequest.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{49}
}

func (x *GenerateWebsiteTreeRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

type GenerateWebsiteTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeDataJson []byte `protobuf:"bytes,1,opt,name=TreeDataJson,proto3" json:"TreeDataJson,omitempty"`
}

func (x *GenerateWebsiteTreeResponse) Reset() {
	*x = GenerateWebsiteTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWebsiteTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWebsiteTreeResponse) ProtoMessage() {}

func (x *GenerateWebsiteTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWebsiteTreeResponse.ProtoReflect.Descriptor instead.
func (*GenerateWebsiteTreeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{50}
}

func (x *GenerateWebsiteTreeResponse) GetTreeDataJson() []byte {
	if x != nil {
		return x.TreeDataJson
	}
	return nil
}

type CWEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CWE               string   `protobuf:"bytes,1,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NameZh            string   `protobuf:"bytes,3,opt,name=NameZh,proto3" json:"NameZh,omitempty"`
	Status            string   `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Stable            bool     `protobuf:"varint,6,opt,name=Stable,proto3" json:"Stable,omitempty"`
	Incomplete        bool     `protobuf:"varint,7,opt,name=Incomplete,proto3" json:"Incomplete,omitempty"`
	Description       string   `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	DescriptionZh     string   `protobuf:"bytes,9,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	LongDescription   string   `protobuf:"bytes,10,opt,name=LongDescription,proto3" json:"LongDescription,omitempty"`
	LongDescriptionZh string   `protobuf:"bytes,11,opt,name=LongDescriptionZh,proto3" json:"LongDescriptionZh,omitempty"`
	RelativeLanguage  []string `protobuf:"bytes,12,rep,name=RelativeLanguage,proto3" json:"RelativeLanguage,omitempty"`
	Solution          string   `protobuf:"bytes,13,opt,name=Solution,proto3" json:"Solution,omitempty"`
	RelativeCVE       []string `protobuf:"bytes,14,rep,name=RelativeCVE,proto3" json:"RelativeCVE,omitempty"`
}

func (x *CWEDetail) Reset() {
	*x = CWEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWEDetail) ProtoMessage() {}

func (x *CWEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWEDetail.ProtoReflect.Descriptor instead.
func (*CWEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{51}
}

func (x *CWEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CWEDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CWEDetail) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CWEDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CWEDetail) GetStable() bool {
	if x != nil {
		return x.Stable
	}
	return false
}

func (x *CWEDetail) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *CWEDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CWEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *CWEDetail) GetLongDescriptionZh() string {
	if x != nil {
		return x.LongDescriptionZh
	}
	return ""
}

func (x *CWEDetail) GetRelativeLanguage() []string {
	if x != nil {
		return x.RelativeLanguage
	}
	return nil
}

func (x *CWEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CWEDetail) GetRelativeCVE() []string {
	if x != nil {
		return x.RelativeCVE
	}
	return nil
}

type CVEDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE                     string  `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	DescriptionZh           string  `protobuf:"bytes,2,opt,name=DescriptionZh,proto3" json:"DescriptionZh,omitempty"`
	DescriptionOrigin       string  `protobuf:"bytes,3,opt,name=DescriptionOrigin,proto3" json:"DescriptionOrigin,omitempty"`
	Title                   string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Solution                string  `protobuf:"bytes,5,opt,name=Solution,proto3" json:"Solution,omitempty"`
	References              string  `protobuf:"bytes,6,opt,name=References,proto3" json:"References,omitempty"`
	AccessVector            string  `protobuf:"bytes,7,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	AccessComplexity        string  `protobuf:"bytes,8,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	Authentication          string  `protobuf:"bytes,9,opt,name=Authentication,proto3" json:"Authentication,omitempty"`
	ConfidentialityImpact   string  `protobuf:"bytes,10,opt,name=ConfidentialityImpact,proto3" json:"ConfidentialityImpact,omitempty"`
	IntegrityImpact         string  `protobuf:"bytes,11,opt,name=IntegrityImpact,proto3" json:"IntegrityImpact,omitempty"`
	AvailabilityImpact      string  `protobuf:"bytes,12,opt,name=AvailabilityImpact,proto3" json:"AvailabilityImpact,omitempty"`
	Severity                string  `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	PublishedAt             int64   `protobuf:"varint,15,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	CWE                     string  `protobuf:"bytes,16,opt,name=CWE,proto3" json:"CWE,omitempty"`
	CVSSVersion             string  `protobuf:"bytes,17,opt,name=CVSSVersion,proto3" json:"CVSSVersion,omitempty"`
	CVSSVectorString        string  `protobuf:"bytes,18,opt,name=CVSSVectorString,proto3" json:"CVSSVectorString,omitempty"`
	BaseCVSSv2Score         float64 `protobuf:"fixed64,19,opt,name=BaseCVSSv2Score,proto3" json:"BaseCVSSv2Score,omitempty"`
	ExploitabilityScore     float64 `protobuf:"fixed64,20,opt,name=ExploitabilityScore,proto3" json:"ExploitabilityScore,omitempty"`
	ObtainAllPrivileged     bool    `protobuf:"varint,21,opt,name=ObtainAllPrivileged,proto3" json:"ObtainAllPrivileged,omitempty"`
	ObtainUserPrivileged    bool    `protobuf:"varint,22,opt,name=ObtainUserPrivileged,proto3" json:"ObtainUserPrivileged,omitempty"`
	ObtainOtherPrivileged   bool    `protobuf:"varint,23,opt,name=ObtainOtherPrivileged,proto3" json:"ObtainOtherPrivileged,omitempty"`
	UserInteractionRequired bool    `protobuf:"varint,24,opt,name=UserInteractionRequired,proto3" json:"UserInteractionRequired,omitempty"`
	Product                 string  `protobuf:"bytes,25,opt,name=Product,proto3" json:"Product,omitempty"`
	UpdatedAt               int64   `protobuf:"varint,26,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	LastModifiedData        int64   `protobuf:"varint,27,opt,name=LastModifiedData,proto3" json:"LastModifiedData,omitempty"`
}

func (x *CVEDetail) Reset() {
	*x = CVEDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetail) ProtoMessage() {}

func (x *CVEDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetail.ProtoReflect.Descriptor instead.
func (*CVEDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{52}
}

func (x *CVEDetail) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *CVEDetail) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CVEDetail) GetDescriptionOrigin() string {
	if x != nil {
		return x.DescriptionOrigin
	}
	return ""
}

func (x *CVEDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CVEDetail) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CVEDetail) GetReferences() string {
	if x != nil {
		return x.References
	}
	return ""
}

func (x *CVEDetail) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *CVEDetail) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *CVEDetail) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *CVEDetail) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *CVEDetail) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *CVEDetail) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *CVEDetail) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CVEDetail) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *CVEDetail) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *CVEDetail) GetCVSSVersion() string {
	if x != nil {
		return x.CVSSVersion
	}
	return ""
}

func (x *CVEDetail) GetCVSSVectorString() string {
	if x != nil {
		return x.CVSSVectorString
	}
	return ""
}

func (x *CVEDetail) GetBaseCVSSv2Score() float64 {
	if x != nil {
		return x.BaseCVSSv2Score
	}
	return 0
}

func (x *CVEDetail) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVEDetail) GetObtainAllPrivileged() bool {
	if x != nil {
		return x.ObtainAllPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainUserPrivileged() bool {
	if x != nil {
		return x.ObtainUserPrivileged
	}
	return false
}

func (x *CVEDetail) GetObtainOtherPrivileged() bool {
	if x != nil {
		return x.ObtainOtherPrivileged
	}
	return false
}

func (x *CVEDetail) GetUserInteractionRequired() bool {
	if x != nil {
		return x.UserInteractionRequired
	}
	return false
}

func (x *CVEDetail) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CVEDetail) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CVEDetail) GetLastModifiedData() int64 {
	if x != nil {
		return x.LastModifiedData
	}
	return 0
}

type CVEDetailEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE *CVEDetail   `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
	CWE []*CWEDetail `protobuf:"bytes,2,rep,name=CWE,proto3" json:"CWE,omitempty"`
}

func (x *CVEDetailEx) Reset() {
	*x = CVEDetailEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEDetailEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEDetailEx) ProtoMessage() {}

func (x *CVEDetailEx) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEDetailEx.ProtoReflect.Descriptor instead.
func (*CVEDetailEx) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{53}
}

func (x *CVEDetailEx) GetCVE() *CVEDetail {
	if x != nil {
		return x.CVE
	}
	return nil
}

func (x *CVEDetailEx) GetCWE() []*CWEDetail {
	if x != nil {
		return x.CWE
	}
	return nil
}

type GetCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CVE string `protobuf:"bytes,1,opt,name=CVE,proto3" json:"CVE,omitempty"`
}

func (x *GetCVERequest) Reset() {
	*x = GetCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCVERequest) ProtoMessage() {}

func (x *GetCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCVERequest.ProtoReflect.Descriptor instead.
func (*GetCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{54}
}

func (x *GetCVERequest) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

type QueryCVEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*CVEDetail `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryCVEResponse) Reset() {
	*x = QueryCVEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVEResponse) ProtoMessage() {}

func (x *QueryCVEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVEResponse.ProtoReflect.Descriptor instead.
func (*QueryCVEResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{55}
}

func (x *QueryCVEResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVEResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCVEResponse) GetData() []*CVEDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryCVERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination              *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	AccessVector            string  `protobuf:"bytes,2,opt,name=AccessVector,proto3" json:"AccessVector,omitempty"`
	AccessComplexity        string  `protobuf:"bytes,3,opt,name=AccessComplexity,proto3" json:"AccessComplexity,omitempty"`
	CWE                     string  `protobuf:"bytes,4,opt,name=CWE,proto3" json:"CWE,omitempty"`
	Year                    string  `protobuf:"bytes,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Severity                string  `protobuf:"bytes,6,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Score                   float64 `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
	Product                 string  `protobuf:"bytes,8,opt,name=Product,proto3" json:"Product,omitempty"`
	AfterYear               string  `protobuf:"bytes,9,opt,name=AfterYear,proto3" json:"AfterYear,omitempty"`
	ChineseTranslationFirst bool    `protobuf:"varint,10,opt,name=ChineseTranslationFirst,proto3" json:"ChineseTranslationFirst,omitempty"`
	Keywords                string  `protobuf:"bytes,11,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
}

func (x *QueryCVERequest) Reset() {
	*x = QueryCVERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCVERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCVERequest) ProtoMessage() {}

func (x *QueryCVERequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCVERequest.ProtoReflect.Descriptor instead.
func (*QueryCVERequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{56}
}

func (x *QueryCVERequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCVERequest) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *QueryCVERequest) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *QueryCVERequest) GetCWE() string {
	if x != nil {
		return x.CWE
	}
	return ""
}

func (x *QueryCVERequest) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *QueryCVERequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QueryCVERequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QueryCVERequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *QueryCVERequest) GetAfterYear() string {
	if x != nil {
		return x.AfterYear
	}
	return ""
}

func (x *QueryCVERequest) GetChineseTranslationFirst() bool {
	if x != nil {
		return x.ChineseTranslationFirst
	}
	return false
}

func (x *QueryCVERequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type ImportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ImportsProfileDatabaseRequest) Reset() {
	*x = ImportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ImportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{57}
}

func (x *ImportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type ExportsProfileDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProfileFile string `protobuf:"bytes,1,opt,name=LocalProfileFile,proto3" json:"LocalProfileFile,omitempty"`
}

func (x *ExportsProfileDatabaseRequest) Reset() {
	*x = ExportsProfileDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportsProfileDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportsProfileDatabaseRequest) ProtoMessage() {}

func (x *ExportsProfileDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportsProfileDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ExportsProfileDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{58}
}

func (x *ExportsProfileDatabaseRequest) GetLocalProfileFile() string {
	if x != nil {
		return x.LocalProfileFile
	}
	return ""
}

type UpdateCVEDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy               string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	JustUpdateLatestCVE bool   `protobuf:"varint,2,opt,name=JustUpdateLatestCVE,proto3" json:"JustUpdateLatestCVE,omitempty"`
}

func (x *UpdateCVEDatabaseRequest) Reset() {
	*x = UpdateCVEDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCVEDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCVEDatabaseRequest) ProtoMessage() {}

func (x *UpdateCVEDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCVEDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCVEDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateCVEDatabaseRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateCVEDatabaseRequest) GetJustUpdateLatestCVE() bool {
	if x != nil {
		return x.JustUpdateLatestCVE
	}
	return false
}

type IsCVEDatabaseReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ShouldUpdate bool   `protobuf:"varint,3,opt,name=ShouldUpdate,proto3" json:"ShouldUpdate,omitempty"`
}

func (x *IsCVEDatabaseReadyResponse) Reset() {
	*x = IsCVEDatabaseReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyResponse) ProtoMessage() {}

func (x *IsCVEDatabaseReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyResponse.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{60}
}

func (x *IsCVEDatabaseReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsCVEDatabaseReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IsCVEDatabaseReadyResponse) GetShouldUpdate() bool {
	if x != nil {
		return x.ShouldUpdate
	}
	return false
}

type IsCVEDatabaseReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCVEDatabaseReadyRequest) Reset() {
	*x = IsCVEDatabaseReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCVEDatabaseReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCVEDatabaseReadyRequest) ProtoMessage() {}

func (x *IsCVEDatabaseReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCVEDatabaseReadyRequest.ProtoReflect.Descriptor instead.
func (*IsCVEDatabaseReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{61}
}

type HTTPRequestBuilderParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRawHTTPRequest    bool      `protobuf:"varint,1,opt,name=IsRawHTTPRequest,proto3" json:"IsRawHTTPRequest,omitempty"`
	IsHttps             bool      `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	RawHTTPRequest      []byte    `protobuf:"bytes,3,opt,name=RawHTTPRequest,proto3" json:"RawHTTPRequest,omitempty"`
	Method              string    `protobuf:"bytes,4,opt,name=Method,proto3" json:"Method,omitempty"`
	Path                []string  `protobuf:"bytes,6,rep,name=Path,proto3" json:"Path,omitempty"`
	Headers             []*KVPair `protobuf:"bytes,7,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookie              []*KVPair `protobuf:"bytes,8,rep,name=Cookie,proto3" json:"Cookie,omitempty"`
	GetParams           []*KVPair `protobuf:"bytes,9,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	Body                []byte    `protobuf:"bytes,10,opt,name=Body,proto3" json:"Body,omitempty"`
	PostParams          []*KVPair `protobuf:"bytes,11,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	MultipartParams     []*KVPair `protobuf:"bytes,12,rep,name=MultipartParams,proto3" json:"MultipartParams,omitempty"`
	MultipartFileParams []*KVPair `protobuf:"bytes,13,rep,name=MultipartFileParams,proto3" json:"MultipartFileParams,omitempty"`
}

func (x *HTTPRequestBuilderParams) Reset() {
	*x = HTTPRequestBuilderParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderParams) ProtoMessage() {}

func (x *HTTPRequestBuilderParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{62}
}

func (x *HTTPRequestBuilderParams) GetIsRawHTTPRequest() bool {
	if x != nil {
		return x.IsRawHTTPRequest
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderParams) GetRawHTTPRequest() []byte {
	if x != nil {
		return x.RawHTTPRequest
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequestBuilderParams) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetHeaders() []*KVPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetCookie() []*KVPair {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetGetParams() []*KVPair {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetPostParams() []*KVPair {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartParams() []*KVPair {
	if x != nil {
		return x.MultipartParams
	}
	return nil
}

func (x *HTTPRequestBuilderParams) GetMultipartFileParams() []*KVPair {
	if x != nil {
		return x.MultipartFileParams
	}
	return nil
}

type SmokingEvaluatePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests   []*HTTPRequestBuilderParams `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	PluginName string                      `protobuf:"bytes,2,opt,name=PluginName,proto3" json:"PluginName,omitempty"`
	Code       string                      `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType string                      `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
}

func (x *SmokingEvaluatePluginRequest) Reset() {
	*x = SmokingEvaluatePluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginRequest) ProtoMessage() {}

func (x *SmokingEvaluatePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginRequest.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{63}
}

func (x *SmokingEvaluatePluginRequest) GetRequests() []*HTTPRequestBuilderParams {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SmokingEvaluatePluginRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SmokingEvaluatePluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type SmokingEvaluateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item       string `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
	Suggestion string `protobuf:"bytes,2,opt,name=Suggestion,proto3" json:"Suggestion,omitempty"`
	ExtraInfo  []byte `protobuf:"bytes,3,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
}

func (x *SmokingEvaluateResult) Reset() {
	*x = SmokingEvaluateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluateResult) ProtoMessage() {}

func (x *SmokingEvaluateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluateResult.ProtoReflect.Descriptor instead.
func (*SmokingEvaluateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{64}
}

func (x *SmokingEvaluateResult) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *SmokingEvaluateResult) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

func (x *SmokingEvaluateResult) GetExtraInfo() []byte {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type SmokingEvaluatePluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   int64                    `protobuf:"varint,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Results []*SmokingEvaluateResult `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SmokingEvaluatePluginResponse) Reset() {
	*x = SmokingEvaluatePluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmokingEvaluatePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmokingEvaluatePluginResponse) ProtoMessage() {}

func (x *SmokingEvaluatePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmokingEvaluatePluginResponse.ProtoReflect.Descriptor instead.
func (*SmokingEvaluatePluginResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{65}
}

func (x *SmokingEvaluatePluginResponse) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SmokingEvaluatePluginResponse) GetResults() []*SmokingEvaluateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DebugPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                string                    `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	PluginType          string                    `protobuf:"bytes,2,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Input               string                    `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`
	HTTPRequestTemplate *HTTPRequestBuilderParams `protobuf:"bytes,4,opt,name=HTTPRequestTemplate,proto3" json:"HTTPRequestTemplate,omitempty"`
}

func (x *DebugPluginRequest) Reset() {
	*x = DebugPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPluginRequest) ProtoMessage() {}

func (x *DebugPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPluginRequest.ProtoReflect.Descriptor instead.
func (*DebugPluginRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{66}
}

func (x *DebugPluginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DebugPluginRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DebugPluginRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *DebugPluginRequest) GetHTTPRequestTemplate() *HTTPRequestBuilderParams {
	if x != nil {
		return x.HTTPRequestTemplate
	}
	return nil
}

type HTTPRequestBuilderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps     bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	HTTPRequest []byte `protobuf:"bytes,3,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *HTTPRequestBuilderResult) Reset() {
	*x = HTTPRequestBuilderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResult) ProtoMessage() {}

func (x *HTTPRequestBuilderResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResult.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{67}
}

func (x *HTTPRequestBuilderResult) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *HTTPRequestBuilderResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPRequestBuilderResult) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

type HTTPRequestBuilderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   []*HTTPRequestBuilderResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	Templates string                      `protobuf:"bytes,2,opt,name=Templates,proto3" json:"Templates,omitempty"`
}

func (x *HTTPRequestBuilderResponse) Reset() {
	*x = HTTPRequestBuilderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestBuilderResponse) ProtoMessage() {}

func (x *HTTPRequestBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestBuilderResponse.ProtoReflect.Descriptor instead.
func (*HTTPRequestBuilderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{68}
}

func (x *HTTPRequestBuilderResponse) GetResults() []*HTTPRequestBuilderResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HTTPRequestBuilderResponse) GetTemplates() string {
	if x != nil {
		return x.Templates
	}
	return ""
}

type GetMarkdownDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script   *YakScript `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	Markdown string     `protobuf:"bytes,2,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
}

func (x *GetMarkdownDocumentResponse) Reset() {
	*x = GetMarkdownDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentResponse) ProtoMessage() {}

func (x *GetMarkdownDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{69}
}

func (x *GetMarkdownDocumentResponse) GetScript() *YakScript {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *GetMarkdownDocumentResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type GetMarkdownDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
}

func (x *GetMarkdownDocumentRequest) Reset() {
	*x = GetMarkdownDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownDocumentRequest) ProtoMessage() {}

func (x *GetMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{70}
}

func (x *GetMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *GetMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type SaveMarkdownDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	YakScriptId   int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Markdown      string `protobuf:"bytes,3,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
}

func (x *SaveMarkdownDocumentRequest) Reset() {
	*x = SaveMarkdownDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMarkdownDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMarkdownDocumentRequest) ProtoMessage() {}

func (x *SaveMarkdownDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMarkdownDocumentRequest.ProtoReflect.Descriptor instead.
func (*SaveMarkdownDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{71}
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *SaveMarkdownDocumentRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *SaveMarkdownDocumentRequest) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

type ExecYakitPluginsByYakScriptFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Target      string                 `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Ports       string                 `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	ExtraParams []*ExecParamItem       `protobuf:"bytes,4,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	TargetFile  string                 `protobuf:"bytes,5,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) Reset() {
	*x = ExecYakitPluginsByYakScriptFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecYakitPluginsByYakScriptFilterRequest) ProtoMessage() {}

func (x *ExecYakitPluginsByYakScriptFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecYakitPluginsByYakScriptFilterRequest.ProtoReflect.Descriptor instead.
func (*ExecYakitPluginsByYakScriptFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{72}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

type ExecPacketScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HTTPFlow            []int64  `protobuf:"varint,1,rep,packed,name=HTTPFlow,proto3" json:"HTTPFlow,omitempty"`
	HTTPRequest         []byte   `protobuf:"bytes,2,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPS               bool     `protobuf:"varint,3,opt,name=HTTPS,proto3" json:"HTTPS,omitempty"`
	AllowFuzzTag        bool     `protobuf:"varint,5,opt,name=AllowFuzzTag,proto3" json:"AllowFuzzTag,omitempty"`
	TotalTimeoutSeconds int64    `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Timeout             int64    `protobuf:"varint,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	PluginConcurrent    int64    `protobuf:"varint,8,opt,name=PluginConcurrent,proto3" json:"PluginConcurrent,omitempty"`
	PacketConcurrent    int64    `protobuf:"varint,9,opt,name=PacketConcurrent,proto3" json:"PacketConcurrent,omitempty"`
	PluginList          []string `protobuf:"bytes,10,rep,name=PluginList,proto3" json:"PluginList,omitempty"`
	Proxy               string   `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ExecPacketScanRequest) Reset() {
	*x = ExecPacketScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecPacketScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecPacketScanRequest) ProtoMessage() {}

func (x *ExecPacketScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecPacketScanRequest.ProtoReflect.Descriptor instead.
func (*ExecPacketScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{73}
}

func (x *ExecPacketScanRequest) GetHTTPFlow() []int64 {
	if x != nil {
		return x.HTTPFlow
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPS() bool {
	if x != nil {
		return x.HTTPS
	}
	return false
}

func (x *ExecPacketScanRequest) GetAllowFuzzTag() bool {
	if x != nil {
		return x.AllowFuzzTag
	}
	return false
}

func (x *ExecPacketScanRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecPacketScanRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginConcurrent() int64 {
	if x != nil {
		return x.PluginConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPacketConcurrent() int64 {
	if x != nil {
		return x.PacketConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginList() []string {
	if x != nil {
		return x.PluginList
	}
	return nil
}

func (x *ExecPacketScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params         []*ExecParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Script         string           `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptId       string           `protobuf:"bytes,3,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	YakScriptId    int64            `protobuf:"varint,5,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	RunnerParamRaw string           `protobuf:"bytes,6,opt,name=RunnerParamRaw,proto3" json:"RunnerParamRaw,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{74}
}

func (x *ExecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ExecRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecRequest) GetRunnerParamRaw() string {
	if x != nil {
		return x.RunnerParamRaw
	}
	return ""
}

type ExecHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptId   int64   `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string  `protobuf:"bytes,4,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *ExecHistoryRequest) Reset() {
	*x = ExecHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRequest) ProtoMessage() {}

func (x *ExecHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRequest.ProtoReflect.Descriptor instead.
func (*ExecHistoryRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{75}
}

func (x *ExecHistoryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecHistoryRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type ExecHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script        string `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptId      string `protobuf:"bytes,2,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	Timestamp     int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	DurationMs    int64  `protobuf:"varint,4,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	Params        string `protobuf:"bytes,5,opt,name=Params,proto3" json:"Params,omitempty"`
	Ok            bool   `protobuf:"varint,7,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason        string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Id            string `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	Stdout        []byte `protobuf:"bytes,10,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr        []byte `protobuf:"bytes,11,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	RuntimeId     string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromYakModule string `protobuf:"bytes,13,opt,name=FromYakModule,proto3" json:"FromYakModule,omitempty"`
	StdoutLen     int64  `protobuf:"varint,14,opt,name=StdoutLen,proto3" json:"StdoutLen,omitempty"`
	StderrLen     int64  `protobuf:"varint,15,opt,name=StderrLen,proto3" json:"StderrLen,omitempty"`
	Messages      []byte `protobuf:"bytes,16,opt,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *ExecHistoryRecord) Reset() {
	*x = ExecHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecord) ProtoMessage() {}

func (x *ExecHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecord.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{76}
}

func (x *ExecHistoryRecord) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecHistoryRecord) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecHistoryRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecHistoryRecord) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ExecHistoryRecord) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ExecHistoryRecord) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecHistoryRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecHistoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecHistoryRecord) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecHistoryRecord) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *ExecHistoryRecord) GetFromYakModule() string {
	if x != nil {
		return x.FromYakModule
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdoutLen() int64 {
	if x != nil {
		return x.StdoutLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetStderrLen() int64 {
	if x != nil {
		return x.StderrLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ExecHistoryRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ExecHistoryRecord `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging              `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64                `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ExecHistoryRecordResponse) Reset() {
	*x = ExecHistoryRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecordResponse) ProtoMessage() {}

func (x *ExecHistoryRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecordResponse.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecordResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{77}
}

func (x *ExecHistoryRecordResponse) GetData() []*ExecHistoryRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExecBatchYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                string                 `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Keyword               string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Limit                 int64                  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	TotalTimeoutSeconds   int64                  `protobuf:"varint,4,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Type                  string                 `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Concurrent            int64                  `protobuf:"varint,6,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	ExtraParams           []*ExecParamItem       `protobuf:"bytes,7,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	ScriptNames           []string               `protobuf:"bytes,8,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	TargetFile            string                 `protobuf:"bytes,11,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	PluginFilter          *QueryYakScriptRequest `protobuf:"bytes,12,opt,name=PluginFilter,proto3" json:"PluginFilter,omitempty"`
	EnablePluginFilter    bool                   `protobuf:"varint,13,opt,name=EnablePluginFilter,proto3" json:"EnablePluginFilter,omitempty"`
	Proxy                 string                 `protobuf:"bytes,14,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ProgressTaskCount     int64                  `protobuf:"varint,15,opt,name=ProgressTaskCount,proto3" json:"ProgressTaskCount,omitempty"`
	BaseProgress          float64                `protobuf:"fixed64,16,opt,name=BaseProgress,proto3" json:"BaseProgress,omitempty"`
	FromRecover           bool                   `protobuf:"varint,17,opt,name=FromRecover,proto3" json:"FromRecover,omitempty"`
	YakScriptOnlineGroup  string                 `protobuf:"bytes,18,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName              string                 `protobuf:"bytes,19,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	ExcludedYakScript     []string               `protobuf:"bytes,22,rep,name=ExcludedYakScript,proto3" json:"ExcludedYakScript,omitempty"`
	DisableNucleiWorkflow bool                   `protobuf:"varint,23,opt,name=DisableNucleiWorkflow,proto3" json:"DisableNucleiWorkflow,omitempty"`
}

func (x *ExecBatchYakScriptRequest) Reset() {
	*x = ExecBatchYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptRequest) ProtoMessage() {}

func (x *ExecBatchYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{78}
}

func (x *ExecBatchYakScriptRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetPluginFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.PluginFilter
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetEnablePluginFilter() bool {
	if x != nil {
		return x.EnablePluginFilter
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetProgressTaskCount() int64 {
	if x != nil {
		return x.ProgressTaskCount
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetBaseProgress() float64 {
	if x != nil {
		return x.BaseProgress
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetFromRecover() bool {
	if x != nil {
		return x.FromRecover
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExcludedYakScript() []string {
	if x != nil {
		return x.ExcludedYakScript
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetDisableNucleiWorkflow() bool {
	if x != nil {
		return x.DisableNucleiWorkflow
	}
	return false
}

type ExecBatchYakScriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string           `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status                 string           `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Ok                     bool             `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason                 string           `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Exploitable            bool             `protobuf:"varint,6,opt,name=Exploitable,proto3" json:"Exploitable,omitempty"`
	PoC                    *YakScript       `protobuf:"bytes,7,opt,name=PoC,proto3" json:"PoC,omitempty"`
	Result                 *ExecResult      `protobuf:"bytes,8,opt,name=Result,proto3" json:"Result,omitempty"`
	ProgressMessage        bool             `protobuf:"varint,9,opt,name=ProgressMessage,proto3" json:"ProgressMessage,omitempty"`
	ProgressPercent        float64          `protobuf:"fixed64,10,opt,name=ProgressPercent,proto3" json:"ProgressPercent,omitempty"`
	ProgressTotal          int64            `protobuf:"varint,11,opt,name=ProgressTotal,proto3" json:"ProgressTotal,omitempty"`
	ProgressCount          int64            `protobuf:"varint,12,opt,name=ProgressCount,proto3" json:"ProgressCount,omitempty"`
	Target                 string           `protobuf:"bytes,13,opt,name=Target,proto3" json:"Target,omitempty"`
	ExtraParam             []*ExecParamItem `protobuf:"bytes,14,rep,name=ExtraParam,proto3" json:"ExtraParam,omitempty"`
	TaskId                 string           `protobuf:"bytes,15,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Timestamp              int64            `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ProgressRunning        int64            `protobuf:"varint,17,opt,name=ProgressRunning,proto3" json:"ProgressRunning,omitempty"`
	ScanTaskExecutingCount int64            `protobuf:"varint,18,opt,name=ScanTaskExecutingCount,proto3" json:"ScanTaskExecutingCount,omitempty"`
}

func (x *ExecBatchYakScriptResult) Reset() {
	*x = ExecBatchYakScriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptResult) ProtoMessage() {}

func (x *ExecBatchYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptResult.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{79}
}

func (x *ExecBatchYakScriptResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExploitable() bool {
	if x != nil {
		return x.Exploitable
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetPoC() *YakScript {
	if x != nil {
		return x.PoC
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetResult() *ExecResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetProgressMessage() bool {
	if x != nil {
		return x.ProgressMessage
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetProgressPercent() float64 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressTotal() int64 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressCount() int64 {
	if x != nil {
		return x.ProgressCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExtraParam() []*ExecParamItem {
	if x != nil {
		return x.ExtraParam
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressRunning() int64 {
	if x != nil {
		return x.ProgressRunning
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetScanTaskExecutingCount() int64 {
	if x != nil {
		return x.ScanTaskExecutingCount
	}
	return 0
}

type ExecBatchYakScriptUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *ExecBatchYakScriptUnfinishedTask) Reset() {
	*x = ExecBatchYakScriptUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptUnfinishedTask) ProtoMessage() {}

func (x *ExecBatchYakScriptUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptUnfinishedTask.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{80}
}

func (x *ExecBatchYakScriptUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type GetExecBatchYakScriptUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ExecBatchYakScriptUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{81}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) GetTasks() []*ExecBatchYakScriptUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetExecBatchYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{82}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RecoverExecBatchYakScriptUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) Reset() {
	*x = RecoverExecBatchYakScriptUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverExecBatchYakScriptUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{83}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ExtractableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=StringValue,proto3" json:"StringValue,omitempty"`
	BytesValue  []byte `protobuf:"bytes,2,opt,name=BytesValue,proto3" json:"BytesValue,omitempty"`
}

func (x *ExtractableData) Reset() {
	*x = ExtractableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractableData) ProtoMessage() {}

func (x *ExtractableData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractableData.ProtoReflect.Descriptor instead.
func (*ExtractableData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{84}
}

func (x *ExtractableData) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ExtractableData) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

type ExtractDataToFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonOutput      bool                        `protobuf:"varint,1,opt,name=JsonOutput,proto3" json:"JsonOutput,omitempty"`
	CSVOutput       bool                        `protobuf:"varint,2,opt,name=CSVOutput,proto3" json:"CSVOutput,omitempty"`
	DirName         string                      `protobuf:"bytes,3,opt,name=DirName,proto3" json:"DirName,omitempty"`
	Data            map[string]*ExtractableData `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileNamePattern string                      `protobuf:"bytes,5,opt,name=FileNamePattern,proto3" json:"FileNamePattern,omitempty"`
	Finished        bool                        `protobuf:"varint,6,opt,name=Finished,proto3" json:"Finished,omitempty"`
}

func (x *ExtractDataToFileRequest) Reset() {
	*x = ExtractDataToFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileRequest) ProtoMessage() {}

func (x *ExtractDataToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{85}
}

func (x *ExtractDataToFileRequest) GetJsonOutput() bool {
	if x != nil {
		return x.JsonOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetCSVOutput() bool {
	if x != nil {
		return x.CSVOutput
	}
	return false
}

func (x *ExtractDataToFileRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetData() map[string]*ExtractableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataToFileRequest) GetFileNamePattern() string {
	if x != nil {
		return x.FileNamePattern
	}
	return ""
}

func (x *ExtractDataToFileRequest) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type ExtractDataToFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
}

func (x *ExtractDataToFileResult) Reset() {
	*x = ExtractDataToFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataToFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataToFileResult) ProtoMessage() {}

func (x *ExtractDataToFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataToFileResult.ProtoReflect.Descriptor instead.
func (*ExtractDataToFileResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{86}
}

func (x *ExtractDataToFileResult) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type RegisterFacadesHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacadesUrl string `protobuf:"bytes,1,opt,name=FacadesUrl,proto3" json:"FacadesUrl,omitempty"`
}

func (x *RegisterFacadesHTTPResponse) Reset() {
	*x = RegisterFacadesHTTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPResponse) ProtoMessage() {}

func (x *RegisterFacadesHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPResponse.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{87}
}

func (x *RegisterFacadesHTTPResponse) GetFacadesUrl() string {
	if x != nil {
		return x.FacadesUrl
	}
	return ""
}

type RegisterFacadesHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HTTPFlowID   int64  `protobuf:"varint,1,opt,name=HTTPFlowID,proto3" json:"HTTPFlowID,omitempty"`
	HTTPResponse []byte `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *RegisterFacadesHTTPRequest) Reset() {
	*x = RegisterFacadesHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFacadesHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFacadesHTTPRequest) ProtoMessage() {}

func (x *RegisterFacadesHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFacadesHTTPRequest.ProtoReflect.Descriptor instead.
func (*RegisterFacadesHTTPRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{88}
}

func (x *RegisterFacadesHTTPRequest) GetHTTPFlowID() int64 {
	if x != nil {
		return x.HTTPFlowID
	}
	return 0
}

func (x *RegisterFacadesHTTPRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *RegisterFacadesHTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StartFacadesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableDNSLogServer bool                             `protobuf:"varint,3,opt,name=EnableDNSLogServer,proto3" json:"EnableDNSLogServer,omitempty"`
	DNSLogLocalPort    int32                            `protobuf:"varint,4,opt,name=DNSLogLocalPort,proto3" json:"DNSLogLocalPort,omitempty"`
	ConnectParam       *GetTunnelServerExternalIPParams `protobuf:"bytes,5,opt,name=ConnectParam,proto3" json:"ConnectParam,omitempty"`
	DNSLogRemotePort   int32                            `protobuf:"varint,7,opt,name=DNSLogRemotePort,proto3" json:"DNSLogRemotePort,omitempty"`
	ExternalDomain     string                           `protobuf:"bytes,8,opt,name=ExternalDomain,proto3" json:"ExternalDomain,omitempty"`
	Verify             bool                             `protobuf:"varint,9,opt,name=Verify,proto3" json:"Verify,omitempty"`
	FacadeRemotePort   int32                            `protobuf:"varint,16,opt,name=FacadeRemotePort,proto3" json:"FacadeRemotePort,omitempty"`
	LocalFacadeHost    string                           `protobuf:"bytes,41,opt,name=LocalFacadeHost,proto3" json:"LocalFacadeHost,omitempty"`
	LocalFacadePort    int32                            `protobuf:"varint,42,opt,name=LocalFacadePort,proto3" json:"LocalFacadePort,omitempty"`
}

func (x *StartFacadesParams) Reset() {
	*x = StartFacadesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesParams) ProtoMessage() {}

func (x *StartFacadesParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesParams.ProtoReflect.Descriptor instead.
func (*StartFacadesParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{89}
}

func (x *StartFacadesParams) GetEnableDNSLogServer() bool {
	if x != nil {
		return x.EnableDNSLogServer
	}
	return false
}

func (x *StartFacadesParams) GetDNSLogLocalPort() int32 {
	if x != nil {
		return x.DNSLogLocalPort
	}
	return 0
}

func (x *StartFacadesParams) GetConnectParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParam
	}
	return nil
}

func (x *StartFacadesParams) GetDNSLogRemotePort() int32 {
	if x != nil {
		return x.DNSLogRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetExternalDomain() string {
	if x != nil {
		return x.ExternalDomain
	}
	return ""
}

func (x *StartFacadesParams) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *StartFacadesParams) GetFacadeRemotePort() int32 {
	if x != nil {
		return x.FacadeRemotePort
	}
	return 0
}

func (x *StartFacadesParams) GetLocalFacadeHost() string {
	if x != nil {
		return x.LocalFacadeHost
	}
	return ""
}

func (x *StartFacadesParams) GetLocalFacadePort() int32 {
	if x != nil {
		return x.LocalFacadePort
	}
	return 0
}

type StartFacadesWithYsoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRemote            bool                             `protobuf:"varint,1,opt,name=IsRemote,proto3" json:"IsRemote,omitempty"`
	ReversePort         int32                            `protobuf:"varint,2,opt,name=ReversePort,proto3" json:"ReversePort,omitempty"`
	ReverseHost         string                           `protobuf:"bytes,4,opt,name=ReverseHost,proto3" json:"ReverseHost,omitempty"`
	Token               string                           `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	BridgeParam         *GetTunnelServerExternalIPParams `protobuf:"bytes,6,opt,name=BridgeParam,proto3" json:"BridgeParam,omitempty"`
	GenerateClassParams *YsoOptionsRequest               `protobuf:"bytes,7,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
}

func (x *StartFacadesWithYsoParams) Reset() {
	*x = StartFacadesWithYsoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFacadesWithYsoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFacadesWithYsoParams) ProtoMessage() {}

func (x *StartFacadesWithYsoParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFacadesWithYsoParams.ProtoReflect.Descriptor instead.
func (*StartFacadesWithYsoParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{90}
}

func (x *StartFacadesWithYsoParams) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *StartFacadesWithYsoParams) GetReversePort() int32 {
	if x != nil {
		return x.ReversePort
	}
	return 0
}

func (x *StartFacadesWithYsoParams) GetReverseHost() string {
	if x != nil {
		return x.ReverseHost
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartFacadesWithYsoParams) GetBridgeParam() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.BridgeParam
	}
	return nil
}

func (x *StartFacadesWithYsoParams) GetGenerateClassParams() *YsoOptionsRequest {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

type ApplyClassToFacadesParamsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateClassParams *YsoOptionsRequerstWithVerbose `protobuf:"bytes,1,opt,name=GenerateClassParams,proto3" json:"GenerateClassParams,omitempty"`
	Token               string                         `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ApplyClassToFacadesParamsWithVerbose) Reset() {
	*x = ApplyClassToFacadesParamsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyClassToFacadesParamsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClassToFacadesParamsWithVerbose) ProtoMessage() {}

func (x *ApplyClassToFacadesParamsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClassToFacadesParamsWithVerbose.ProtoReflect.Descriptor instead.
func (*ApplyClassToFacadesParamsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{91}
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetGenerateClassParams() *YsoOptionsRequerstWithVerbose {
	if x != nil {
		return x.GenerateClassParams
	}
	return nil
}

func (x *ApplyClassToFacadesParamsWithVerbose) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BytesToBase64Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *BytesToBase64Request) Reset() {
	*x = BytesToBase64Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Request) ProtoMessage() {}

func (x *BytesToBase64Request) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Request.ProtoReflect.Descriptor instead.
func (*BytesToBase64Request) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{92}
}

func (x *BytesToBase64Request) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type BytesToBase64Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64 string `protobuf:"bytes,1,opt,name=Base64,proto3" json:"Base64,omitempty"`
}

func (x *BytesToBase64Response) Reset() {
	*x = BytesToBase64Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesToBase64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesToBase64Response) ProtoMessage() {}

func (x *BytesToBase64Response) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesToBase64Response.ProtoReflect.Descriptor instead.
func (*BytesToBase64Response) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{93}
}

func (x *BytesToBase64Response) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

type ConfigGlobalReverseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	LocalAddr     string                           `protobuf:"bytes,2,opt,name=LocalAddr,proto3" json:"LocalAddr,omitempty"`
}

func (x *ConfigGlobalReverseParams) Reset() {
	*x = ConfigGlobalReverseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGlobalReverseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGlobalReverseParams) ProtoMessage() {}

func (x *ConfigGlobalReverseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGlobalReverseParams.ProtoReflect.Descriptor instead.
func (*ConfigGlobalReverseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{94}
}

func (x *ConfigGlobalReverseParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *ConfigGlobalReverseParams) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IP   string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{95}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NetInterface) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type AvailableLocalAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*NetInterface `protobuf:"bytes,1,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
}

func (x *AvailableLocalAddrResponse) Reset() {
	*x = AvailableLocalAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableLocalAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLocalAddrResponse) ProtoMessage() {}

func (x *AvailableLocalAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLocalAddrResponse.ProtoReflect.Descriptor instead.
func (*AvailableLocalAddrResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{96}
}

func (x *AvailableLocalAddrResponse) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type GetGlobalReverseServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicReverseIP   string `protobuf:"bytes,1,opt,name=PublicReverseIP,proto3" json:"PublicReverseIP,omitempty"`
	PublicReversePort int32  `protobuf:"varint,2,opt,name=PublicReversePort,proto3" json:"PublicReversePort,omitempty"`
	LocalReverseAddr  string `protobuf:"bytes,3,opt,name=LocalReverseAddr,proto3" json:"LocalReverseAddr,omitempty"`
	LocalReversePort  int32  `protobuf:"varint,4,opt,name=LocalReversePort,proto3" json:"LocalReversePort,omitempty"`
}

func (x *GetGlobalReverseServerResponse) Reset() {
	*x = GetGlobalReverseServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalReverseServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalReverseServerResponse) ProtoMessage() {}

func (x *GetGlobalReverseServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalReverseServerResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalReverseServerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{97}
}

func (x *GetGlobalReverseServerResponse) GetPublicReverseIP() string {
	if x != nil {
		return x.PublicReverseIP
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetPublicReversePort() int32 {
	if x != nil {
		return x.PublicReversePort
	}
	return 0
}

func (x *GetGlobalReverseServerResponse) GetLocalReverseAddr() string {
	if x != nil {
		return x.LocalReverseAddr
	}
	return ""
}

func (x *GetGlobalReverseServerResponse) GetLocalReversePort() int32 {
	if x != nil {
		return x.LocalReversePort
	}
	return 0
}

type SaveFuzzerLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerLabel `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SaveFuzzerLabelRequest) Reset() {
	*x = SaveFuzzerLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFuzzerLabelRequest) ProtoMessage() {}

func (x *SaveFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*SaveFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{98}
}

func (x *SaveFuzzerLabelRequest) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryFuzzerLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FuzzerLabel `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryFuzzerLabelResponse) Reset() {
	*x = QueryFuzzerLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFuzzerLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFuzzerLabelResponse) ProtoMessage() {}

func (x *QueryFuzzerLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFuzzerLabelResponse.ProtoReflect.Descriptor instead.
func (*QueryFuzzerLabelResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{99}
}

func (x *QueryFuzzerLabelResponse) GetData() []*FuzzerLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuzzerLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Label              string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Description        string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	DefaultDescription string `protobuf:"bytes,4,opt,name=DefaultDescription,proto3" json:"DefaultDescription,omitempty"`
	Hash               string `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *FuzzerLabel) Reset() {
	*x = FuzzerLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerLabel) ProtoMessage() {}

func (x *FuzzerLabel) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerLabel.ProtoReflect.Descriptor instead.
func (*FuzzerLabel) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{100}
}

func (x *FuzzerLabel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FuzzerLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FuzzerLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FuzzerLabel) GetDefaultDescription() string {
	if x != nil {
		return x.DefaultDescription
	}
	return ""
}

func (x *FuzzerLabel) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteFuzzerLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *DeleteFuzzerLabelRequest) Reset() {
	*x = DeleteFuzzerLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFuzzerLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFuzzerLabelRequest) ProtoMessage() {}

func (x *DeleteFuzzerLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFuzzerLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteFuzzerLabelRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteFuzzerLabelRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type StringFuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results [][]byte `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *StringFuzzerResponse) Reset() {
	*x = StringFuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerResponse) ProtoMessage() {}

func (x *StringFuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerResponse.ProtoReflect.Descriptor instead.
func (*StringFuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{102}
}

func (x *StringFuzzerResponse) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type StringFuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template                    string `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	HotPatchCode                string `protobuf:"bytes,2,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	HotPatchCodeWithParamGetter string `protobuf:"bytes,3,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	Limit                       int64  `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	TimeoutSeconds              int64  `protobuf:"varint,5,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
}

func (x *StringFuzzerRequest) Reset() {
	*x = StringFuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFuzzerRequest) ProtoMessage() {}

func (x *StringFuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFuzzerRequest.ProtoReflect.Descriptor instead.
func (*StringFuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{103}
}

func (x *StringFuzzerRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *StringFuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *StringFuzzerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StringFuzzerRequest) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type ExtractedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *ExtractedUrl) Reset() {
	*x = ExtractedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedUrl) ProtoMessage() {}

func (x *ExtractedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedUrl.ProtoReflect.Descriptor instead.
func (*ExtractedUrl) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{104}
}

func (x *ExtractedUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type QueryHTTPFuzzerResponseByTaskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging           `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*FuzzerResponse `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64             `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdResponse) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{105}
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetData() []*FuzzerResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type QueryHTTPFuzzerResponseByTaskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId                int64   `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	FuzzRequestToken      string  `protobuf:"bytes,2,opt,name=FuzzRequestToken,proto3" json:"FuzzRequestToken,omitempty"`
	LastResponseTimestamp int64   `protobuf:"varint,3,opt,name=LastResponseTimestamp,proto3" json:"LastResponseTimestamp,omitempty"`
	Pagination            *Paging `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) Reset() {
	*x = QueryHTTPFuzzerResponseByTaskIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFuzzerResponseByTaskIdRequest) ProtoMessage() {}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFuzzerResponseByTaskIdRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFuzzerResponseByTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{106}
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetFuzzRequestToken() string {
	if x != nil {
		return x.FuzzRequestToken
	}
	return ""
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetLastResponseTimestamp() int64 {
	if x != nil {
		return x.LastResponseTimestamp
	}
	return 0
}

func (x *QueryHTTPFuzzerResponseByTaskIdRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ExtractDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Extracted []byte `protobuf:"bytes,2,opt,name=Extracted,proto3" json:"Extracted,omitempty"`
}

func (x *ExtractDataResponse) Reset() {
	*x = ExtractDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataResponse) ProtoMessage() {}

func (x *ExtractDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataResponse.ProtoReflect.Descriptor instead.
func (*ExtractDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{107}
}

func (x *ExtractDataResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataResponse) GetExtracted() []byte {
	if x != nil {
		return x.Extracted
	}
	return nil
}

type ExtractDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Mode         string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	PrefixRegexp string `protobuf:"bytes,3,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp string `protobuf:"bytes,4,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	MatchRegexp  string `protobuf:"bytes,5,opt,name=MatchRegexp,proto3" json:"MatchRegexp,omitempty"`
	Token        string `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	End          bool   `protobuf:"varint,7,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *ExtractDataRequest) Reset() {
	*x = ExtractDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractDataRequest) ProtoMessage() {}

func (x *ExtractDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractDataRequest.ProtoReflect.Descriptor instead.
func (*ExtractDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{108}
}

func (x *ExtractDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractDataRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ExtractDataRequest) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetMatchRegexp() string {
	if x != nil {
		return x.MatchRegexp
	}
	return ""
}

func (x *ExtractDataRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExtractDataRequest) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GenerateExtractRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixRegexp   string `protobuf:"bytes,1,opt,name=PrefixRegexp,proto3" json:"PrefixRegexp,omitempty"`
	SuffixRegexp   string `protobuf:"bytes,2,opt,name=SuffixRegexp,proto3" json:"SuffixRegexp,omitempty"`
	SelectedRegexp string `protobuf:"bytes,3,opt,name=SelectedRegexp,proto3" json:"SelectedRegexp,omitempty"`
}

func (x *GenerateExtractRuleResponse) Reset() {
	*x = GenerateExtractRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleResponse) ProtoMessage() {}

func (x *GenerateExtractRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleResponse.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{109}
}

func (x *GenerateExtractRuleResponse) GetPrefixRegexp() string {
	if x != nil {
		return x.PrefixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSuffixRegexp() string {
	if x != nil {
		return x.SuffixRegexp
	}
	return ""
}

func (x *GenerateExtractRuleResponse) GetSelectedRegexp() string {
	if x != nil {
		return x.SelectedRegexp
	}
	return ""
}

type IsMultipartFormDataRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMultipartFormData bool `protobuf:"varint,1,opt,name=IsMultipartFormData,proto3" json:"IsMultipartFormData,omitempty"`
}

func (x *IsMultipartFormDataRequestResult) Reset() {
	*x = IsMultipartFormDataRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMultipartFormDataRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMultipartFormDataRequestResult) ProtoMessage() {}

func (x *IsMultipartFormDataRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMultipartFormDataRequestResult.ProtoReflect.Descriptor instead.
func (*IsMultipartFormDataRequestResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{110}
}

func (x *IsMultipartFormDataRequestResult) GetIsMultipartFormData() bool {
	if x != nil {
		return x.IsMultipartFormData
	}
	return false
}

type GenerateExtractRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Selected   []byte `protobuf:"bytes,2,opt,name=Selected,proto3" json:"Selected,omitempty"`
	OffsetSize int64  `protobuf:"varint,3,opt,name=OffsetSize,proto3" json:"OffsetSize,omitempty"`
}

func (x *GenerateExtractRuleRequest) Reset() {
	*x = GenerateExtractRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateExtractRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateExtractRuleRequest) ProtoMessage() {}

func (x *GenerateExtractRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateExtractRuleRequest.ProtoReflect.Descriptor instead.
func (*GenerateExtractRuleRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{111}
}

func (x *GenerateExtractRuleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetSelected() []byte {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *GenerateExtractRuleRequest) GetOffsetSize() int64 {
	if x != nil {
		return x.OffsetSize
	}
	return 0
}

type FixUploadPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketResponse) Reset() {
	*x = FixUploadPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketResponse) ProtoMessage() {}

func (x *FixUploadPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketResponse.ProtoReflect.Descriptor instead.
func (*FixUploadPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{112}
}

func (x *FixUploadPacketResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type FixUploadPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []byte `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *FixUploadPacketRequest) Reset() {
	*x = FixUploadPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixUploadPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixUploadPacketRequest) ProtoMessage() {}

func (x *FixUploadPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixUploadPacketRequest.ProtoReflect.Descriptor instead.
func (*FixUploadPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{113}
}

func (x *FixUploadPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type HTTPResponseMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HTTPResponseMutateParams) Reset() {
	*x = HTTPResponseMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMutateParams) ProtoMessage() {}

func (x *HTTPResponseMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPResponseMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{114}
}

func (x *HTTPResponseMutateParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type MutateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       []byte   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ExtraResults [][]byte `protobuf:"bytes,2,rep,name=ExtraResults,proto3" json:"ExtraResults,omitempty"`
}

func (x *MutateResult) Reset() {
	*x = MutateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResult) ProtoMessage() {}

func (x *MutateResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResult.ProtoReflect.Descriptor instead.
func (*MutateResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{115}
}

func (x *MutateResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MutateResult) GetExtraResults() [][]byte {
	if x != nil {
		return x.ExtraResults
	}
	return nil
}

type HTTPRequestMutateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request      []byte   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	FuzzMethods  []string `protobuf:"bytes,2,rep,name=FuzzMethods,proto3" json:"FuzzMethods,omitempty"`
	ChunkEncode  bool     `protobuf:"varint,3,opt,name=ChunkEncode,proto3" json:"ChunkEncode,omitempty"`
	UploadEncode bool     `protobuf:"varint,4,opt,name=UploadEncode,proto3" json:"UploadEncode,omitempty"`
}

func (x *HTTPRequestMutateParams) Reset() {
	*x = HTTPRequestMutateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestMutateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestMutateParams) ProtoMessage() {}

func (x *HTTPRequestMutateParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestMutateParams.ProtoReflect.Descriptor instead.
func (*HTTPRequestMutateParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{116}
}

func (x *HTTPRequestMutateParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetFuzzMethods() []string {
	if x != nil {
		return x.FuzzMethods
	}
	return nil
}

func (x *HTTPRequestMutateParams) GetChunkEncode() bool {
	if x != nil {
		return x.ChunkEncode
	}
	return false
}

func (x *HTTPRequestMutateParams) GetUploadEncode() bool {
	if x != nil {
		return x.UploadEncode
	}
	return false
}

type RedirectRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                  string                   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Response                 string                   `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	IsHttps                  bool                     `protobuf:"varint,3,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	PerRequestTimeoutSeconds float64                  `protobuf:"fixed64,4,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	Proxy                    string                   `protobuf:"bytes,5,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	Extractors               []*HTTPResponseExtractor `protobuf:"bytes,6,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers                 []*HTTPResponseMatcher   `protobuf:"bytes,7,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition        string                   `protobuf:"bytes,8,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	HitColor                 string                   `protobuf:"bytes,9,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
	Params                   []*FuzzerParamItem       `protobuf:"bytes,10,rep,name=Params,proto3" json:"Params,omitempty"`
	IsGmTLS                  bool                     `protobuf:"varint,11,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
}

func (x *RedirectRequestParams) Reset() {
	*x = RedirectRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectRequestParams) ProtoMessage() {}

func (x *RedirectRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectRequestParams.ProtoReflect.Descriptor instead.
func (*RedirectRequestParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{117}
}

func (x *RedirectRequestParams) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *RedirectRequestParams) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RedirectRequestParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *RedirectRequestParams) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *RedirectRequestParams) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *RedirectRequestParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RedirectRequestParams) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *RedirectRequestParams) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

func (x *RedirectRequestParams) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RedirectRequestParams) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

type ExtractHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *ExtractHTTPResponseResult) Reset() {
	*x = ExtractHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseResult) ProtoMessage() {}

func (x *ExtractHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{118}
}

func (x *ExtractHTTPResponseResult) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type HTTPResponseExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type             string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Scope            string   `protobuf:"bytes,3,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Groups           []string `protobuf:"bytes,4,rep,name=Groups,proto3" json:"Groups,omitempty"`
	RegexpMatchGroup []int64  `protobuf:"varint,5,rep,packed,name=RegexpMatchGroup,proto3" json:"RegexpMatchGroup,omitempty"`
	XPathAttribute   string   `protobuf:"bytes,6,opt,name=XPathAttribute,proto3" json:"XPathAttribute,omitempty"`
}

func (x *HTTPResponseExtractor) Reset() {
	*x = HTTPResponseExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseExtractor) ProtoMessage() {}

func (x *HTTPResponseExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseExtractor.ProtoReflect.Descriptor instead.
func (*HTTPResponseExtractor) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{119}
}

func (x *HTTPResponseExtractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPResponseExtractor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HTTPResponseExtractor) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseExtractor) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HTTPResponseExtractor) GetRegexpMatchGroup() []int64 {
	if x != nil {
		return x.RegexpMatchGroup
	}
	return nil
}

func (x *HTTPResponseExtractor) GetXPathAttribute() string {
	if x != nil {
		return x.XPathAttribute
	}
	return ""
}

type ExtractHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extractors   []*HTTPResponseExtractor `protobuf:"bytes,1,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	HTTPResponse string                   `protobuf:"bytes,2,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
}

func (x *ExtractHTTPResponseParams) Reset() {
	*x = ExtractHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHTTPResponseParams) ProtoMessage() {}

func (x *ExtractHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*ExtractHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{120}
}

func (x *ExtractHTTPResponseParams) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *ExtractHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

type MatchHTTPResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matched bool `protobuf:"varint,1,opt,name=Matched,proto3" json:"Matched,omitempty"`
}

func (x *MatchHTTPResponseResult) Reset() {
	*x = MatchHTTPResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseResult) ProtoMessage() {}

func (x *MatchHTTPResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseResult.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{121}
}

func (x *MatchHTTPResponseResult) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

type HTTPResponseMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMatchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=SubMatchers,proto3" json:"SubMatchers,omitempty"`
	SubMatcherCondition string                 `protobuf:"bytes,2,opt,name=SubMatcherCondition,proto3" json:"SubMatcherCondition,omitempty"`
	MatcherType         string                 `protobuf:"bytes,3,opt,name=MatcherType,proto3" json:"MatcherType,omitempty"`
	Scope               string                 `protobuf:"bytes,4,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Condition           string                 `protobuf:"bytes,5,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Group               []string               `protobuf:"bytes,6,rep,name=Group,proto3" json:"Group,omitempty"`
	GroupEncoding       string                 `protobuf:"bytes,7,opt,name=GroupEncoding,proto3" json:"GroupEncoding,omitempty"`
	Negative            bool                   `protobuf:"varint,8,opt,name=Negative,proto3" json:"Negative,omitempty"`
	ExprType            string                 `protobuf:"bytes,9,opt,name=ExprType,proto3" json:"ExprType,omitempty"`
}

func (x *HTTPResponseMatcher) Reset() {
	*x = HTTPResponseMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMatcher) ProtoMessage() {}

func (x *HTTPResponseMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMatcher.ProtoReflect.Descriptor instead.
func (*HTTPResponseMatcher) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{122}
}

func (x *HTTPResponseMatcher) GetSubMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.SubMatchers
	}
	return nil
}

func (x *HTTPResponseMatcher) GetSubMatcherCondition() string {
	if x != nil {
		return x.SubMatcherCondition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetMatcherType() string {
	if x != nil {
		return x.MatcherType
	}
	return ""
}

func (x *HTTPResponseMatcher) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *HTTPResponseMatcher) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *HTTPResponseMatcher) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *HTTPResponseMatcher) GetGroupEncoding() string {
	if x != nil {
		return x.GroupEncoding
	}
	return ""
}

func (x *HTTPResponseMatcher) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *HTTPResponseMatcher) GetExprType() string {
	if x != nil {
		return x.ExprType
	}
	return ""
}

type MatchHTTPResponseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers         []*HTTPResponseMatcher `protobuf:"bytes,1,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatcherCondition string                 `protobuf:"bytes,2,opt,name=MatcherCondition,proto3" json:"MatcherCondition,omitempty"`
	IsHTTPS          bool                   `protobuf:"varint,3,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	HTTPResponse     string                 `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest      string                 `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *MatchHTTPResponseParams) Reset() {
	*x = MatchHTTPResponseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchHTTPResponseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchHTTPResponseParams) ProtoMessage() {}

func (x *MatchHTTPResponseParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchHTTPResponseParams.ProtoReflect.Descriptor instead.
func (*MatchHTTPResponseParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{123}
}

func (x *MatchHTTPResponseParams) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *MatchHTTPResponseParams) GetMatcherCondition() string {
	if x != nil {
		return x.MatcherCondition
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *MatchHTTPResponseParams) GetHTTPResponse() string {
	if x != nil {
		return x.HTTPResponse
	}
	return ""
}

func (x *MatchHTTPResponseParams) GetHTTPRequest() string {
	if x != nil {
		return x.HTTPRequest
	}
	return ""
}

type RenderVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KVPair `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *RenderVariablesResponse) Reset() {
	*x = RenderVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesResponse) ProtoMessage() {}

func (x *RenderVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesResponse.ProtoReflect.Descriptor instead.
func (*RenderVariablesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{124}
}

func (x *RenderVariablesResponse) GetResults() []*KVPair {
	if x != nil {
		return x.Results
	}
	return nil
}

type RenderVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params       []*KVPair `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	IsHTTPS      bool      `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	IsGmTLS      bool      `protobuf:"varint,3,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	HTTPResponse []byte    `protobuf:"bytes,4,opt,name=HTTPResponse,proto3" json:"HTTPResponse,omitempty"`
	HTTPRequest  []byte    `protobuf:"bytes,5,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
}

func (x *RenderVariablesRequest) Reset() {
	*x = RenderVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesRequest) ProtoMessage() {}

func (x *RenderVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesRequest.ProtoReflect.Descriptor instead.
func (*RenderVariablesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{125}
}

func (x *RenderVariablesRequest) GetParams() []*KVPair {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RenderVariablesRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *RenderVariablesRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *RenderVariablesRequest) GetHTTPResponse() []byte {
	if x != nil {
		return x.HTTPResponse
	}
	return nil
}

func (x *RenderVariablesRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

type FuzzerParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *FuzzerParamItem) Reset() {
	*x = FuzzerParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerParamItem) ProtoMessage() {}

func (x *FuzzerParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerParamItem.ProtoReflect.Descriptor instead.
func (*FuzzerParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{126}
}

func (x *FuzzerParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FuzzerParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FuzzerParamItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PreloadHTTPFuzzerParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FuzzerParamItem `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsResponse) Reset() {
	*x = PreloadHTTPFuzzerParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsResponse) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsResponse.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{127}
}

func (x *PreloadHTTPFuzzerParamsResponse) GetValues() []*FuzzerParamItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type PreloadHTTPFuzzerParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*FuzzerParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
}

func (x *PreloadHTTPFuzzerParamsRequest) Reset() {
	*x = PreloadHTTPFuzzerParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadHTTPFuzzerParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadHTTPFuzzerParamsRequest) ProtoMessage() {}

func (x *PreloadHTTPFuzzerParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadHTTPFuzzerParamsRequest.ProtoReflect.Descriptor instead.
func (*PreloadHTTPFuzzerParamsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{128}
}

func (x *PreloadHTTPFuzzerParamsRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

type FuzzerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method                string        `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	StatusCode            int32         `protobuf:"varint,2,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Host                  string        `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	ContentType           string        `protobuf:"bytes,4,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Headers               []*HTTPHeader `protobuf:"bytes,5,rep,name=Headers,proto3" json:"Headers,omitempty"`
	ResponseRaw           []byte        `protobuf:"bytes,6,opt,name=ResponseRaw,proto3" json:"ResponseRaw,omitempty"`
	BodyLength            int64         `protobuf:"varint,7,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	DurationMs            int64         `protobuf:"varint,8,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	UUID                  string        `protobuf:"bytes,9,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Timestamp             int64         `protobuf:"varint,10,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	RequestRaw            []byte        `protobuf:"bytes,11,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"`
	GuessResponseEncoding string        `protobuf:"bytes,12,opt,name=GuessResponseEncoding,proto3" json:"GuessResponseEncoding,omitempty"`
	Ok                    bool          `protobuf:"varint,31,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason                string        `protobuf:"bytes,32,opt,name=Reason,proto3" json:"Reason,omitempty"`
	IsHTTPS               bool          `protobuf:"varint,33,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Payloads              []string      `protobuf:"bytes,34,rep,name=Payloads,proto3" json:"Payloads,omitempty"`
	BodySimilarity        float64       `protobuf:"fixed64,35,opt,name=BodySimilarity,proto3" json:"BodySimilarity,omitempty"`
	HeaderSimilarity      float64       `protobuf:"fixed64,36,opt,name=HeaderSimilarity,proto3" json:"HeaderSimilarity,omitempty"`
	MatchedByFilter       bool          `protobuf:"varint,37,opt,name=MatchedByFilter,proto3" json:"MatchedByFilter,omitempty"`
	Url                   string        `protobuf:"bytes,38,opt,name=Url,proto3" json:"Url,omitempty"`
	TaskId                int64         `protobuf:"varint,39,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	DNSDurationMs         int64         `protobuf:"varint,40,opt,name=DNSDurationMs,proto3" json:"DNSDurationMs,omitempty"`
	FirstByteDurationMs   int64         `protobuf:"varint,41,opt,name=FirstByteDurationMs,proto3" json:"FirstByteDurationMs,omitempty"`
	TotalDurationMs       int64         `protobuf:"varint,42,opt,name=TotalDurationMs,proto3" json:"TotalDurationMs,omitempty"`
	Proxy                 string        `protobuf:"bytes,43,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	RemoteAddr            string        `protobuf:"bytes,44,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	ExtractedResults      []*KVPair     `protobuf:"bytes,45,rep,name=ExtractedResults,proto3" json:"ExtractedResults,omitempty"`
	MatchedByMatcher      bool          `protobuf:"varint,46,opt,name=MatchedByMatcher,proto3" json:"MatchedByMatcher,omitempty"`
	HitColor              string        `protobuf:"bytes,47,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
}

func (x *FuzzerResponse) Reset() {
	*x = FuzzerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponse) ProtoMessage() {}

func (x *FuzzerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponse.ProtoReflect.Descriptor instead.
func (*FuzzerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{129}
}

func (x *FuzzerResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FuzzerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FuzzerResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FuzzerResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FuzzerResponse) GetHeaders() []*HTTPHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FuzzerResponse) GetResponseRaw() []byte {
	if x != nil {
		return x.ResponseRaw
	}
	return nil
}

func (x *FuzzerResponse) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *FuzzerResponse) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *FuzzerResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FuzzerResponse) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerResponse) GetGuessResponseEncoding() string {
	if x != nil {
		return x.GuessResponseEncoding
	}
	return ""
}

func (x *FuzzerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *FuzzerResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FuzzerResponse) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerResponse) GetPayloads() []string {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *FuzzerResponse) GetBodySimilarity() float64 {
	if x != nil {
		return x.BodySimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetHeaderSimilarity() float64 {
	if x != nil {
		return x.HeaderSimilarity
	}
	return 0
}

func (x *FuzzerResponse) GetMatchedByFilter() bool {
	if x != nil {
		return x.MatchedByFilter
	}
	return false
}

func (x *FuzzerResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FuzzerResponse) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FuzzerResponse) GetDNSDurationMs() int64 {
	if x != nil {
		return x.DNSDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetFirstByteDurationMs() int64 {
	if x != nil {
		return x.FirstByteDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *FuzzerResponse) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *FuzzerResponse) GetExtractedResults() []*KVPair {
	if x != nil {
		return x.ExtractedResults
	}
	return nil
}

func (x *FuzzerResponse) GetMatchedByMatcher() bool {
	if x != nil {
		return x.MatchedByMatcher
	}
	return false
}

func (x *FuzzerResponse) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

type FuzzerResponseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinBodySize int64    `protobuf:"varint,1,opt,name=MinBodySize,proto3" json:"MinBodySize,omitempty"`
	MaxBodySize int64    `protobuf:"varint,2,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	Regexps     []string `protobuf:"bytes,3,rep,name=Regexps,proto3" json:"Regexps,omitempty"`
	Keywords    []string `protobuf:"bytes,4,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	StatusCode  []string `protobuf:"bytes,6,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *FuzzerResponseFilter) Reset() {
	*x = FuzzerResponseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerResponseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerResponseFilter) ProtoMessage() {}

func (x *FuzzerResponseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerResponseFilter.ProtoReflect.Descriptor instead.
func (*FuzzerResponseFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{130}
}

func (x *FuzzerResponseFilter) GetMinBodySize() int64 {
	if x != nil {
		return x.MinBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *FuzzerResponseFilter) GetRegexps() []string {
	if x != nil {
		return x.Regexps
	}
	return nil
}

func (x *FuzzerResponseFilter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FuzzerResponseFilter) GetStatusCode() []string {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type FuzzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                     string                   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Params                      []*FuzzerParamItem       `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty"`
	Concurrent                  int64                    `protobuf:"varint,3,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	IsHTTPS                     bool                     `protobuf:"varint,4,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	ForceFuzz                   bool                     `protobuf:"varint,5,opt,name=ForceFuzz,proto3" json:"ForceFuzz,omitempty"`
	Proxy                       string                   `protobuf:"bytes,6,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	PerRequestTimeoutSeconds    float64                  `protobuf:"fixed64,7,opt,name=PerRequestTimeoutSeconds,proto3" json:"PerRequestTimeoutSeconds,omitempty"`
	ActualAddr                  string                   `protobuf:"bytes,8,opt,name=ActualAddr,proto3" json:"ActualAddr,omitempty"`
	NoFollowRedirect            bool                     `protobuf:"varint,9,opt,name=NoFollowRedirect,proto3" json:"NoFollowRedirect,omitempty"`
	NoFollowMetaRedirect        bool                     `protobuf:"varint,10,opt,name=NoFollowMetaRedirect,proto3" json:"NoFollowMetaRedirect,omitempty"`
	FollowJSRedirect            bool                     `protobuf:"varint,11,opt,name=FollowJSRedirect,proto3" json:"FollowJSRedirect,omitempty"`
	HistoryWebFuzzerId          int32                    `protobuf:"varint,12,opt,name=HistoryWebFuzzerId,proto3" json:"HistoryWebFuzzerId,omitempty"`
	NoFixContentLength          bool                     `protobuf:"varint,13,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	HotPatchCode                string                   `protobuf:"bytes,14,opt,name=HotPatchCode,proto3" json:"HotPatchCode,omitempty"`
	Filter                      *FuzzerResponseFilter    `protobuf:"bytes,15,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RequestRaw                  []byte                   `protobuf:"bytes,16,opt,name=RequestRaw,proto3" json:"RequestRaw,omitempty"`
	DelayMinSeconds             float64                  `protobuf:"fixed64,17,opt,name=DelayMinSeconds,proto3" json:"DelayMinSeconds,omitempty"`
	DelayMaxSeconds             float64                  `protobuf:"fixed64,18,opt,name=DelayMaxSeconds,proto3" json:"DelayMaxSeconds,omitempty"`
	HotPatchCodeWithParamGetter string                   `protobuf:"bytes,19,opt,name=HotPatchCodeWithParamGetter,proto3" json:"HotPatchCodeWithParamGetter,omitempty"`
	MaxRetryTimes               int64                    `protobuf:"varint,20,opt,name=MaxRetryTimes,proto3" json:"MaxRetryTimes,omitempty"`
	RetryInStatusCode           string                   `protobuf:"bytes,21,opt,name=RetryInStatusCode,proto3" json:"RetryInStatusCode,omitempty"`
	RetryNotInStatusCode        string                   `protobuf:"bytes,22,opt,name=RetryNotInStatusCode,proto3" json:"RetryNotInStatusCode,omitempty"`
	ResponseCharset             string                   `protobuf:"bytes,23,opt,name=ResponseCharset,proto3" json:"ResponseCharset,omitempty"`
	Verbose                     string                   `protobuf:"bytes,24,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	RetryWaitSeconds            float64                  `protobuf:"fixed64,25,opt,name=RetryWaitSeconds,proto3" json:"RetryWaitSeconds,omitempty"`
	RetryMaxWaitSeconds         float64                  `protobuf:"fixed64,26,opt,name=RetryMaxWaitSeconds,proto3" json:"RetryMaxWaitSeconds,omitempty"`
	RedirectTimes               float64                  `protobuf:"fixed64,27,opt,name=RedirectTimes,proto3" json:"RedirectTimes,omitempty"`
	DNSServers                  []string                 `protobuf:"bytes,28,rep,name=DNSServers,proto3" json:"DNSServers,omitempty"`
	EtcHosts                    []*KVPair                `protobuf:"bytes,29,rep,name=EtcHosts,proto3" json:"EtcHosts,omitempty"`
	NoSystemProxy               bool                     `protobuf:"varint,30,opt,name=NoSystemProxy,proto3" json:"NoSystemProxy,omitempty"`
	RepeatTimes                 int64                    `protobuf:"varint,31,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`
	Extractors                  []*HTTPResponseExtractor `protobuf:"bytes,32,rep,name=Extractors,proto3" json:"Extractors,omitempty"`
	Matchers                    []*HTTPResponseMatcher   `protobuf:"bytes,33,rep,name=Matchers,proto3" json:"Matchers,omitempty"`
	MatchersCondition           string                   `protobuf:"bytes,34,opt,name=MatchersCondition,proto3" json:"MatchersCondition,omitempty"`
	IsGmTLS                     bool                     `protobuf:"varint,35,opt,name=IsGmTLS,proto3" json:"IsGmTLS,omitempty"`
	HitColor                    string                   `protobuf:"bytes,36,opt,name=HitColor,proto3" json:"HitColor,omitempty"`
}

func (x *FuzzerRequest) Reset() {
	*x = FuzzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzerRequest) ProtoMessage() {}

func (x *FuzzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzerRequest.ProtoReflect.Descriptor instead.
func (*FuzzerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{131}
}

func (x *FuzzerRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *FuzzerRequest) GetParams() []*FuzzerParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FuzzerRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *FuzzerRequest) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *FuzzerRequest) GetForceFuzz() bool {
	if x != nil {
		return x.ForceFuzz
	}
	return false
}

func (x *FuzzerRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *FuzzerRequest) GetPerRequestTimeoutSeconds() float64 {
	if x != nil {
		return x.PerRequestTimeoutSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetActualAddr() string {
	if x != nil {
		return x.ActualAddr
	}
	return ""
}

func (x *FuzzerRequest) GetNoFollowRedirect() bool {
	if x != nil {
		return x.NoFollowRedirect
	}
	return false
}

func (x *FuzzerRequest) GetNoFollowMetaRedirect() bool {
	if x != nil {
		return x.NoFollowMetaRedirect
	}
	return false
}

func (x *FuzzerRequest) GetFollowJSRedirect() bool {
	if x != nil {
		return x.FollowJSRedirect
	}
	return false
}

func (x *FuzzerRequest) GetHistoryWebFuzzerId() int32 {
	if x != nil {
		return x.HistoryWebFuzzerId
	}
	return 0
}

func (x *FuzzerRequest) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *FuzzerRequest) GetHotPatchCode() string {
	if x != nil {
		return x.HotPatchCode
	}
	return ""
}

func (x *FuzzerRequest) GetFilter() *FuzzerResponseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FuzzerRequest) GetRequestRaw() []byte {
	if x != nil {
		return x.RequestRaw
	}
	return nil
}

func (x *FuzzerRequest) GetDelayMinSeconds() float64 {
	if x != nil {
		return x.DelayMinSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetDelayMaxSeconds() float64 {
	if x != nil {
		return x.DelayMaxSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetHotPatchCodeWithParamGetter() string {
	if x != nil {
		return x.HotPatchCodeWithParamGetter
	}
	return ""
}

func (x *FuzzerRequest) GetMaxRetryTimes() int64 {
	if x != nil {
		return x.MaxRetryTimes
	}
	return 0
}

func (x *FuzzerRequest) GetRetryInStatusCode() string {
	if x != nil {
		return x.RetryInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetRetryNotInStatusCode() string {
	if x != nil {
		return x.RetryNotInStatusCode
	}
	return ""
}

func (x *FuzzerRequest) GetResponseCharset() string {
	if x != nil {
		return x.ResponseCharset
	}
	return ""
}

func (x *FuzzerRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FuzzerRequest) GetRetryWaitSeconds() float64 {
	if x != nil {
		return x.RetryWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetRetryMaxWaitSeconds() float64 {
	if x != nil {
		return x.RetryMaxWaitSeconds
	}
	return 0
}

func (x *FuzzerRequest) GetRedirectTimes() float64 {
	if x != nil {
		return x.RedirectTimes
	}
	return 0
}

func (x *FuzzerRequest) GetDNSServers() []string {
	if x != nil {
		return x.DNSServers
	}
	return nil
}

func (x *FuzzerRequest) GetEtcHosts() []*KVPair {
	if x != nil {
		return x.EtcHosts
	}
	return nil
}

func (x *FuzzerRequest) GetNoSystemProxy() bool {
	if x != nil {
		return x.NoSystemProxy
	}
	return false
}

func (x *FuzzerRequest) GetRepeatTimes() int64 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *FuzzerRequest) GetExtractors() []*HTTPResponseExtractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

func (x *FuzzerRequest) GetMatchers() []*HTTPResponseMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *FuzzerRequest) GetMatchersCondition() string {
	if x != nil {
		return x.MatchersCondition
	}
	return ""
}

func (x *FuzzerRequest) GetIsGmTLS() bool {
	if x != nil {
		return x.IsGmTLS
	}
	return false
}

func (x *FuzzerRequest) GetHitColor() string {
	if x != nil {
		return x.HitColor
	}
	return ""
}

type DeleteHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = DeleteHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHistoryHTTPFuzzerTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHistoryHTTPFuzzerTaskRequest) Reset() {
	*x = GetHistoryHTTPFuzzerTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryHTTPFuzzerTaskRequest) ProtoMessage() {}

func (x *GetHistoryHTTPFuzzerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryHTTPFuzzerTaskRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryHTTPFuzzerTaskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{133}
}

func (x *GetHistoryHTTPFuzzerTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HistoryHTTPFuzzerTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo     *HistoryHTTPFuzzerTask `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	OriginRequest *FuzzerRequest         `protobuf:"bytes,2,opt,name=OriginRequest,proto3" json:"OriginRequest,omitempty"`
}

func (x *HistoryHTTPFuzzerTaskDetail) Reset() {
	*x = HistoryHTTPFuzzerTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTaskDetail) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTaskDetail.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTaskDetail) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{134}
}

func (x *HistoryHTTPFuzzerTaskDetail) GetBasicInfo() *HistoryHTTPFuzzerTask {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *HistoryHTTPFuzzerTaskDetail) GetOriginRequest() *FuzzerRequest {
	if x != nil {
		return x.OriginRequest
	}
	return nil
}

type HistoryHTTPFuzzerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	HTTPFlowTotal        int32  `protobuf:"varint,3,opt,name=HTTPFlowTotal,proto3" json:"HTTPFlowTotal,omitempty"`
	HTTPFlowSuccessCount int32  `protobuf:"varint,4,opt,name=HTTPFlowSuccessCount,proto3" json:"HTTPFlowSuccessCount,omitempty"`
	HTTPFlowFailedCount  int32  `protobuf:"varint,5,opt,name=HTTPFlowFailedCount,proto3" json:"HTTPFlowFailedCount,omitempty"`
	Host                 string `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port                 int32  `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *HistoryHTTPFuzzerTask) Reset() {
	*x = HistoryHTTPFuzzerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTask) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTask.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{135}
}

func (x *HistoryHTTPFuzzerTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowTotal() int32 {
	if x != nil {
		return x.HTTPFlowTotal
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowSuccessCount() int32 {
	if x != nil {
		return x.HTTPFlowSuccessCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHTTPFlowFailedCount() int32 {
	if x != nil {
		return x.HTTPFlowFailedCount
	}
	return 0
}

func (x *HistoryHTTPFuzzerTask) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HistoryHTTPFuzzerTask) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HistoryHTTPFuzzerTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*HistoryHTTPFuzzerTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *HistoryHTTPFuzzerTasks) Reset() {
	*x = HistoryHTTPFuzzerTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasks) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasks.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{136}
}

func (x *HistoryHTTPFuzzerTasks) GetTasks() []*HistoryHTTPFuzzerTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type HistoryHTTPFuzzerTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*HistoryHTTPFuzzerTaskDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                          `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage  int64                          `protobuf:"varint,3,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	Pagination *Paging                        `protobuf:"bytes,4,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *HistoryHTTPFuzzerTasksResponse) Reset() {
	*x = HistoryHTTPFuzzerTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryHTTPFuzzerTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryHTTPFuzzerTasksResponse) ProtoMessage() {}

func (x *HistoryHTTPFuzzerTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryHTTPFuzzerTasksResponse.ProtoReflect.Descriptor instead.
func (*HistoryHTTPFuzzerTasksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{137}
}

func (x *HistoryHTTPFuzzerTasksResponse) GetData() []*HistoryHTTPFuzzerTaskDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *HistoryHTTPFuzzerTasksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryHistoryHTTPFuzzerTaskExParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keyword    string  `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) Reset() {
	*x = QueryHistoryHTTPFuzzerTaskExParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHistoryHTTPFuzzerTaskExParams) ProtoMessage() {}

func (x *QueryHistoryHTTPFuzzerTaskExParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHistoryHTTPFuzzerTaskExParams.ProtoReflect.Descriptor instead.
func (*QueryHistoryHTTPFuzzerTaskExParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{138}
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHistoryHTTPFuzzerTaskExParams) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type GenerateCSRFPocByPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GenerateCSRFPocByPacketResponse) Reset() {
	*x = GenerateCSRFPocByPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRFPocByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketResponse) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{139}
}

func (x *GenerateCSRFPocByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type GenerateCSRFPocByPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps bool   `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request []byte `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GenerateCSRFPocByPacketRequest) Reset() {
	*x = GenerateCSRFPocByPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRFPocByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRFPocByPacketRequest) ProtoMessage() {}

func (x *GenerateCSRFPocByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRFPocByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRFPocByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{140}
}

func (x *GenerateCSRFPocByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateCSRFPocByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type GenerateYakCodeByPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GenerateYakCodeByPacketResponse) Reset() {
	*x = GenerateYakCodeByPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateYakCodeByPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketResponse) ProtoMessage() {}

func (x *GenerateYakCodeByPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketResponse.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{141}
}

func (x *GenerateYakCodeByPacketResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type GenerateYakCodeByPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHttps      bool                                    `protobuf:"varint,1,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request      []byte                                  `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	CodeTemplate GenerateYakCodeByPacketRequest_Template `protobuf:"varint,3,opt,name=CodeTemplate,proto3,enum=ypb.GenerateYakCodeByPacketRequest_Template" json:"CodeTemplate,omitempty"`
}

func (x *GenerateYakCodeByPacketRequest) Reset() {
	*x = GenerateYakCodeByPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateYakCodeByPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateYakCodeByPacketRequest) ProtoMessage() {}

func (x *GenerateYakCodeByPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateYakCodeByPacketRequest.ProtoReflect.Descriptor instead.
func (*GenerateYakCodeByPacketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{142}
}

func (x *GenerateYakCodeByPacketRequest) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *GenerateYakCodeByPacketRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GenerateYakCodeByPacketRequest) GetCodeTemplate() GenerateYakCodeByPacketRequest_Template {
	if x != nil {
		return x.CodeTemplate
	}
	return GenerateYakCodeByPacketRequest_Ordinary
}

type HTTPFlowsExtractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareExtractContent string `protobuf:"bytes,1,opt,name=ShareExtractContent,proto3" json:"ShareExtractContent,omitempty"`
}

func (x *HTTPFlowsExtractRequest) Reset() {
	*x = HTTPFlowsExtractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsExtractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsExtractRequest) ProtoMessage() {}

func (x *HTTPFlowsExtractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsExtractRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsExtractRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{143}
}

func (x *HTTPFlowsExtractRequest) GetShareExtractContent() string {
	if x != nil {
		return x.ShareExtractContent
	}
	return ""
}

type HTTPFlowsShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids         []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	LimitNum    int64   `protobuf:"varint,2,opt,name=LimitNum,proto3" json:"LimitNum,omitempty"`
	ExpiredTime int64   `protobuf:"varint,3,opt,name=ExpiredTime,proto3" json:"ExpiredTime,omitempty"`
	Pwd         bool    `protobuf:"varint,4,opt,name=Pwd,proto3" json:"Pwd,omitempty"`
	ShareId     string  `protobuf:"bytes,5,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	Token       string  `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	Module      string  `protobuf:"bytes,7,opt,name=Module,proto3" json:"Module,omitempty"`
}

func (x *HTTPFlowsShareRequest) Reset() {
	*x = HTTPFlowsShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareRequest) ProtoMessage() {}

func (x *HTTPFlowsShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{144}
}

func (x *HTTPFlowsShareRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *HTTPFlowsShareRequest) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *HTTPFlowsShareRequest) GetPwd() bool {
	if x != nil {
		return x.Pwd
	}
	return false
}

func (x *HTTPFlowsShareRequest) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPFlowsShareRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type HTTPFlowsShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId     string `protobuf:"bytes,1,opt,name=ShareId,proto3" json:"ShareId,omitempty"`
	ExtractCode string `protobuf:"bytes,2,opt,name=ExtractCode,proto3" json:"ExtractCode,omitempty"`
}

func (x *HTTPFlowsShareResponse) Reset() {
	*x = HTTPFlowsShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsShareResponse) ProtoMessage() {}

func (x *HTTPFlowsShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsShareResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsShareResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{145}
}

func (x *HTTPFlowsShareResponse) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *HTTPFlowsShareResponse) GetExtractCode() string {
	if x != nil {
		return x.ExtractCode
	}
	return ""
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=Raw,proto3" json:"Raw,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{146}
}

func (x *Bytes) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type GetHTTPPacketBodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet    string `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	PacketRaw []byte `protobuf:"bytes,2,opt,name=PacketRaw,proto3" json:"PacketRaw,omitempty"`
}

func (x *GetHTTPPacketBodyRequest) Reset() {
	*x = GetHTTPPacketBodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPPacketBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPPacketBodyRequest) ProtoMessage() {}

func (x *GetHTTPPacketBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPPacketBodyRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPPacketBodyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{147}
}

func (x *GetHTTPPacketBodyRequest) GetPacket() string {
	if x != nil {
		return x.Packet
	}
	return ""
}

func (x *GetHTTPPacketBodyRequest) GetPacketRaw() []byte {
	if x != nil {
		return x.PacketRaw
	}
	return nil
}

type DownloadBodyByHTTPFlowIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DownloadBodyByHTTPFlowIDRequest) Reset() {
	*x = DownloadBodyByHTTPFlowIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBodyByHTTPFlowIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBodyByHTTPFlowIDRequest) ProtoMessage() {}

func (x *DownloadBodyByHTTPFlowIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBodyByHTTPFlowIDRequest.ProtoReflect.Descriptor instead.
func (*DownloadBodyByHTTPFlowIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{148}
}

func (x *DownloadBodyByHTTPFlowIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TagsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TagsCode) Reset() {
	*x = TagsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsCode) ProtoMessage() {}

func (x *TagsCode) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsCode.ProtoReflect.Descriptor instead.
func (*TagsCode) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{149}
}

func (x *TagsCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsCode) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type HTTPFlowsFieldGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags       []*TagsCode `protobuf:"bytes,1,rep,name=Tags,proto3" json:"Tags,omitempty"`
	StatusCode []*TagsCode `protobuf:"bytes,2,rep,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *HTTPFlowsFieldGroupResponse) Reset() {
	*x = HTTPFlowsFieldGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupResponse) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupResponse.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{150}
}

func (x *HTTPFlowsFieldGroupResponse) GetTags() []*TagsCode {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HTTPFlowsFieldGroupResponse) GetStatusCode() []*TagsCode {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

type HTTPFlowsFieldGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshRequest bool `protobuf:"varint,1,opt,name=RefreshRequest,proto3" json:"RefreshRequest,omitempty"`
}

func (x *HTTPFlowsFieldGroupRequest) Reset() {
	*x = HTTPFlowsFieldGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlowsFieldGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlowsFieldGroupRequest) ProtoMessage() {}

func (x *HTTPFlowsFieldGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlowsFieldGroupRequest.ProtoReflect.Descriptor instead.
func (*HTTPFlowsFieldGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{151}
}

func (x *HTTPFlowsFieldGroupRequest) GetRefreshRequest() bool {
	if x != nil {
		return x.RefreshRequest
	}
	return false
}

type SetTagForHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash      string                  `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags      []string                `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CheckTags []*CheckSetTagsHTTPFlow `protobuf:"bytes,4,rep,name=CheckTags,proto3" json:"CheckTags,omitempty"`
}

func (x *SetTagForHTTPFlowRequest) Reset() {
	*x = SetTagForHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagForHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagForHTTPFlowRequest) ProtoMessage() {}

func (x *SetTagForHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagForHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*SetTagForHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{152}
}

func (x *SetTagForHTTPFlowRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagForHTTPFlowRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetTagForHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SetTagForHTTPFlowRequest) GetCheckTags() []*CheckSetTagsHTTPFlow {
	if x != nil {
		return x.CheckTags
	}
	return nil
}

type CheckSetTagsHTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tags []string `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *CheckSetTagsHTTPFlow) Reset() {
	*x = CheckSetTagsHTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSetTagsHTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSetTagsHTTPFlow) ProtoMessage() {}

func (x *CheckSetTagsHTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSetTagsHTTPFlow.ProtoReflect.Descriptor instead.
func (*CheckSetTagsHTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{153}
}

func (x *CheckSetTagsHTTPFlow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckSetTagsHTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckSetTagsHTTPFlow) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type QueryHTTPFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging     `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*HTTPFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64       `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryHTTPFlowResponse) Reset() {
	*x = QueryHTTPFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowResponse) ProtoMessage() {}

func (x *QueryHTTPFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{154}
}

func (x *QueryHTTPFlowResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryHTTPFlowResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination        *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	SourceType        string   `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Methods           string   `protobuf:"bytes,3,opt,name=Methods,proto3" json:"Methods,omitempty"`
	SearchURL         string   `protobuf:"bytes,4,opt,name=SearchURL,proto3" json:"SearchURL,omitempty"`
	StatusCode        string   `protobuf:"bytes,5,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	HaveCommonParams  bool     `protobuf:"varint,6,opt,name=HaveCommonParams,proto3" json:"HaveCommonParams,omitempty"`
	HaveBody          bool     `protobuf:"varint,7,opt,name=HaveBody,proto3" json:"HaveBody,omitempty"`
	SearchContentType string   `protobuf:"bytes,9,opt,name=SearchContentType,proto3" json:"SearchContentType,omitempty"`
	BeforeUpdatedAt   int64    `protobuf:"varint,10,opt,name=BeforeUpdatedAt,proto3" json:"BeforeUpdatedAt,omitempty"`
	AfterUpdatedAt    int64    `protobuf:"varint,11,opt,name=AfterUpdatedAt,proto3" json:"AfterUpdatedAt,omitempty"`
	AfterId           int64    `protobuf:"varint,12,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	BeforeId          int64    `protobuf:"varint,13,opt,name=BeforeId,proto3" json:"BeforeId,omitempty"`
	Keyword           string   `protobuf:"bytes,14,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	OnlyWebsocket     bool     `protobuf:"varint,15,opt,name=OnlyWebsocket,proto3" json:"OnlyWebsocket,omitempty"`
	IncludeInUrl      []string `protobuf:"bytes,16,rep,name=IncludeInUrl,proto3" json:"IncludeInUrl,omitempty"`
	ExcludeInUrl      []string `protobuf:"bytes,17,rep,name=ExcludeInUrl,proto3" json:"ExcludeInUrl,omitempty"`
	IncludeInIP       []string `protobuf:"bytes,18,rep,name=IncludeInIP,proto3" json:"IncludeInIP,omitempty"`
	ExcludeInIP       []string `protobuf:"bytes,19,rep,name=ExcludeInIP,proto3" json:"ExcludeInIP,omitempty"`
	ExcludeId         []int64  `protobuf:"varint,20,rep,packed,name=ExcludeId,proto3" json:"ExcludeId,omitempty"`
	IncludeInWhere    []string `protobuf:"bytes,21,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	IncludeId         []int64  `protobuf:"varint,22,rep,packed,name=IncludeId,proto3" json:"IncludeId,omitempty"`
	Tags              []string `protobuf:"bytes,23,rep,name=Tags,proto3" json:"Tags,omitempty"`
	HaveParamsTotal   string   `protobuf:"bytes,24,opt,name=HaveParamsTotal,proto3" json:"HaveParamsTotal,omitempty"`
	Color             []string `protobuf:"bytes,25,rep,name=Color,proto3" json:"Color,omitempty"`
	OffsetId          int64    `protobuf:"varint,26,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	AfterBodyLength   int64    `protobuf:"varint,27,opt,name=AfterBodyLength,proto3" json:"AfterBodyLength,omitempty"`
	BeforeBodyLength  int64    `protobuf:"varint,28,opt,name=BeforeBodyLength,proto3" json:"BeforeBodyLength,omitempty"`
	IsWebsocket       string   `protobuf:"bytes,29,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
}

func (x *QueryHTTPFlowRequest) Reset() {
	*x = QueryHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowRequest) ProtoMessage() {}

func (x *QueryHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{155}
}

func (x *QueryHTTPFlowRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetMethods() string {
	if x != nil {
		return x.Methods
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetSearchURL() string {
	if x != nil {
		return x.SearchURL
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetHaveCommonParams() bool {
	if x != nil {
		return x.HaveCommonParams
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetHaveBody() bool {
	if x != nil {
		return x.HaveBody
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetSearchContentType() string {
	if x != nil {
		return x.SearchContentType
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetBeforeUpdatedAt() int64 {
	if x != nil {
		return x.BeforeUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterUpdatedAt() int64 {
	if x != nil {
		return x.AfterUpdatedAt
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeId() int64 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetOnlyWebsocket() bool {
	if x != nil {
		return x.OnlyWebsocket
	}
	return false
}

func (x *QueryHTTPFlowRequest) GetIncludeInUrl() []string {
	if x != nil {
		return x.IncludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInUrl() []string {
	if x != nil {
		return x.ExcludeInUrl
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInIP() []string {
	if x != nil {
		return x.IncludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeInIP() []string {
	if x != nil {
		return x.ExcludeInIP
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetExcludeId() []int64 {
	if x != nil {
		return x.ExcludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetIncludeId() []int64 {
	if x != nil {
		return x.IncludeId
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetHaveParamsTotal() string {
	if x != nil {
		return x.HaveParamsTotal
	}
	return ""
}

func (x *QueryHTTPFlowRequest) GetColor() []string {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *QueryHTTPFlowRequest) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetAfterBodyLength() int64 {
	if x != nil {
		return x.AfterBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetBeforeBodyLength() int64 {
	if x != nil {
		return x.BeforeBodyLength
	}
	return 0
}

func (x *QueryHTTPFlowRequest) GetIsWebsocket() string {
	if x != nil {
		return x.IsWebsocket
	}
	return ""
}

type DeleteHTTPFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteAll      bool                  `protobuf:"varint,1,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	ItemHash       []string              `protobuf:"bytes,2,rep,name=ItemHash,proto3" json:"ItemHash,omitempty"`
	URLPrefix      string                `protobuf:"bytes,3,opt,name=URLPrefix,proto3" json:"URLPrefix,omitempty"`
	Id             []int64               `protobuf:"varint,4,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	Filter         *QueryHTTPFlowRequest `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	URLPrefixBatch []string              `protobuf:"bytes,6,rep,name=URLPrefixBatch,proto3" json:"URLPrefixBatch,omitempty"`
}

func (x *DeleteHTTPFlowRequest) Reset() {
	*x = DeleteHTTPFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPFlowRequest) ProtoMessage() {}

func (x *DeleteHTTPFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPFlowRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPFlowRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{156}
}

func (x *DeleteHTTPFlowRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteHTTPFlowRequest) GetItemHash() []string {
	if x != nil {
		return x.ItemHash
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefix() string {
	if x != nil {
		return x.URLPrefix
	}
	return ""
}

func (x *DeleteHTTPFlowRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetFilter() *QueryHTTPFlowRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteHTTPFlowRequest) GetURLPrefixBatch() []string {
	if x != nil {
		return x.URLPrefixBatch
	}
	return nil
}

type QueryHTTPFlowsIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeInWhere []string `protobuf:"bytes,1,rep,name=IncludeInWhere,proto3" json:"IncludeInWhere,omitempty"`
	SourceType     string   `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
}

func (x *QueryHTTPFlowsIdsRequest) Reset() {
	*x = QueryHTTPFlowsIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsRequest) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsRequest.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{157}
}

func (x *QueryHTTPFlowsIdsRequest) GetIncludeInWhere() []string {
	if x != nil {
		return x.IncludeInWhere
	}
	return nil
}

func (x *QueryHTTPFlowsIdsRequest) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type QueryHTTPFlowsIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryHTTPFlowsIdsResponse) Reset() {
	*x = QueryHTTPFlowsIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHTTPFlowsIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHTTPFlowsIdsResponse) ProtoMessage() {}

func (x *QueryHTTPFlowsIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHTTPFlowsIdsResponse.ProtoReflect.Descriptor instead.
func (*QueryHTTPFlowsIdsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{158}
}

func (x *QueryHTTPFlowsIdsResponse) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetHTTPFlowByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *GetHTTPFlowByIdsRequest) Reset() {
	*x = GetHTTPFlowByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdsRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{159}
}

func (x *GetHTTPFlowByIdsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetHTTPFlowByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHTTPFlowByIdRequest) Reset() {
	*x = GetHTTPFlowByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByIdRequest) ProtoMessage() {}

func (x *GetHTTPFlowByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByIdRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{160}
}

func (x *GetHTTPFlowByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetHTTPFlowByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *GetHTTPFlowByHashRequest) Reset() {
	*x = GetHTTPFlowByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPFlowByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPFlowByHashRequest) ProtoMessage() {}

func (x *GetHTTPFlowByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPFlowByHashRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPFlowByHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{161}
}

func (x *GetHTTPFlowByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type FuzzableParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     string `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	ParamName    string `protobuf:"bytes,2,opt,name=ParamName,proto3" json:"ParamName,omitempty"`
	OriginValue  []byte `protobuf:"bytes,3,opt,name=OriginValue,proto3" json:"OriginValue,omitempty"`
	AutoTemplate []byte `protobuf:"bytes,4,opt,name=AutoTemplate,proto3" json:"AutoTemplate,omitempty"`
	IsHTTPS      bool   `protobuf:"varint,5,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
}

func (x *FuzzableParam) Reset() {
	*x = FuzzableParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzableParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzableParam) ProtoMessage() {}

func (x *FuzzableParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzableParam.ProtoReflect.Descriptor instead.
func (*FuzzableParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{162}
}

func (x *FuzzableParam) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FuzzableParam) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *FuzzableParam) GetOriginValue() []byte {
	if x != nil {
		return x.OriginValue
	}
	return nil
}

func (x *FuzzableParam) GetAutoTemplate() []byte {
	if x != nil {
		return x.AutoTemplate
	}
	return nil
}

func (x *FuzzableParam) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

type HTTPFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHTTPS                bool             `protobuf:"varint,2,opt,name=IsHTTPS,proto3" json:"IsHTTPS,omitempty"`
	Url                    string           `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	RequestHeader          []*HTTPHeader    `protobuf:"bytes,4,rep,name=RequestHeader,proto3" json:"RequestHeader,omitempty"`
	Request                []byte           `protobuf:"bytes,5,opt,name=Request,proto3" json:"Request,omitempty"`
	ResponseHeader         []*HTTPHeader    `protobuf:"bytes,6,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty"`
	Response               []byte           `protobuf:"bytes,7,opt,name=Response,proto3" json:"Response,omitempty"`
	SourceType             string           `protobuf:"bytes,8,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	Path                   string           `protobuf:"bytes,9,opt,name=Path,proto3" json:"Path,omitempty"`
	Method                 string           `protobuf:"bytes,10,opt,name=Method,proto3" json:"Method,omitempty"`
	BodyLength             int64            `protobuf:"varint,11,opt,name=BodyLength,proto3" json:"BodyLength,omitempty"`
	ContentType            string           `protobuf:"bytes,12,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	StatusCode             int64            `protobuf:"varint,13,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	GetParamsTotal         int64            `protobuf:"varint,14,opt,name=GetParamsTotal,proto3" json:"GetParamsTotal,omitempty"`
	PostParamsTotal        int64            `protobuf:"varint,15,opt,name=PostParamsTotal,proto3" json:"PostParamsTotal,omitempty"`
	UpdatedAt              int64            `protobuf:"varint,16,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt              int64            `protobuf:"varint,17,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Hash                   string           `protobuf:"bytes,18,opt,name=Hash,proto3" json:"Hash,omitempty"`
	BodySizeVerbose        string           `protobuf:"bytes,19,opt,name=BodySizeVerbose,proto3" json:"BodySizeVerbose,omitempty"`
	GetParams              []*FuzzableParam `protobuf:"bytes,20,rep,name=GetParams,proto3" json:"GetParams,omitempty"`
	PostParams             []*FuzzableParam `protobuf:"bytes,21,rep,name=PostParams,proto3" json:"PostParams,omitempty"`
	CookieParamsTotal      int64            `protobuf:"varint,22,opt,name=CookieParamsTotal,proto3" json:"CookieParamsTotal,omitempty"`
	CookieParams           []*FuzzableParam `protobuf:"bytes,23,rep,name=CookieParams,proto3" json:"CookieParams,omitempty"`
	HostPort               string           `protobuf:"bytes,24,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	IPAddress              string           `protobuf:"bytes,25,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	HtmlTitle              string           `protobuf:"bytes,26,opt,name=HtmlTitle,proto3" json:"HtmlTitle,omitempty"`
	Tags                   string           `protobuf:"bytes,27,opt,name=Tags,proto3" json:"Tags,omitempty"`
	NoFixContentLength     bool             `protobuf:"varint,28,opt,name=NoFixContentLength,proto3" json:"NoFixContentLength,omitempty"`
	Id                     uint64           `protobuf:"varint,29,opt,name=Id,proto3" json:"Id,omitempty"`
	IsWebsocket            bool             `protobuf:"varint,30,opt,name=IsWebsocket,proto3" json:"IsWebsocket,omitempty"`
	RequestLength          int64            `protobuf:"varint,31,opt,name=RequestLength,proto3" json:"RequestLength,omitempty"`
	RequestSizeVerbose     string           `protobuf:"bytes,32,opt,name=RequestSizeVerbose,proto3" json:"RequestSizeVerbose,omitempty"`
	WebsocketHash          string           `protobuf:"bytes,33,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	InvalidForUTF8Request  bool             `protobuf:"varint,34,opt,name=InvalidForUTF8Request,proto3" json:"InvalidForUTF8Request,omitempty"`
	InvalidForUTF8Response bool             `protobuf:"varint,35,opt,name=InvalidForUTF8Response,proto3" json:"InvalidForUTF8Response,omitempty"`
	RawRequestBodyBase64   string           `protobuf:"bytes,36,opt,name=RawRequestBodyBase64,proto3" json:"RawRequestBodyBase64,omitempty"`
	RawResponseBodyBase64  string           `protobuf:"bytes,37,opt,name=RawResponseBodyBase64,proto3" json:"RawResponseBodyBase64,omitempty"`
	SafeHTTPRequest        string           `protobuf:"bytes,38,opt,name=SafeHTTPRequest,proto3" json:"SafeHTTPRequest,omitempty"`
	Domains                []string         `protobuf:"bytes,40,rep,name=Domains,proto3" json:"Domains,omitempty"`
	RootDomains            []string         `protobuf:"bytes,41,rep,name=RootDomains,proto3" json:"RootDomains,omitempty"`
	JsonObjects            []string         `protobuf:"bytes,42,rep,name=JsonObjects,proto3" json:"JsonObjects,omitempty"`
}

func (x *HTTPFlow) Reset() {
	*x = HTTPFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlow) ProtoMessage() {}

func (x *HTTPFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlow.ProtoReflect.Descriptor instead.
func (*HTTPFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{163}
}

func (x *HTTPFlow) GetIsHTTPS() bool {
	if x != nil {
		return x.IsHTTPS
	}
	return false
}

func (x *HTTPFlow) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPFlow) GetRequestHeader() []*HTTPHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *HTTPFlow) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPFlow) GetResponseHeader() []*HTTPHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *HTTPFlow) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPFlow) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *HTTPFlow) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPFlow) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPFlow) GetBodyLength() int64 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

func (x *HTTPFlow) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HTTPFlow) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPFlow) GetGetParamsTotal() int64 {
	if x != nil {
		return x.GetParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetPostParamsTotal() int64 {
	if x != nil {
		return x.PostParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HTTPFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HTTPFlow) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HTTPFlow) GetBodySizeVerbose() string {
	if x != nil {
		return x.BodySizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetGetParams() []*FuzzableParam {
	if x != nil {
		return x.GetParams
	}
	return nil
}

func (x *HTTPFlow) GetPostParams() []*FuzzableParam {
	if x != nil {
		return x.PostParams
	}
	return nil
}

func (x *HTTPFlow) GetCookieParamsTotal() int64 {
	if x != nil {
		return x.CookieParamsTotal
	}
	return 0
}

func (x *HTTPFlow) GetCookieParams() []*FuzzableParam {
	if x != nil {
		return x.CookieParams
	}
	return nil
}

func (x *HTTPFlow) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *HTTPFlow) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *HTTPFlow) GetHtmlTitle() string {
	if x != nil {
		return x.HtmlTitle
	}
	return ""
}

func (x *HTTPFlow) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *HTTPFlow) GetNoFixContentLength() bool {
	if x != nil {
		return x.NoFixContentLength
	}
	return false
}

func (x *HTTPFlow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HTTPFlow) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *HTTPFlow) GetRequestLength() int64 {
	if x != nil {
		return x.RequestLength
	}
	return 0
}

func (x *HTTPFlow) GetRequestSizeVerbose() string {
	if x != nil {
		return x.RequestSizeVerbose
	}
	return ""
}

func (x *HTTPFlow) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *HTTPFlow) GetInvalidForUTF8Request() bool {
	if x != nil {
		return x.InvalidForUTF8Request
	}
	return false
}

func (x *HTTPFlow) GetInvalidForUTF8Response() bool {
	if x != nil {
		return x.InvalidForUTF8Response
	}
	return false
}

func (x *HTTPFlow) GetRawRequestBodyBase64() string {
	if x != nil {
		return x.RawRequestBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetRawResponseBodyBase64() string {
	if x != nil {
		return x.RawResponseBodyBase64
	}
	return ""
}

func (x *HTTPFlow) GetSafeHTTPRequest() string {
	if x != nil {
		return x.SafeHTTPRequest
	}
	return ""
}

func (x *HTTPFlow) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *HTTPFlow) GetRootDomains() []string {
	if x != nil {
		return x.RootDomains
	}
	return nil
}

func (x *HTTPFlow) GetJsonObjects() []string {
	if x != nil {
		return x.JsonObjects
	}
	return nil
}

type HTTPFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HTTPFlow `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *HTTPFlows) Reset() {
	*x = HTTPFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFlows) ProtoMessage() {}

func (x *HTTPFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFlows.ProtoReflect.Descriptor instead.
func (*HTTPFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{164}
}

func (x *HTTPFlows) GetData() []*HTTPFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License string `protobuf:"bytes,1,opt,name=License,proto3" json:"License,omitempty"`
}

func (x *GetLicenseResponse) Reset() {
	*x = GetLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseResponse) ProtoMessage() {}

func (x *GetLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseResponse.ProtoReflect.Descriptor instead.
func (*GetLicenseResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{165}
}

func (x *GetLicenseResponse) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type CheckLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseActivation string `protobuf:"bytes,1,opt,name=LicenseActivation,proto3" json:"LicenseActivation,omitempty"`
	CompanyVersion    string `protobuf:"bytes,2,opt,name=CompanyVersion,proto3" json:"CompanyVersion,omitempty"`
}

func (x *CheckLicenseRequest) Reset() {
	*x = CheckLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLicenseRequest) ProtoMessage() {}

func (x *CheckLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLicenseRequest.ProtoReflect.Descriptor instead.
func (*CheckLicenseRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{166}
}

func (x *CheckLicenseRequest) GetLicenseActivation() string {
	if x != nil {
		return x.LicenseActivation
	}
	return ""
}

func (x *CheckLicenseRequest) GetCompanyVersion() string {
	if x != nil {
		return x.CompanyVersion
	}
	return ""
}

type AddToNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NavigationList `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AddToNavigationRequest) Reset() {
	*x = AddToNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToNavigationRequest) ProtoMessage() {}

func (x *AddToNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddToNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{167}
}

func (x *AddToNavigationRequest) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type NavigationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      string            `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items      []*NavigationItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	GroupSort  int64             `protobuf:"varint,3,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Mode       string            `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	GroupLabel string            `protobuf:"bytes,5,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
}

func (x *NavigationList) Reset() {
	*x = NavigationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationList) ProtoMessage() {}

func (x *NavigationList) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationList.ProtoReflect.Descriptor instead.
func (*NavigationList) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{168}
}

func (x *NavigationList) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationList) GetItems() []*NavigationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NavigationList) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationList) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationList) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

type NavigationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId   int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode          string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64  `protobuf:"varint,4,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64  `protobuf:"varint,5,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	Route         string `protobuf:"bytes,6,opt,name=Route,proto3" json:"Route,omitempty"`
	YakScriptName string `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string `protobuf:"bytes,8,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	VerboseLabel  string `protobuf:"bytes,9,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	GroupLabel    string `protobuf:"bytes,10,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	HeadImg       string `protobuf:"bytes,11,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
}

func (x *NavigationItem) Reset() {
	*x = NavigationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationItem) ProtoMessage() {}

func (x *NavigationItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationItem.ProtoReflect.Descriptor instead.
func (*NavigationItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{169}
}

func (x *NavigationItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *NavigationItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NavigationItem) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NavigationItem) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *NavigationItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *NavigationItem) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *NavigationItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *NavigationItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NavigationItem) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *NavigationItem) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *NavigationItem) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type GetAllNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptName string `protobuf:"bytes,3,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *GetAllNavigationRequest) Reset() {
	*x = GetAllNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationRequest) ProtoMessage() {}

func (x *GetAllNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationRequest.ProtoReflect.Descriptor instead.
func (*GetAllNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{170}
}

func (x *GetAllNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *GetAllNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GetAllNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type GetAllNavigationItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NavigationList `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllNavigationItemResponse) Reset() {
	*x = GetAllNavigationItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNavigationItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNavigationItemResponse) ProtoMessage() {}

func (x *GetAllNavigationItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNavigationItemResponse.ProtoReflect.Descriptor instead.
func (*GetAllNavigationItemResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{171}
}

func (x *GetAllNavigationItemResponse) GetData() []*NavigationList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddOneNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode          string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	VerboseSort   int64  `protobuf:"varint,5,opt,name=VerboseSort,proto3" json:"VerboseSort,omitempty"`
	GroupSort     int64  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	GroupLabel    string `protobuf:"bytes,7,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	VerboseLabel  string `protobuf:"bytes,8,opt,name=VerboseLabel,proto3" json:"VerboseLabel,omitempty"`
	Route         string `protobuf:"bytes,9,opt,name=Route,proto3" json:"Route,omitempty"`
}

func (x *AddOneNavigationRequest) Reset() {
	*x = AddOneNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOneNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOneNavigationRequest) ProtoMessage() {}

func (x *AddOneNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOneNavigationRequest.ProtoReflect.Descriptor instead.
func (*AddOneNavigationRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{172}
}

func (x *AddOneNavigationRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *AddOneNavigationRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddOneNavigationRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseSort() int64 {
	if x != nil {
		return x.VerboseSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *AddOneNavigationRequest) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetVerboseLabel() string {
	if x != nil {
		return x.VerboseLabel
	}
	return ""
}

func (x *AddOneNavigationRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

type QueryNavigationGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName string `protobuf:"bytes,1,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Mode          string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *QueryNavigationGroupsRequest) Reset() {
	*x = QueryNavigationGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNavigationGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNavigationGroupsRequest) ProtoMessage() {}

func (x *QueryNavigationGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNavigationGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryNavigationGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{173}
}

func (x *QueryNavigationGroupsRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *QueryNavigationGroupsRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type GroupNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *GroupNames) Reset() {
	*x = GroupNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNames) ProtoMessage() {}

func (x *GroupNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNames.ProtoReflect.Descriptor instead.
func (*GroupNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{174}
}

func (x *GroupNames) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type QueryAllMenuItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Group   string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *QueryAllMenuItemRequest) Reset() {
	*x = QueryAllMenuItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllMenuItemRequest) ProtoMessage() {}

func (x *QueryAllMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllMenuItemRequest.ProtoReflect.Descriptor instead.
func (*QueryAllMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{175}
}

func (x *QueryAllMenuItemRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryAllMenuItemRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type MenuItemGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string      `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Items    []*MenuItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	MenuSort int64       `protobuf:"varint,3,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	Mode     string      `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *MenuItemGroup) Reset() {
	*x = MenuItemGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItemGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItemGroup) ProtoMessage() {}

func (x *MenuItemGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItemGroup.ProtoReflect.Descriptor instead.
func (*MenuItemGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{176}
}

func (x *MenuItemGroup) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItemGroup) GetItems() []*MenuItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MenuItemGroup) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *MenuItemGroup) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type AddMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MenuItemGroup `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AddMenuRequest) Reset() {
	*x = AddMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMenuRequest) ProtoMessage() {}

func (x *AddMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMenuRequest.ProtoReflect.Descriptor instead.
func (*AddMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{177}
}

func (x *AddMenuRequest) GetData() []*MenuItemGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryGroupsByYakScriptIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Mode        string `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *QueryGroupsByYakScriptIdRequest) Reset() {
	*x = QueryGroupsByYakScriptIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupsByYakScriptIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupsByYakScriptIdRequest) ProtoMessage() {}

func (x *QueryGroupsByYakScriptIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupsByYakScriptIdRequest.ProtoReflect.Descriptor instead.
func (*QueryGroupsByYakScriptIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{178}
}

func (x *QueryGroupsByYakScriptIdRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *QueryGroupsByYakScriptIdRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type BatchExecutionPluginFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tags    string   `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Include []string `protobuf:"bytes,3,rep,name=include,proto3" json:"include,omitempty"`
	Exclude []string `protobuf:"bytes,4,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *BatchExecutionPluginFilter) Reset() {
	*x = BatchExecutionPluginFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExecutionPluginFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecutionPluginFilter) ProtoMessage() {}

func (x *BatchExecutionPluginFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExecutionPluginFilter.ProtoReflect.Descriptor instead.
func (*BatchExecutionPluginFilter) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{179}
}

func (x *BatchExecutionPluginFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *BatchExecutionPluginFilter) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *BatchExecutionPluginFilter) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type MenuItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         string                      `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose       string                      `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	YakScriptId   int64                       `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Query         *BatchExecutionPluginFilter `protobuf:"bytes,4,opt,name=Query,proto3" json:"Query,omitempty"`
	MenuItemId    uint64                      `protobuf:"varint,5,opt,name=MenuItemId,proto3" json:"MenuItemId,omitempty"`
	GroupSort     int64                       `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
	YakScriptName string                      `protobuf:"bytes,7,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{180}
}

func (x *MenuItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MenuItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *MenuItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *MenuItem) GetQuery() *BatchExecutionPluginFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MenuItem) GetMenuItemId() uint64 {
	if x != nil {
		return x.MenuItemId
	}
	return 0
}

func (x *MenuItem) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *MenuItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type GetMenuItemByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetMenuItemByIdRequest) Reset() {
	*x = GetMenuItemByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMenuItemByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuItemByIdRequest) ProtoMessage() {}

func (x *GetMenuItemByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuItemByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMenuItemByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{181}
}

func (x *GetMenuItemByIdRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ExportMenuItemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson string `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
}

func (x *ExportMenuItemResult) Reset() {
	*x = ExportMenuItemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMenuItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMenuItemResult) ProtoMessage() {}

func (x *ExportMenuItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMenuItemResult.ProtoReflect.Descriptor instead.
func (*ExportMenuItemResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{182}
}

func (x *ExportMenuItemResult) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

type ImportMenuItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson      string `protobuf:"bytes,1,opt,name=RawJson,proto3" json:"RawJson,omitempty"`
	JsonFileName string `protobuf:"bytes,2,opt,name=JsonFileName,proto3" json:"JsonFileName,omitempty"`
}

func (x *ImportMenuItemRequest) Reset() {
	*x = ImportMenuItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMenuItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMenuItemRequest) ProtoMessage() {}

func (x *ImportMenuItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMenuItemRequest.ProtoReflect.Descriptor instead.
func (*ImportMenuItemRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{183}
}

func (x *ImportMenuItemRequest) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

func (x *ImportMenuItemRequest) GetJsonFileName() string {
	if x != nil {
		return x.JsonFileName
	}
	return ""
}

type MenuByGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*MenuItemGroup `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *MenuByGroup) Reset() {
	*x = MenuByGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuByGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuByGroup) ProtoMessage() {}

func (x *MenuByGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuByGroup.ProtoReflect.Descriptor instead.
func (*MenuByGroup) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{184}
}

func (x *MenuByGroup) GetGroups() []*MenuItemGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type YakScriptIsInMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group       string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	YakScriptId int64  `protobuf:"varint,2,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
}

func (x *YakScriptIsInMenuRequest) Reset() {
	*x = YakScriptIsInMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptIsInMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptIsInMenuRequest) ProtoMessage() {}

func (x *YakScriptIsInMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptIsInMenuRequest.ProtoReflect.Descriptor instead.
func (*YakScriptIsInMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{185}
}

func (x *YakScriptIsInMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptIsInMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

type RemoveFromMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Mode        string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *RemoveFromMenuRequest) Reset() {
	*x = RemoveFromMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFromMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFromMenuRequest) ProtoMessage() {}

func (x *RemoveFromMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFromMenuRequest.ProtoReflect.Descriptor instead.
func (*RemoveFromMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{186}
}

func (x *RemoveFromMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *RemoveFromMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RemoveFromMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type AddToMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Verbose     string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Mode        string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	MenuSort    int64  `protobuf:"varint,5,opt,name=MenuSort,proto3" json:"MenuSort,omitempty"`
	GroupSort   int64  `protobuf:"varint,6,opt,name=GroupSort,proto3" json:"GroupSort,omitempty"`
}

func (x *AddToMenuRequest) Reset() {
	*x = AddToMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToMenuRequest) ProtoMessage() {}

func (x *AddToMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToMenuRequest.ProtoReflect.Descriptor instead.
func (*AddToMenuRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{187}
}

func (x *AddToMenuRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *AddToMenuRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AddToMenuRequest) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *AddToMenuRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AddToMenuRequest) GetMenuSort() int64 {
	if x != nil {
		return x.MenuSort
	}
	return 0
}

func (x *AddToMenuRequest) GetGroupSort() int64 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{188}
}

type KVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{189}
}

func (x *KVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExecParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ExecParamItem) Reset() {
	*x = ExecParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecParamItem) ProtoMessage() {}

func (x *ExecParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecParamItem.ProtoReflect.Descriptor instead.
func (*ExecParamItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{190}
}

func (x *ExecParamItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExecParamItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       string  `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	OutputJson string  `protobuf:"bytes,2,opt,name=OutputJson,proto3" json:"OutputJson,omitempty"`
	Raw        []byte  `protobuf:"bytes,3,opt,name=Raw,proto3" json:"Raw,omitempty"`
	IsMessage  bool    `protobuf:"varint,4,opt,name=IsMessage,proto3" json:"IsMessage,omitempty"`
	Message    []byte  `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	Id         int64   `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
	RuntimeID  string  `protobuf:"bytes,7,opt,name=RuntimeID,proto3" json:"RuntimeID,omitempty"`
	Progress   float32 `protobuf:"fixed32,8,opt,name=Progress,proto3" json:"Progress,omitempty"`
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{191}
}

func (x *ExecResult) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ExecResult) GetOutputJson() string {
	if x != nil {
		return x.OutputJson
	}
	return ""
}

func (x *ExecResult) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *ExecResult) GetIsMessage() bool {
	if x != nil {
		return x.IsMessage
	}
	return false
}

func (x *ExecResult) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ExecResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecResult) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *ExecResult) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64  `protobuf:"varint,51,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit   int64  `protobuf:"varint,52,opt,name=Limit,proto3" json:"Limit,omitempty"`
	OrderBy string `protobuf:"bytes,53,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Order   string `protobuf:"bytes,54,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{192}
}

func (x *Paging) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Paging) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Paging) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *Paging) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header string `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{193}
}

func (x *HTTPHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Verbose string `protobuf:"bytes,2,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Total   int32  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Delta   int32  `protobuf:"varint,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
}

func (x *FieldName) Reset() {
	*x = FieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldName) ProtoMessage() {}

func (x *FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldName.ProtoReflect.Descriptor instead.
func (*FieldName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{194}
}

func (x *FieldName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldName) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *FieldName) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FieldName) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FieldName `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *Fields) Reset() {
	*x = Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{195}
}

func (x *Fields) GetValues() []*FieldName {
	if x != nil {
		return x.Values
	}
	return nil
}

type SimpleScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *SimpleScript) Reset() {
	*x = SimpleScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleScript) ProtoMessage() {}

func (x *SimpleScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleScript.ProtoReflect.Descriptor instead.
func (*SimpleScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{196}
}

func (x *SimpleScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetMachineIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineID string `protobuf:"bytes,1,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
}

func (x *GetMachineIDResponse) Reset() {
	*x = GetMachineIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineIDResponse) ProtoMessage() {}

func (x *GetMachineIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineIDResponse.ProtoReflect.Descriptor instead.
func (*GetMachineIDResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{197}
}

func (x *GetMachineIDResponse) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

type ResetAndInvalidUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAndInvalidUserDataRequest) Reset() {
	*x = ResetAndInvalidUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAndInvalidUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAndInvalidUserDataRequest) ProtoMessage() {}

func (x *ResetAndInvalidUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAndInvalidUserDataRequest.ProtoReflect.Descriptor instead.
func (*ResetAndInvalidUserDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{198}
}

type IsPrivilegedForNetRawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrivileged  bool   `protobuf:"varint,1,opt,name=IsPrivileged,proto3" json:"IsPrivileged,omitempty"`
	Advice        string `protobuf:"bytes,2,opt,name=Advice,proto3" json:"Advice,omitempty"`
	AdviceVerbose string `protobuf:"bytes,3,opt,name=AdviceVerbose,proto3" json:"AdviceVerbose,omitempty"`
}

func (x *IsPrivilegedForNetRawResponse) Reset() {
	*x = IsPrivilegedForNetRawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPrivilegedForNetRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPrivilegedForNetRawResponse) ProtoMessage() {}

func (x *IsPrivilegedForNetRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPrivilegedForNetRawResponse.ProtoReflect.Descriptor instead.
func (*IsPrivilegedForNetRawResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{199}
}

func (x *IsPrivilegedForNetRawResponse) GetIsPrivileged() bool {
	if x != nil {
		return x.IsPrivileged
	}
	return false
}

func (x *IsPrivilegedForNetRawResponse) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *IsPrivilegedForNetRawResponse) GetAdviceVerbose() string {
	if x != nil {
		return x.AdviceVerbose
	}
	return ""
}

type MITMRuleExtractedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt  int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SourceType string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	TraceId    string `protobuf:"bytes,4,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Regexp     string `protobuf:"bytes,5,opt,name=Regexp,proto3" json:"Regexp,omitempty"`
	RuleName   string `protobuf:"bytes,6,opt,name=RuleName,proto3" json:"RuleName,omitempty"`
	Data       string `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *MITMRuleExtractedData) Reset() {
	*x = MITMRuleExtractedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMRuleExtractedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRuleExtractedData) ProtoMessage() {}

func (x *MITMRuleExtractedData) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRuleExtractedData.ProtoReflect.Descriptor instead.
func (*MITMRuleExtractedData) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{200}
}

func (x *MITMRuleExtractedData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRuleExtractedData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MITMRuleExtractedData) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *MITMRuleExtractedData) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *MITMRuleExtractedData) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *MITMRuleExtractedData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryMITMRuleExtractedDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*MITMRuleExtractedData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64                    `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination *Paging                  `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryMITMRuleExtractedDataResponse) Reset() {
	*x = QueryMITMRuleExtractedDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMITMRuleExtractedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataResponse) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataResponse.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{201}
}

func (x *QueryMITMRuleExtractedDataResponse) GetData() []*MITMRuleExtractedData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryMITMRuleExtractedDataResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryMITMRuleExtractedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination   *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	HTTPFlowHash string  `protobuf:"bytes,2,opt,name=HTTPFlowHash,proto3" json:"HTTPFlowHash,omitempty"`
}

func (x *QueryMITMRuleExtractedDataRequest) Reset() {
	*x = QueryMITMRuleExtractedDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMITMRuleExtractedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMITMRuleExtractedDataRequest) ProtoMessage() {}

func (x *QueryMITMRuleExtractedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMITMRuleExtractedDataRequest.ProtoReflect.Descriptor instead.
func (*QueryMITMRuleExtractedDataRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{202}
}

func (x *QueryMITMRuleExtractedDataRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryMITMRuleExtractedDataRequest) GetHTTPFlowHash() string {
	if x != nil {
		return x.HTTPFlowHash
	}
	return ""
}

type MITMContentReplacers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*MITMContentReplacer `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
}

func (x *MITMContentReplacers) Reset() {
	*x = MITMContentReplacers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMContentReplacers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacers) ProtoMessage() {}

func (x *MITMContentReplacers) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacers.ProtoReflect.Descriptor instead.
func (*MITMContentReplacers) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{203}
}

func (x *MITMContentReplacers) GetRules() []*MITMContentReplacer {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ImportMITMReplacerRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonRaw    []byte `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
	ReplaceAll bool   `protobuf:"varint,2,opt,name=ReplaceAll,proto3" json:"ReplaceAll,omitempty"`
}

func (x *ImportMITMReplacerRulesRequest) Reset() {
	*x = ImportMITMReplacerRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMITMReplacerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMITMReplacerRulesRequest) ProtoMessage() {}

func (x *ImportMITMReplacerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMITMReplacerRulesRequest.ProtoReflect.Descriptor instead.
func (*ImportMITMReplacerRulesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{204}
}

func (x *ImportMITMReplacerRulesRequest) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

func (x *ImportMITMReplacerRulesRequest) GetReplaceAll() bool {
	if x != nil {
		return x.ReplaceAll
	}
	return false
}

type ExportMITMReplacerRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonRaw []byte `protobuf:"bytes,1,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
}

func (x *ExportMITMReplacerRulesResponse) Reset() {
	*x = ExportMITMReplacerRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMITMReplacerRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMITMReplacerRulesResponse) ProtoMessage() {}

func (x *ExportMITMReplacerRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMITMReplacerRulesResponse.ProtoReflect.Descriptor instead.
func (*ExportMITMReplacerRulesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{205}
}

func (x *ExportMITMReplacerRulesResponse) GetJsonRaw() []byte {
	if x != nil {
		return x.JsonRaw
	}
	return nil
}

type MITMCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaCerts   []byte `protobuf:"bytes,1,opt,name=CaCerts,proto3" json:"CaCerts,omitempty"`
	LocalFile string `protobuf:"bytes,2,opt,name=LocalFile,proto3" json:"LocalFile,omitempty"`
}

func (x *MITMCert) Reset() {
	*x = MITMCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMCert) ProtoMessage() {}

func (x *MITMCert) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMCert.ProtoReflect.Descriptor instead.
func (*MITMCert) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{206}
}

func (x *MITMCert) GetCaCerts() []byte {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

func (x *MITMCert) GetLocalFile() string {
	if x != nil {
		return x.LocalFile
	}
	return ""
}

type SetMITMFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMITMFilterResponse) Reset() {
	*x = SetMITMFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMITMFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterResponse) ProtoMessage() {}

func (x *SetMITMFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterResponse.ProtoReflect.Descriptor instead.
func (*SetMITMFilterResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{207}
}

type SetMITMFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeHostname     []string `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix       []string `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
}

func (x *SetMITMFilterRequest) Reset() {
	*x = SetMITMFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMITMFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMITMFilterRequest) ProtoMessage() {}

func (x *SetMITMFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMITMFilterRequest.ProtoReflect.Descriptor instead.
func (*SetMITMFilterRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{208}
}

func (x *SetMITMFilterRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *SetMITMFilterRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *SetMITMFilterRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

type HTTPCookieSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Path         string `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	Domain       string `protobuf:"bytes,4,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Expires      int64  `protobuf:"varint,5,opt,name=Expires,proto3" json:"Expires,omitempty"`
	MaxAge       int64  `protobuf:"varint,6,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
	Secure       bool   `protobuf:"varint,7,opt,name=Secure,proto3" json:"Secure,omitempty"`
	HttpOnly     bool   `protobuf:"varint,8,opt,name=HttpOnly,proto3" json:"HttpOnly,omitempty"`
	SameSiteMode string `protobuf:"bytes,9,opt,name=SameSiteMode,proto3" json:"SameSiteMode,omitempty"`
}

func (x *HTTPCookieSetting) Reset() {
	*x = HTTPCookieSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCookieSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCookieSetting) ProtoMessage() {}

func (x *HTTPCookieSetting) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCookieSetting.ProtoReflect.Descriptor instead.
func (*HTTPCookieSetting) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{209}
}

func (x *HTTPCookieSetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HTTPCookieSetting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPCookieSetting) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPCookieSetting) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HTTPCookieSetting) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *HTTPCookieSetting) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *HTTPCookieSetting) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *HTTPCookieSetting) GetHttpOnly() bool {
	if x != nil {
		return x.HttpOnly
	}
	return false
}

func (x *HTTPCookieSetting) GetSameSiteMode() string {
	if x != nil {
		return x.SameSiteMode
	}
	return ""
}

type MITMContentReplacer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule              string               `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
	NoReplace         bool                 `protobuf:"varint,2,opt,name=NoReplace,proto3" json:"NoReplace,omitempty"`
	Result            string               `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
	Color             string               `protobuf:"bytes,4,opt,name=Color,proto3" json:"Color,omitempty"`
	EnableForRequest  bool                 `protobuf:"varint,5,opt,name=EnableForRequest,proto3" json:"EnableForRequest,omitempty"`
	EnableForResponse bool                 `protobuf:"varint,6,opt,name=EnableForResponse,proto3" json:"EnableForResponse,omitempty"`
	Index             int32                `protobuf:"varint,7,opt,name=Index,proto3" json:"Index,omitempty"`
	ExtraTag          []string             `protobuf:"bytes,8,rep,name=ExtraTag,proto3" json:"ExtraTag,omitempty"`
	EnableForHeader   bool                 `protobuf:"varint,9,opt,name=EnableForHeader,proto3" json:"EnableForHeader,omitempty"`
	EnableForBody     bool                 `protobuf:"varint,10,opt,name=EnableForBody,proto3" json:"EnableForBody,omitempty"`
	Disabled          bool                 `protobuf:"varint,11,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	VerboseName       string               `protobuf:"bytes,12,opt,name=VerboseName,proto3" json:"VerboseName,omitempty"`
	ExtraHeaders      []*HTTPHeader        `protobuf:"bytes,13,rep,name=ExtraHeaders,proto3" json:"ExtraHeaders,omitempty"`
	ExtraCookies      []*HTTPCookieSetting `protobuf:"bytes,14,rep,name=ExtraCookies,proto3" json:"ExtraCookies,omitempty"`
	EnableForURI      bool                 `protobuf:"varint,15,opt,name=EnableForURI,proto3" json:"EnableForURI,omitempty"`
	ExtraRepeat       bool                 `protobuf:"varint,16,opt,name=ExtraRepeat,proto3" json:"ExtraRepeat,omitempty"`
	Drop              bool                 `protobuf:"varint,17,opt,name=Drop,proto3" json:"Drop,omitempty"`
}

func (x *MITMContentReplacer) Reset() {
	*x = MITMContentReplacer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMContentReplacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMContentReplacer) ProtoMessage() {}

func (x *MITMContentReplacer) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMContentReplacer.ProtoReflect.Descriptor instead.
func (*MITMContentReplacer) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{210}
}

func (x *MITMContentReplacer) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *MITMContentReplacer) GetNoReplace() bool {
	if x != nil {
		return x.NoReplace
	}
	return false
}

func (x *MITMContentReplacer) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MITMContentReplacer) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MITMContentReplacer) GetEnableForRequest() bool {
	if x != nil {
		return x.EnableForRequest
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForResponse() bool {
	if x != nil {
		return x.EnableForResponse
	}
	return false
}

func (x *MITMContentReplacer) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MITMContentReplacer) GetExtraTag() []string {
	if x != nil {
		return x.ExtraTag
	}
	return nil
}

func (x *MITMContentReplacer) GetEnableForHeader() bool {
	if x != nil {
		return x.EnableForHeader
	}
	return false
}

func (x *MITMContentReplacer) GetEnableForBody() bool {
	if x != nil {
		return x.EnableForBody
	}
	return false
}

func (x *MITMContentReplacer) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *MITMContentReplacer) GetVerboseName() string {
	if x != nil {
		return x.VerboseName
	}
	return ""
}

func (x *MITMContentReplacer) GetExtraHeaders() []*HTTPHeader {
	if x != nil {
		return x.ExtraHeaders
	}
	return nil
}

func (x *MITMContentReplacer) GetExtraCookies() []*HTTPCookieSetting {
	if x != nil {
		return x.ExtraCookies
	}
	return nil
}

func (x *MITMContentReplacer) GetEnableForURI() bool {
	if x != nil {
		return x.EnableForURI
	}
	return false
}

func (x *MITMContentReplacer) GetExtraRepeat() bool {
	if x != nil {
		return x.ExtraRepeat
	}
	return false
}

func (x *MITMContentReplacer) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

type YakScriptHookItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId   int64  `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
	Verbose       string `protobuf:"bytes,3,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *YakScriptHookItem) Reset() {
	*x = YakScriptHookItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptHookItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHookItem) ProtoMessage() {}

func (x *YakScriptHookItem) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHookItem.ProtoReflect.Descriptor instead.
func (*YakScriptHookItem) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{211}
}

func (x *YakScriptHookItem) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *YakScriptHookItem) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

func (x *YakScriptHookItem) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type YakScriptHooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HookName string               `protobuf:"bytes,1,opt,name=HookName,proto3" json:"HookName,omitempty"`
	Hooks    []*YakScriptHookItem `protobuf:"bytes,2,rep,name=Hooks,proto3" json:"Hooks,omitempty"`
}

func (x *YakScriptHooks) Reset() {
	*x = YakScriptHooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptHooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptHooks) ProtoMessage() {}

func (x *YakScriptHooks) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptHooks.ProtoReflect.Descriptor instead.
func (*YakScriptHooks) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{212}
}

func (x *YakScriptHooks) GetHookName() string {
	if x != nil {
		return x.HookName
	}
	return ""
}

func (x *YakScriptHooks) GetHooks() []*YakScriptHookItem {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type MITMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request             []byte                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Refresh             bool                   `protobuf:"varint,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	IsHttps             bool                   `protobuf:"varint,3,opt,name=isHttps,proto3" json:"isHttps,omitempty"`
	Url                 string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Id                  int64                  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	JustFilter          bool                   `protobuf:"varint,16,opt,name=justFilter,proto3" json:"justFilter,omitempty"`
	IncludeHostname     []string               `protobuf:"bytes,17,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname     []string               `protobuf:"bytes,18,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix       []string               `protobuf:"bytes,19,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	HistoryHTTPFlow     *HTTPFlow              `protobuf:"bytes,22,opt,name=historyHTTPFlow,proto3" json:"historyHTTPFlow,omitempty"`
	ForResponse         bool                   `protobuf:"varint,23,opt,name=forResponse,proto3" json:"forResponse,omitempty"`
	Response            []byte                 `protobuf:"bytes,24,opt,name=response,proto3" json:"response,omitempty"`
	ResponseId          int64                  `protobuf:"varint,26,opt,name=responseId,proto3" json:"responseId,omitempty"`
	HaveMessage         bool                   `protobuf:"varint,27,opt,name=haveMessage,proto3" json:"haveMessage,omitempty"`
	Message             *ExecResult            `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`
	GetCurrentHook      bool                   `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	Hooks               []*YakScriptHooks      `protobuf:"bytes,31,rep,name=hooks,proto3" json:"hooks,omitempty"`
	RemoteAddr          string                 `protobuf:"bytes,32,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	NotificationContent []byte                 `protobuf:"bytes,33,opt,name=notificationContent,proto3" json:"notificationContent,omitempty"`
	HaveNotification    bool                   `protobuf:"varint,34,opt,name=haveNotification,proto3" json:"haveNotification,omitempty"`
	HaveLoadingSetter   bool                   `protobuf:"varint,35,opt,name=haveLoadingSetter,proto3" json:"haveLoadingSetter,omitempty"`
	LoadingFlag         bool                   `protobuf:"varint,36,opt,name=loadingFlag,proto3" json:"loadingFlag,omitempty"`
	IsWebsocket         bool                   `protobuf:"varint,37,opt,name=isWebsocket,proto3" json:"isWebsocket,omitempty"`
	WebsocketEncode     []string               `protobuf:"bytes,38,rep,name=websocketEncode,proto3" json:"websocketEncode,omitempty"`
	IncludeSuffix       []string               `protobuf:"bytes,110,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod       []string               `protobuf:"bytes,111,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	ExcludeContentTypes []string               `protobuf:"bytes,113,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	ExcludeUri          []string               `protobuf:"bytes,114,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri          []string               `protobuf:"bytes,115,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	JustContentReplacer bool                   `protobuf:"varint,120,opt,name=justContentReplacer,proto3" json:"justContentReplacer,omitempty"`
	Replacers           []*MITMContentReplacer `protobuf:"bytes,121,rep,name=replacers,proto3" json:"replacers,omitempty"`
}

func (x *MITMResponse) Reset() {
	*x = MITMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMResponse) ProtoMessage() {}

func (x *MITMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMResponse.ProtoReflect.Descriptor instead.
func (*MITMResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{213}
}

func (x *MITMResponse) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMResponse) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *MITMResponse) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *MITMResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MITMResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMResponse) GetJustFilter() bool {
	if x != nil {
		return x.JustFilter
	}
	return false
}

func (x *MITMResponse) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMResponse) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetHistoryHTTPFlow() *HTTPFlow {
	if x != nil {
		return x.HistoryHTTPFlow
	}
	return nil
}

func (x *MITMResponse) GetForResponse() bool {
	if x != nil {
		return x.ForResponse
	}
	return false
}

func (x *MITMResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MITMResponse) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMResponse) GetHaveMessage() bool {
	if x != nil {
		return x.HaveMessage
	}
	return false
}

func (x *MITMResponse) GetMessage() *ExecResult {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MITMResponse) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMResponse) GetHooks() []*YakScriptHooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *MITMResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *MITMResponse) GetNotificationContent() []byte {
	if x != nil {
		return x.NotificationContent
	}
	return nil
}

func (x *MITMResponse) GetHaveNotification() bool {
	if x != nil {
		return x.HaveNotification
	}
	return false
}

func (x *MITMResponse) GetHaveLoadingSetter() bool {
	if x != nil {
		return x.HaveLoadingSetter
	}
	return false
}

func (x *MITMResponse) GetLoadingFlag() bool {
	if x != nil {
		return x.LoadingFlag
	}
	return false
}

func (x *MITMResponse) GetIsWebsocket() bool {
	if x != nil {
		return x.IsWebsocket
	}
	return false
}

func (x *MITMResponse) GetWebsocketEncode() []string {
	if x != nil {
		return x.WebsocketEncode
	}
	return nil
}

func (x *MITMResponse) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMResponse) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMResponse) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMResponse) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMResponse) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMResponse) GetJustContentReplacer() bool {
	if x != nil {
		return x.JustContentReplacer
	}
	return false
}

func (x *MITMResponse) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

type RemoveHookParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearAll     bool     `protobuf:"varint,1,opt,name=ClearAll,proto3" json:"ClearAll,omitempty"`
	HookName     []string `protobuf:"bytes,2,rep,name=HookName,proto3" json:"HookName,omitempty"`
	RemoveHookID []string `protobuf:"bytes,3,rep,name=RemoveHookID,proto3" json:"RemoveHookID,omitempty"`
}

func (x *RemoveHookParams) Reset() {
	*x = RemoveHookParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHookParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHookParams) ProtoMessage() {}

func (x *RemoveHookParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHookParams.ProtoReflect.Descriptor instead.
func (*RemoveHookParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{214}
}

func (x *RemoveHookParams) GetClearAll() bool {
	if x != nil {
		return x.ClearAll
	}
	return false
}

func (x *RemoveHookParams) GetHookName() []string {
	if x != nil {
		return x.HookName
	}
	return nil
}

func (x *RemoveHookParams) GetRemoveHookID() []string {
	if x != nil {
		return x.RemoveHookID
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrtPem         []byte   `protobuf:"bytes,1,opt,name=CrtPem,proto3" json:"CrtPem,omitempty"`
	KeyPem         []byte   `protobuf:"bytes,2,opt,name=KeyPem,proto3" json:"KeyPem,omitempty"`
	CaCertificates [][]byte `protobuf:"bytes,3,rep,name=CaCertificates,proto3" json:"CaCertificates,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{215}
}

func (x *Certificate) GetCrtPem() []byte {
	if x != nil {
		return x.CrtPem
	}
	return nil
}

func (x *Certificate) GetKeyPem() []byte {
	if x != nil {
		return x.KeyPem
	}
	return nil
}

func (x *Certificate) GetCaCertificates() [][]byte {
	if x != nil {
		return x.CaCertificates
	}
	return nil
}

type MITMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request                   []byte                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Host                      string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                      uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DownstreamProxy           string                 `protobuf:"bytes,4,opt,name=downstreamProxy,proto3" json:"downstreamProxy,omitempty"`
	Id                        int64                  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Recover                   bool                   `protobuf:"varint,6,opt,name=recover,proto3" json:"recover,omitempty"`
	IncludeHostname           []string               `protobuf:"bytes,7,rep,name=includeHostname,proto3" json:"includeHostname,omitempty"`
	ExcludeHostname           []string               `protobuf:"bytes,8,rep,name=excludeHostname,proto3" json:"excludeHostname,omitempty"`
	ExcludeSuffix             []string               `protobuf:"bytes,9,rep,name=excludeSuffix,proto3" json:"excludeSuffix,omitempty"`
	IncludeSuffix             []string               `protobuf:"bytes,10,rep,name=includeSuffix,proto3" json:"includeSuffix,omitempty"`
	ExcludeMethod             []string               `protobuf:"bytes,11,rep,name=excludeMethod,proto3" json:"excludeMethod,omitempty"`
	UpdateFilter              bool                   `protobuf:"varint,12,opt,name=updateFilter,proto3" json:"updateFilter,omitempty"`
	HijackResponse            bool                   `protobuf:"varint,13,opt,name=hijackResponse,proto3" json:"hijackResponse,omitempty"`
	Drop                      bool                   `protobuf:"varint,14,opt,name=drop,proto3" json:"drop,omitempty"`
	Forward                   bool                   `protobuf:"varint,15,opt,name=forward,proto3" json:"forward,omitempty"`
	ResponseId                int64                  `protobuf:"varint,16,opt,name=responseId,proto3" json:"responseId,omitempty"`
	SetYakScript              bool                   `protobuf:"varint,21,opt,name=setYakScript,proto3" json:"setYakScript,omitempty"`
	YakScriptParams           []*ExecParamItem       `protobuf:"bytes,22,rep,name=yakScriptParams,proto3" json:"yakScriptParams,omitempty"`
	YakScriptID               int64                  `protobuf:"varint,23,opt,name=yakScriptID,proto3" json:"yakScriptID,omitempty"`
	YakScriptContent          string                 `protobuf:"bytes,25,opt,name=yakScriptContent,proto3" json:"yakScriptContent,omitempty"`
	GetCurrentHook            bool                   `protobuf:"varint,30,opt,name=getCurrentHook,proto3" json:"getCurrentHook,omitempty"`
	RemoveHook                bool                   `protobuf:"varint,31,opt,name=removeHook,proto3" json:"removeHook,omitempty"`
	RemoveHookParams          *RemoveHookParams      `protobuf:"bytes,32,opt,name=removeHookParams,proto3" json:"removeHookParams,omitempty"`
	SetAutoForward            bool                   `protobuf:"varint,33,opt,name=setAutoForward,proto3" json:"setAutoForward,omitempty"`
	AutoForwardValue          bool                   `protobuf:"varint,34,opt,name=autoForwardValue,proto3" json:"autoForwardValue,omitempty"`
	SetClearMITMPluginContext bool                   `protobuf:"varint,35,opt,name=setClearMITMPluginContext,proto3" json:"setClearMITMPluginContext,omitempty"`
	SetPluginMode             bool                   `protobuf:"varint,36,opt,name=setPluginMode,proto3" json:"setPluginMode,omitempty"`
	InitPluginNames           []string               `protobuf:"bytes,37,rep,name=initPluginNames,proto3" json:"initPluginNames,omitempty"`
	SetContentReplacers       bool                   `protobuf:"varint,38,opt,name=setContentReplacers,proto3" json:"setContentReplacers,omitempty"`
	Replacers                 []*MITMContentReplacer `protobuf:"bytes,39,rep,name=replacers,proto3" json:"replacers,omitempty"`
	ExcludeContentTypes       []string               `protobuf:"bytes,40,rep,name=excludeContentTypes,proto3" json:"excludeContentTypes,omitempty"`
	SetResetFilter            bool                   `protobuf:"varint,41,opt,name=setResetFilter,proto3" json:"setResetFilter,omitempty"`
	EnableHttp2               bool                   `protobuf:"varint,42,opt,name=enableHttp2,proto3" json:"enableHttp2,omitempty"`
	ExcludeUri                []string               `protobuf:"bytes,43,rep,name=excludeUri,proto3" json:"excludeUri,omitempty"`
	IncludeUri                []string               `protobuf:"bytes,44,rep,name=includeUri,proto3" json:"includeUri,omitempty"`
	Certificates              []*Certificate         `protobuf:"bytes,45,rep,name=certificates,proto3" json:"certificates,omitempty"`
	EnableGMTLS               bool                   `protobuf:"varint,46,opt,name=enableGMTLS,proto3" json:"enableGMTLS,omitempty"`
	OnlyEnableGMTLS           bool                   `protobuf:"varint,47,opt,name=onlyEnableGMTLS,proto3" json:"onlyEnableGMTLS,omitempty"`
	PreferGMTLS               bool                   `protobuf:"varint,48,opt,name=preferGMTLS,proto3" json:"preferGMTLS,omitempty"`
	ProxyUsername             string                 `protobuf:"bytes,49,opt,name=proxyUsername,proto3" json:"proxyUsername,omitempty"`
	ProxyPassword             string                 `protobuf:"bytes,50,opt,name=proxyPassword,proto3" json:"proxyPassword,omitempty"`
	EnableProxyAuth           bool                   `protobuf:"varint,51,opt,name=enableProxyAuth,proto3" json:"enableProxyAuth,omitempty"`
	DnsServers                []string               `protobuf:"bytes,52,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	Hosts                     []*KVPair              `protobuf:"bytes,53,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Response                  []byte                 `protobuf:"bytes,111,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MITMRequest) Reset() {
	*x = MITMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MITMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MITMRequest) ProtoMessage() {}

func (x *MITMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MITMRequest.ProtoReflect.Descriptor instead.
func (*MITMRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{216}
}

func (x *MITMRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MITMRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MITMRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MITMRequest) GetDownstreamProxy() string {
	if x != nil {
		return x.DownstreamProxy
	}
	return ""
}

func (x *MITMRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MITMRequest) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *MITMRequest) GetIncludeHostname() []string {
	if x != nil {
		return x.IncludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeHostname() []string {
	if x != nil {
		return x.ExcludeHostname
	}
	return nil
}

func (x *MITMRequest) GetExcludeSuffix() []string {
	if x != nil {
		return x.ExcludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetIncludeSuffix() []string {
	if x != nil {
		return x.IncludeSuffix
	}
	return nil
}

func (x *MITMRequest) GetExcludeMethod() []string {
	if x != nil {
		return x.ExcludeMethod
	}
	return nil
}

func (x *MITMRequest) GetUpdateFilter() bool {
	if x != nil {
		return x.UpdateFilter
	}
	return false
}

func (x *MITMRequest) GetHijackResponse() bool {
	if x != nil {
		return x.HijackResponse
	}
	return false
}

func (x *MITMRequest) GetDrop() bool {
	if x != nil {
		return x.Drop
	}
	return false
}

func (x *MITMRequest) GetForward() bool {
	if x != nil {
		return x.Forward
	}
	return false
}

func (x *MITMRequest) GetResponseId() int64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *MITMRequest) GetSetYakScript() bool {
	if x != nil {
		return x.SetYakScript
	}
	return false
}

func (x *MITMRequest) GetYakScriptParams() []*ExecParamItem {
	if x != nil {
		return x.YakScriptParams
	}
	return nil
}

func (x *MITMRequest) GetYakScriptID() int64 {
	if x != nil {
		return x.YakScriptID
	}
	return 0
}

func (x *MITMRequest) GetYakScriptContent() string {
	if x != nil {
		return x.YakScriptContent
	}
	return ""
}

func (x *MITMRequest) GetGetCurrentHook() bool {
	if x != nil {
		return x.GetCurrentHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHook() bool {
	if x != nil {
		return x.RemoveHook
	}
	return false
}

func (x *MITMRequest) GetRemoveHookParams() *RemoveHookParams {
	if x != nil {
		return x.RemoveHookParams
	}
	return nil
}

func (x *MITMRequest) GetSetAutoForward() bool {
	if x != nil {
		return x.SetAutoForward
	}
	return false
}

func (x *MITMRequest) GetAutoForwardValue() bool {
	if x != nil {
		return x.AutoForwardValue
	}
	return false
}

func (x *MITMRequest) GetSetClearMITMPluginContext() bool {
	if x != nil {
		return x.SetClearMITMPluginContext
	}
	return false
}

func (x *MITMRequest) GetSetPluginMode() bool {
	if x != nil {
		return x.SetPluginMode
	}
	return false
}

func (x *MITMRequest) GetInitPluginNames() []string {
	if x != nil {
		return x.InitPluginNames
	}
	return nil
}

func (x *MITMRequest) GetSetContentReplacers() bool {
	if x != nil {
		return x.SetContentReplacers
	}
	return false
}

func (x *MITMRequest) GetReplacers() []*MITMContentReplacer {
	if x != nil {
		return x.Replacers
	}
	return nil
}

func (x *MITMRequest) GetExcludeContentTypes() []string {
	if x != nil {
		return x.ExcludeContentTypes
	}
	return nil
}

func (x *MITMRequest) GetSetResetFilter() bool {
	if x != nil {
		return x.SetResetFilter
	}
	return false
}

func (x *MITMRequest) GetEnableHttp2() bool {
	if x != nil {
		return x.EnableHttp2
	}
	return false
}

func (x *MITMRequest) GetExcludeUri() []string {
	if x != nil {
		return x.ExcludeUri
	}
	return nil
}

func (x *MITMRequest) GetIncludeUri() []string {
	if x != nil {
		return x.IncludeUri
	}
	return nil
}

func (x *MITMRequest) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *MITMRequest) GetEnableGMTLS() bool {
	if x != nil {
		return x.EnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetOnlyEnableGMTLS() bool {
	if x != nil {
		return x.OnlyEnableGMTLS
	}
	return false
}

func (x *MITMRequest) GetPreferGMTLS() bool {
	if x != nil {
		return x.PreferGMTLS
	}
	return false
}

func (x *MITMRequest) GetProxyUsername() string {
	if x != nil {
		return x.ProxyUsername
	}
	return ""
}

func (x *MITMRequest) GetProxyPassword() string {
	if x != nil {
		return x.ProxyPassword
	}
	return ""
}

func (x *MITMRequest) GetEnableProxyAuth() bool {
	if x != nil {
		return x.EnableProxyAuth
	}
	return false
}

func (x *MITMRequest) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *MITMRequest) GetHosts() []*KVPair {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MITMRequest) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type DownloadOnlinePluginByScriptName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Id         int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	HeadImg    string `protobuf:"bytes,3,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
}

func (x *DownloadOnlinePluginByScriptName) Reset() {
	*x = DownloadOnlinePluginByScriptName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptName) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptName) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptName.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptName) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{217}
}

func (x *DownloadOnlinePluginByScriptName) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *DownloadOnlinePluginByScriptName) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadOnlinePluginByScriptName) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

type DownloadOnlinePluginByScriptNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DownloadOnlinePluginByScriptName `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *DownloadOnlinePluginByScriptNamesResponse) Reset() {
	*x = DownloadOnlinePluginByScriptNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesResponse) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesResponse.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{218}
}

func (x *DownloadOnlinePluginByScriptNamesResponse) GetData() []*DownloadOnlinePluginByScriptName {
	if x != nil {
		return x.Data
	}
	return nil
}

type DownloadOnlinePluginProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Log      string  `protobuf:"bytes,2,opt,name=Log,proto3" json:"Log,omitempty"`
}

func (x *DownloadOnlinePluginProgress) Reset() {
	*x = DownloadOnlinePluginProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginProgress) ProtoMessage() {}

func (x *DownloadOnlinePluginProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginProgress.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{219}
}

func (x *DownloadOnlinePluginProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DownloadOnlinePluginProgress) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type DownloadOnlinePluginByScriptNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptNames []string `protobuf:"bytes,1,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Token       string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *DownloadOnlinePluginByScriptNamesRequest) Reset() {
	*x = DownloadOnlinePluginByScriptNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByScriptNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByScriptNamesRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByScriptNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByScriptNamesRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByScriptNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{220}
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *DownloadOnlinePluginByScriptNamesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteLocalPluginsByWhereRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string `protobuf:"bytes,1,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	UserId   int64  `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *DeleteLocalPluginsByWhereRequest) Reset() {
	*x = DeleteLocalPluginsByWhereRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLocalPluginsByWhereRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocalPluginsByWhereRequest) ProtoMessage() {}

func (x *DeleteLocalPluginsByWhereRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocalPluginsByWhereRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocalPluginsByWhereRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{221}
}

func (x *DeleteLocalPluginsByWhereRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteLocalPluginsByWhereRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type TagsAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TagsAndType) Reset() {
	*x = TagsAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsAndType) ProtoMessage() {}

func (x *TagsAndType) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsAndType.ProtoReflect.Descriptor instead.
func (*TagsAndType) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{222}
}

func (x *TagsAndType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagsAndType) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetYakScriptTagsAndTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type []*TagsAndType `protobuf:"bytes,1,rep,name=Type,proto3" json:"Type,omitempty"`
	Tag  []*TagsAndType `protobuf:"bytes,2,rep,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *GetYakScriptTagsAndTypeResponse) Reset() {
	*x = GetYakScriptTagsAndTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptTagsAndTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsAndTypeResponse) ProtoMessage() {}

func (x *GetYakScriptTagsAndTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsAndTypeResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsAndTypeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{223}
}

func (x *GetYakScriptTagsAndTypeResponse) GetType() []*TagsAndType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetYakScriptTagsAndTypeResponse) GetTag() []*TagsAndType {
	if x != nil {
		return x.Tag
	}
	return nil
}

type DeletePluginByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OnlineBaseUrl string `protobuf:"bytes,2,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
}

func (x *DeletePluginByUserIDRequest) Reset() {
	*x = DeletePluginByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePluginByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginByUserIDRequest) ProtoMessage() {}

func (x *DeletePluginByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginByUserIDRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{224}
}

func (x *DeletePluginByUserIDRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeletePluginByUserIDRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

type DownloadOnlinePluginByTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	BindMe     bool   `protobuf:"varint,2,opt,name=BindMe,proto3" json:"BindMe,omitempty"`
	Keywords   string `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	PluginType string `protobuf:"bytes,4,opt,name=PluginType,proto3" json:"PluginType,omitempty"`
	Status     string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	IsPrivate  string `protobuf:"bytes,6,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Tags       string `protobuf:"bytes,7,opt,name=Tags,proto3" json:"Tags,omitempty"`
	UserName   string `protobuf:"bytes,8,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId     int64  `protobuf:"varint,9,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TimeSearch string `protobuf:"bytes,10,opt,name=TimeSearch,proto3" json:"TimeSearch,omitempty"`
	Group      string `protobuf:"bytes,11,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DownloadOnlinePluginByTokenRequest) Reset() {
	*x = DownloadOnlinePluginByTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByTokenRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByTokenRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{225}
}

func (x *DownloadOnlinePluginByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetBindMe() bool {
	if x != nil {
		return x.BindMe
	}
	return false
}

func (x *DownloadOnlinePluginByTokenRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetIsPrivate() string {
	if x != nil {
		return x.IsPrivate
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DownloadOnlinePluginByTokenRequest) GetTimeSearch() string {
	if x != nil {
		return x.TimeSearch
	}
	return ""
}

func (x *DownloadOnlinePluginByTokenRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DownloadOnlinePluginByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineIDs []int64  `protobuf:"varint,1,rep,packed,name=OnlineIDs,proto3" json:"OnlineIDs,omitempty"`
	Token     string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID      []string `protobuf:"bytes,3,rep,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DownloadOnlinePluginByIdsRequest) Reset() {
	*x = DownloadOnlinePluginByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdsRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdsRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{226}
}

func (x *DownloadOnlinePluginByIdsRequest) GetOnlineIDs() []int64 {
	if x != nil {
		return x.OnlineIDs
	}
	return nil
}

func (x *DownloadOnlinePluginByIdsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdsRequest) GetUUID() []string {
	if x != nil {
		return x.UUID
	}
	return nil
}

type DownloadOnlinePluginByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineID int64  `protobuf:"varint,1,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	UUID     string `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DownloadOnlinePluginByIdRequest) Reset() {
	*x = DownloadOnlinePluginByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOnlinePluginByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOnlinePluginByIdRequest) ProtoMessage() {}

func (x *DownloadOnlinePluginByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOnlinePluginByIdRequest.ProtoReflect.Descriptor instead.
func (*DownloadOnlinePluginByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{227}
}

func (x *DownloadOnlinePluginByIdRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

func (x *DownloadOnlinePluginByIdRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DownloadOnlinePluginByIdRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type OnlineProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl   string `protobuf:"bytes,1,opt,name=BaseUrl,proto3" json:"BaseUrl,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Proxy     string `protobuf:"bytes,3,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	IsCompany bool   `protobuf:"varint,4,opt,name=IsCompany,proto3" json:"IsCompany,omitempty"`
}

func (x *OnlineProfile) Reset() {
	*x = OnlineProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineProfile) ProtoMessage() {}

func (x *OnlineProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineProfile.ProtoReflect.Descriptor instead.
func (*OnlineProfile) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{228}
}

func (x *OnlineProfile) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *OnlineProfile) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnlineProfile) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *OnlineProfile) GetIsCompany() bool {
	if x != nil {
		return x.IsCompany
	}
	return false
}

type GetAllPayloadGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *GetAllPayloadGroupResponse) Reset() {
	*x = GetAllPayloadGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadGroupResponse) ProtoMessage() {}

func (x *GetAllPayloadGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadGroupResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadGroupResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{229}
}

func (x *GetAllPayloadGroupResponse) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SavePayloadProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress            float64 `protobuf:"fixed64,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	HandledBytes        int64   `protobuf:"varint,2,opt,name=HandledBytes,proto3" json:"HandledBytes,omitempty"`
	HandledBytesVerbose string  `protobuf:"bytes,3,opt,name=HandledBytesVerbose,proto3" json:"HandledBytesVerbose,omitempty"`
	TotalBytes          int64   `protobuf:"varint,4,opt,name=TotalBytes,proto3" json:"TotalBytes,omitempty"`
	TotalBytesVerbose   string  `protobuf:"bytes,5,opt,name=TotalBytesVerbose,proto3" json:"TotalBytesVerbose,omitempty"`
	CostDuration        float64 `protobuf:"fixed64,6,opt,name=CostDuration,proto3" json:"CostDuration,omitempty"`
	CostDurationVerbose string  `protobuf:"bytes,7,opt,name=CostDurationVerbose,proto3" json:"CostDurationVerbose,omitempty"`
}

func (x *SavePayloadProgress) Reset() {
	*x = SavePayloadProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePayloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadProgress) ProtoMessage() {}

func (x *SavePayloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadProgress.ProtoReflect.Descriptor instead.
func (*SavePayloadProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{230}
}

func (x *SavePayloadProgress) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytes() int64 {
	if x != nil {
		return x.HandledBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetHandledBytesVerbose() string {
	if x != nil {
		return x.HandledBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *SavePayloadProgress) GetTotalBytesVerbose() string {
	if x != nil {
		return x.TotalBytesVerbose
	}
	return ""
}

func (x *SavePayloadProgress) GetCostDuration() float64 {
	if x != nil {
		return x.CostDuration
	}
	return 0
}

func (x *SavePayloadProgress) GetCostDurationVerbose() string {
	if x != nil {
		return x.CostDurationVerbose
	}
	return ""
}

type DeletePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeletePayloadRequest) Reset() {
	*x = DeletePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadRequest) ProtoMessage() {}

func (x *DeletePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{231}
}

func (x *DeletePayloadRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePayloadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SavePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFile   bool     `protobuf:"varint,1,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
	Group    string   `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Content  string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	FileName []string `protobuf:"bytes,4,rep,name=FileName,proto3" json:"FileName,omitempty"`
}

func (x *SavePayloadRequest) Reset() {
	*x = SavePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePayloadRequest) ProtoMessage() {}

func (x *SavePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePayloadRequest.ProtoReflect.Descriptor instead.
func (*SavePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{232}
}

func (x *SavePayloadRequest) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *SavePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SavePayloadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SavePayloadRequest) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

type UpdatePayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	OldGroup string `protobuf:"bytes,2,opt,name=OldGroup,proto3" json:"OldGroup,omitempty"`
}

func (x *UpdatePayloadRequest) Reset() {
	*x = UpdatePayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayloadRequest) ProtoMessage() {}

func (x *UpdatePayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayloadRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{233}
}

func (x *UpdatePayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *UpdatePayloadRequest) GetOldGroup() string {
	if x != nil {
		return x.OldGroup
	}
	return ""
}

type QueryPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Group      string  `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Keyword    string  `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
}

func (x *QueryPayloadRequest) Reset() {
	*x = QueryPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadRequest) ProtoMessage() {}

func (x *QueryPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadRequest.ProtoReflect.Descriptor instead.
func (*QueryPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{234}
}

func (x *QueryPayloadRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryPayloadRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type QueryPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging    `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64      `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Payload `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryPayloadResponse) Reset() {
	*x = QueryPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayloadResponse) ProtoMessage() {}

func (x *QueryPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayloadResponse.ProtoReflect.Descriptor instead.
func (*QueryPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{235}
}

func (x *QueryPayloadResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPayloadResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Group        string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	ContentBytes []byte `protobuf:"bytes,3,opt,name=ContentBytes,proto3" json:"ContentBytes,omitempty"`
	Content      string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{236}
}

func (x *Payload) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payload) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Payload) GetContentBytes() []byte {
	if x != nil {
		return x.ContentBytes
	}
	return nil
}

func (x *Payload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetAllPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *GetAllPayloadRequest) Reset() {
	*x = GetAllPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadRequest) ProtoMessage() {}

func (x *GetAllPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetAllPayloadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{237}
}

func (x *GetAllPayloadRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetAllPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Payload `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetAllPayloadResponse) Reset() {
	*x = GetAllPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPayloadResponse) ProtoMessage() {}

func (x *GetAllPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetAllPayloadResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{238}
}

func (x *GetAllPayloadResponse) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeletePayloadByGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DeletePayloadByGroupRequest) Reset() {
	*x = DeletePayloadByGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadByGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadByGroupRequest) ProtoMessage() {}

func (x *DeletePayloadByGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadByGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePayloadByGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{239}
}

func (x *DeletePayloadByGroupRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type LastRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecordPtr        int64   `protobuf:"varint,1,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
	Percent              float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,3,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	ExtraInfo            string  `protobuf:"bytes,4,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`
}

func (x *LastRecord) Reset() {
	*x = LastRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastRecord) ProtoMessage() {}

func (x *LastRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastRecord.ProtoReflect.Descriptor instead.
func (*LastRecord) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{240}
}

func (x *LastRecord) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

func (x *LastRecord) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *LastRecord) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *LastRecord) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type SimpleDetectUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	LastRecordPtr        int64   `protobuf:"varint,6,opt,name=LastRecordPtr,proto3" json:"LastRecordPtr,omitempty"`
}

func (x *SimpleDetectUnfinishedTask) Reset() {
	*x = SimpleDetectUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleDetectUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectUnfinishedTask) ProtoMessage() {}

func (x *SimpleDetectUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectUnfinishedTask.ProtoReflect.Descriptor instead.
func (*SimpleDetectUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{241}
}

func (x *SimpleDetectUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SimpleDetectUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *SimpleDetectUnfinishedTask) GetLastRecordPtr() int64 {
	if x != nil {
		return x.LastRecordPtr
	}
	return 0
}

type GetSimpleDetectUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*SimpleDetectUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetSimpleDetectUnfinishedTaskResponse) Reset() {
	*x = GetSimpleDetectUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimpleDetectUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetSimpleDetectUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimpleDetectUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetSimpleDetectUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{242}
}

func (x *GetSimpleDetectUnfinishedTaskResponse) GetTasks() []*SimpleDetectUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type RecordPortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRecord      *LastRecord      `protobuf:"bytes,1,opt,name=LastRecord,proto3" json:"LastRecord,omitempty"`
	PortScanRequest *PortScanRequest `protobuf:"bytes,2,opt,name=PortScanRequest,proto3" json:"PortScanRequest,omitempty"`
}

func (x *RecordPortScanRequest) Reset() {
	*x = RecordPortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPortScanRequest) ProtoMessage() {}

func (x *RecordPortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPortScanRequest.ProtoReflect.Descriptor instead.
func (*RecordPortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{243}
}

func (x *RecordPortScanRequest) GetLastRecord() *LastRecord {
	if x != nil {
		return x.LastRecord
	}
	return nil
}

func (x *RecordPortScanRequest) GetPortScanRequest() *PortScanRequest {
	if x != nil {
		return x.PortScanRequest
	}
	return nil
}

type PortScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets                string   `protobuf:"bytes,1,opt,name=Targets,proto3" json:"Targets,omitempty"`
	Ports                  string   `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Mode                   string   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Proto                  []string `protobuf:"bytes,4,rep,name=Proto,proto3" json:"Proto,omitempty"`
	Concurrent             int64    `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	Active                 bool     `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	FingerprintMode        string   `protobuf:"bytes,7,opt,name=FingerprintMode,proto3" json:"FingerprintMode,omitempty"`
	SaveToDB               bool     `protobuf:"varint,8,opt,name=SaveToDB,proto3" json:"SaveToDB,omitempty"`
	SaveClosedPorts        bool     `protobuf:"varint,9,opt,name=SaveClosedPorts,proto3" json:"SaveClosedPorts,omitempty"`
	TargetsFile            string   `protobuf:"bytes,10,opt,name=TargetsFile,proto3" json:"TargetsFile,omitempty"`
	ScriptNames            []string `protobuf:"bytes,11,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	Proxy                  []string `protobuf:"bytes,12,rep,name=Proxy,proto3" json:"Proxy,omitempty"`
	ProbeTimeout           float64  `protobuf:"fixed64,13,opt,name=ProbeTimeout,proto3" json:"ProbeTimeout,omitempty"`
	ProbeMax               int32    `protobuf:"varint,14,opt,name=ProbeMax,proto3" json:"ProbeMax,omitempty"`
	EnableCClassScan       bool     `protobuf:"varint,15,opt,name=EnableCClassScan,proto3" json:"EnableCClassScan,omitempty"`
	SkippedHostAliveScan   bool     `protobuf:"varint,16,opt,name=SkippedHostAliveScan,proto3" json:"SkippedHostAliveScan,omitempty"`
	HostAliveTimeout       float64  `protobuf:"fixed64,17,opt,name=HostAliveTimeout,proto3" json:"HostAliveTimeout,omitempty"`
	HostAliveConcurrent    int32    `protobuf:"varint,18,opt,name=HostAliveConcurrent,proto3" json:"HostAliveConcurrent,omitempty"`
	HostAlivePorts         string   `protobuf:"bytes,19,opt,name=HostAlivePorts,proto3" json:"HostAlivePorts,omitempty"`
	ExcludeHosts           string   `protobuf:"bytes,20,opt,name=ExcludeHosts,proto3" json:"ExcludeHosts,omitempty"`
	ExcludePorts           string   `protobuf:"bytes,21,opt,name=ExcludePorts,proto3" json:"ExcludePorts,omitempty"`
	EnableBasicCrawler     bool     `protobuf:"varint,22,opt,name=EnableBasicCrawler,proto3" json:"EnableBasicCrawler,omitempty"`
	BasicCrawlerRequestMax int64    `protobuf:"varint,23,opt,name=BasicCrawlerRequestMax,proto3" json:"BasicCrawlerRequestMax,omitempty"`
	SynConcurrent          int64    `protobuf:"varint,24,opt,name=SynConcurrent,proto3" json:"SynConcurrent,omitempty"`
	TaskName               string   `protobuf:"bytes,25,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *PortScanRequest) Reset() {
	*x = PortScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortScanRequest) ProtoMessage() {}

func (x *PortScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortScanRequest.ProtoReflect.Descriptor instead.
func (*PortScanRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{244}
}

func (x *PortScanRequest) GetTargets() string {
	if x != nil {
		return x.Targets
	}
	return ""
}

func (x *PortScanRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *PortScanRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PortScanRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *PortScanRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *PortScanRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PortScanRequest) GetFingerprintMode() string {
	if x != nil {
		return x.FingerprintMode
	}
	return ""
}

func (x *PortScanRequest) GetSaveToDB() bool {
	if x != nil {
		return x.SaveToDB
	}
	return false
}

func (x *PortScanRequest) GetSaveClosedPorts() bool {
	if x != nil {
		return x.SaveClosedPorts
	}
	return false
}

func (x *PortScanRequest) GetTargetsFile() string {
	if x != nil {
		return x.TargetsFile
	}
	return ""
}

func (x *PortScanRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *PortScanRequest) GetProxy() []string {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *PortScanRequest) GetProbeTimeout() float64 {
	if x != nil {
		return x.ProbeTimeout
	}
	return 0
}

func (x *PortScanRequest) GetProbeMax() int32 {
	if x != nil {
		return x.ProbeMax
	}
	return 0
}

func (x *PortScanRequest) GetEnableCClassScan() bool {
	if x != nil {
		return x.EnableCClassScan
	}
	return false
}

func (x *PortScanRequest) GetSkippedHostAliveScan() bool {
	if x != nil {
		return x.SkippedHostAliveScan
	}
	return false
}

func (x *PortScanRequest) GetHostAliveTimeout() float64 {
	if x != nil {
		return x.HostAliveTimeout
	}
	return 0
}

func (x *PortScanRequest) GetHostAliveConcurrent() int32 {
	if x != nil {
		return x.HostAliveConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetHostAlivePorts() string {
	if x != nil {
		return x.HostAlivePorts
	}
	return ""
}

func (x *PortScanRequest) GetExcludeHosts() string {
	if x != nil {
		return x.ExcludeHosts
	}
	return ""
}

func (x *PortScanRequest) GetExcludePorts() string {
	if x != nil {
		return x.ExcludePorts
	}
	return ""
}

func (x *PortScanRequest) GetEnableBasicCrawler() bool {
	if x != nil {
		return x.EnableBasicCrawler
	}
	return false
}

func (x *PortScanRequest) GetBasicCrawlerRequestMax() int64 {
	if x != nil {
		return x.BasicCrawlerRequestMax
	}
	return 0
}

func (x *PortScanRequest) GetSynConcurrent() int64 {
	if x != nil {
		return x.SynConcurrent
	}
	return 0
}

func (x *PortScanRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type SimpleDetectYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = SimpleDetectYakScriptUnfinishedTaskByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleDetectYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleDetectYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*SimpleDetectYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{245}
}

func (x *SimpleDetectYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type SetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	TTL   int64  `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
}

func (x *SetKeyRequest) Reset() {
	*x = SetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyRequest) ProtoMessage() {}

func (x *SetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{246}
}

func (x *SetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetKeyRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetKeyRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{247}
}

func (x *GetKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *GetKeyResult) Reset() {
	*x = GetKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResult) ProtoMessage() {}

func (x *GetKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResult.ProtoReflect.Descriptor instead.
func (*GetKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{248}
}

func (x *GetKeyResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ImportProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalProjectName string `protobuf:"bytes,1,opt,name=LocalProjectName,proto3" json:"LocalProjectName,omitempty"`
	ProjectFilePath  string `protobuf:"bytes,2,opt,name=ProjectFilePath,proto3" json:"ProjectFilePath,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	FolderId         int64  `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId    int64  `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
}

func (x *ImportProjectRequest) Reset() {
	*x = ImportProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProjectRequest) ProtoMessage() {}

func (x *ImportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProjectRequest.ProtoReflect.Descriptor instead.
func (*ImportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{249}
}

func (x *ImportProjectRequest) GetLocalProjectName() string {
	if x != nil {
		return x.LocalProjectName
	}
	return ""
}

func (x *ImportProjectRequest) GetProjectFilePath() string {
	if x != nil {
		return x.ProjectFilePath
	}
	return ""
}

func (x *ImportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ImportProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ImportProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

type ExportProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Id          int64  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ExportProjectRequest) Reset() {
	*x = ExportProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProjectRequest) ProtoMessage() {}

func (x *ExportProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProjectRequest.ProtoReflect.Descriptor instead.
func (*ExportProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{250}
}

func (x *ExportProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ExportProjectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProjectIOProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPath string  `protobuf:"bytes,1,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
	Percent    float64 `protobuf:"fixed64,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Verbose    string  `protobuf:"bytes,4,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *ProjectIOProgress) Reset() {
	*x = ProjectIOProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectIOProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectIOProgress) ProtoMessage() {}

func (x *ProjectIOProgress) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectIOProgress.ProtoReflect.Descriptor instead.
func (*ProjectIOProgress) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{251}
}

func (x *ProjectIOProgress) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *ProjectIOProgress) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ProjectIOProgress) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

type QueryProjectDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *QueryProjectDetailRequest) Reset() {
	*x = QueryProjectDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProjectDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProjectDetailRequest) ProtoMessage() {}

func (x *QueryProjectDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProjectDetailRequest.ProtoReflect.Descriptor instead.
func (*QueryProjectDetailRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{252}
}

func (x *QueryProjectDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *RemoveProjectRequest) Reset() {
	*x = RemoveProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRequest) ProtoMessage() {}

func (x *RemoveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRequest.ProtoReflect.Descriptor instead.
func (*RemoveProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{253}
}

func (x *RemoveProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type IsProjectNameValidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	FolderId      int64  `protobuf:"varint,2,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64  `protobuf:"varint,3,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *IsProjectNameValidRequest) Reset() {
	*x = IsProjectNameValidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsProjectNameValidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProjectNameValidRequest) ProtoMessage() {}

func (x *IsProjectNameValidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProjectNameValidRequest.ProtoReflect.Descriptor instead.
func (*IsProjectNameValidRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{254}
}

func (x *IsProjectNameValidRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *IsProjectNameValidRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *IsProjectNameValidRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NewProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *NewProjectResponse) Reset() {
	*x = NewProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectResponse) ProtoMessage() {}

func (x *NewProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectResponse.ProtoReflect.Descriptor instead.
func (*NewProjectResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{255}
}

func (x *NewProjectResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewProjectResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type NewProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	FolderId      int64  `protobuf:"varint,3,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64  `protobuf:"varint,4,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Id            int64  `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *NewProjectRequest) Reset() {
	*x = NewProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProjectRequest) ProtoMessage() {}

func (x *NewProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProjectRequest.ProtoReflect.Descriptor instead.
func (*NewProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{256}
}

func (x *NewProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *NewProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewProjectRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *NewProjectRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *NewProjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProjectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName     string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Id              int64  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	DatabasePath    string `protobuf:"bytes,4,opt,name=DatabasePath,proto3" json:"DatabasePath,omitempty"`
	CreatedAt       int64  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	FolderId        int64  `protobuf:"varint,6,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId   int64  `protobuf:"varint,7,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type            string `protobuf:"bytes,8,opt,name=Type,proto3" json:"Type,omitempty"`
	UpdateAt        int64  `protobuf:"varint,9,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	FolderName      string `protobuf:"bytes,10,opt,name=FolderName,proto3" json:"FolderName,omitempty"`
	ChildFolderName string `protobuf:"bytes,11,opt,name=ChildFolderName,proto3" json:"ChildFolderName,omitempty"`
}

func (x *ProjectDescription) Reset() {
	*x = ProjectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDescription) ProtoMessage() {}

func (x *ProjectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDescription.ProtoReflect.Descriptor instead.
func (*ProjectDescription) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{257}
}

func (x *ProjectDescription) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProjectDescription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectDescription) GetDatabasePath() string {
	if x != nil {
		return x.DatabasePath
	}
	return ""
}

func (x *ProjectDescription) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ProjectDescription) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *ProjectDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectDescription) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ProjectDescription) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *ProjectDescription) GetChildFolderName() string {
	if x != nil {
		return x.ChildFolderName
	}
	return ""
}

type GetProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string  `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Description   string  `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Pagination    *Paging `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FolderId      int64   `protobuf:"varint,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	ChildFolderId int64   `protobuf:"varint,5,opt,name=ChildFolderId,proto3" json:"ChildFolderId,omitempty"`
	Type          string  `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *GetProjectsRequest) Reset() {
	*x = GetProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsRequest) ProtoMessage() {}

func (x *GetProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{258}
}

func (x *GetProjectsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetProjectsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetProjectsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsRequest) GetFolderId() int64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetChildFolderId() int64 {
	if x != nil {
		return x.ChildFolderId
	}
	return 0
}

func (x *GetProjectsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsDeleteLocal bool  `protobuf:"varint,2,opt,name=IsDeleteLocal,proto3" json:"IsDeleteLocal,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{259}
}

func (x *DeleteProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteProjectRequest) GetIsDeleteLocal() bool {
	if x != nil {
		return x.IsDeleteLocal
	}
	return false
}

type GetProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects     []*ProjectDescription `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	Pagination   *Paging               `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total        int64                 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPage    int64                 `protobuf:"varint,4,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	ProjectToTal int64                 `protobuf:"varint,9,opt,name=ProjectToTal,proto3" json:"ProjectToTal,omitempty"`
}

func (x *GetProjectsResponse) Reset() {
	*x = GetProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsResponse) ProtoMessage() {}

func (x *GetProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{260}
}

func (x *GetProjectsResponse) GetProjects() []*ProjectDescription {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *GetProjectsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProjectsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetProjectsResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetProjectsResponse) GetProjectToTal() int64 {
	if x != nil {
		return x.ProjectToTal
	}
	return 0
}

type SetCurrentProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	Id          int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SetCurrentProjectRequest) Reset() {
	*x = SetCurrentProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurrentProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurrentProjectRequest) ProtoMessage() {}

func (x *SetCurrentProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurrentProjectRequest.ProtoReflect.Descriptor instead.
func (*SetCurrentProjectRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{261}
}

func (x *SetCurrentProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SetCurrentProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DefaultProxyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *DefaultProxyResult) Reset() {
	*x = DefaultProxyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProxyResult) ProtoMessage() {}

func (x *DefaultProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProxyResult.ProtoReflect.Descriptor instead.
func (*DefaultProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{262}
}

func (x *DefaultProxyResult) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type DownloadReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData string `protobuf:"bytes,1,opt,name=FileData,proto3" json:"FileData,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileDir  string `protobuf:"bytes,3,opt,name=FileDir,proto3" json:"FileDir,omitempty"`
}

func (x *DownloadReportRequest) Reset() {
	*x = DownloadReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReportRequest) ProtoMessage() {}

func (x *DownloadReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReportRequest.ProtoReflect.Descriptor instead.
func (*DownloadReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{263}
}

func (x *DownloadReportRequest) GetFileData() string {
	if x != nil {
		return x.FileData
	}
	return ""
}

func (x *DownloadReportRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DownloadReportRequest) GetFileDir() string {
	if x != nil {
		return x.FileDir
	}
	return ""
}

type DeleteReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash      string               `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Filter    *QueryReportsRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	IDs       []int64              `protobuf:"varint,4,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	DeleteAll bool                 `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
}

func (x *DeleteReportRequest) Reset() {
	*x = DeleteReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportRequest) ProtoMessage() {}

func (x *DeleteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{264}
}

func (x *DeleteReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteReportRequest) GetFilter() *QueryReportsRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteReportRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *DeleteReportRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	PublishedAt uint64 `protobuf:"varint,2,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	Hash        string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Id          uint64 `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Owner       string `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From        string `protobuf:"bytes,6,opt,name=From,proto3" json:"From,omitempty"`
	JsonRaw     string `protobuf:"bytes,7,opt,name=JsonRaw,proto3" json:"JsonRaw,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{265}
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetPublishedAt() uint64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *Report) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Report) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Report) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Report) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Report) GetJsonRaw() string {
	if x != nil {
		return x.JsonRaw
	}
	return ""
}

type QueryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *QueryReportRequest) Reset() {
	*x = QueryReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportRequest) ProtoMessage() {}

func (x *QueryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportRequest.ProtoReflect.Descriptor instead.
func (*QueryReportRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{266}
}

func (x *QueryReportRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryReportRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type QueryReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Report `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64     `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Pagination *Paging   `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryReportsResponse) Reset() {
	*x = QueryReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsResponse) ProtoMessage() {}

func (x *QueryReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsResponse.ProtoReflect.Descriptor instead.
func (*QueryReportsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{267}
}

func (x *QueryReportsResponse) GetData() []*Report {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryReportsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryReportsResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Owner      string  `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	From       string  `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	Keyword    string  `protobuf:"bytes,4,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Title      string  `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *QueryReportsRequest) Reset() {
	*x = QueryReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportsRequest) ProtoMessage() {}

func (x *QueryReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportsRequest.ProtoReflect.Descriptor instead.
func (*QueryReportsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{268}
}

func (x *QueryReportsRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryReportsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *QueryReportsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QueryReportsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryReportsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UploadRiskToOnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *UploadRiskToOnlineRequest) Reset() {
	*x = UploadRiskToOnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRiskToOnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRiskToOnlineRequest) ProtoMessage() {}

func (x *UploadRiskToOnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRiskToOnlineRequest.ProtoReflect.Descriptor instead.
func (*UploadRiskToOnlineRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{269}
}

func (x *UploadRiskToOnlineRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type NewRiskReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64   `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
	Ids     []int64 `protobuf:"varint,2,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *NewRiskReadRequest) Reset() {
	*x = NewRiskReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRiskReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRiskReadRequest) ProtoMessage() {}

func (x *NewRiskReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRiskReadRequest.ProtoReflect.Descriptor instead.
func (*NewRiskReadRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{270}
}

func (x *NewRiskReadRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *NewRiskReadRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NewRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt    int64  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Verbose      string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	TitleVerbose string `protobuf:"bytes,6,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	IsRead       bool   `protobuf:"varint,7,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
}

func (x *NewRisk) Reset() {
	*x = NewRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRisk) ProtoMessage() {}

func (x *NewRisk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRisk.ProtoReflect.Descriptor instead.
func (*NewRisk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{271}
}

func (x *NewRisk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewRisk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewRisk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NewRisk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NewRisk) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *NewRisk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *NewRisk) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type QueryNewRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*NewRisk `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	NewRiskTotal int64      `protobuf:"varint,2,opt,name=NewRiskTotal,proto3" json:"NewRiskTotal,omitempty"`
	Total        int64      `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryNewRiskResponse) Reset() {
	*x = QueryNewRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskResponse) ProtoMessage() {}

func (x *QueryNewRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskResponse.ProtoReflect.Descriptor instead.
func (*QueryNewRiskResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{272}
}

func (x *QueryNewRiskResponse) GetData() []*NewRisk {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryNewRiskResponse) GetNewRiskTotal() int64 {
	if x != nil {
		return x.NewRiskTotal
	}
	return 0
}

func (x *QueryNewRiskResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNewRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterId int64 `protobuf:"varint,1,opt,name=AfterId,proto3" json:"AfterId,omitempty"`
}

func (x *QueryNewRiskRequest) Reset() {
	*x = QueryNewRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNewRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewRiskRequest) ProtoMessage() {}

func (x *QueryNewRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryNewRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{273}
}

func (x *QueryNewRiskRequest) GetAfterId() int64 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

type RiskTableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestCreatedAtTimestamp int64   `protobuf:"varint,1,opt,name=LatestCreatedAtTimestamp,proto3" json:"LatestCreatedAtTimestamp,omitempty"`
	RiskTypeStats            *Fields `protobuf:"bytes,2,opt,name=RiskTypeStats,proto3" json:"RiskTypeStats,omitempty"`
	RiskLevelStats           *Fields `protobuf:"bytes,3,opt,name=RiskLevelStats,proto3" json:"RiskLevelStats,omitempty"`
}

func (x *RiskTableStats) Reset() {
	*x = RiskTableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskTableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTableStats) ProtoMessage() {}

func (x *RiskTableStats) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTableStats.ProtoReflect.Descriptor instead.
func (*RiskTableStats) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{274}
}

func (x *RiskTableStats) GetLatestCreatedAtTimestamp() int64 {
	if x != nil {
		return x.LatestCreatedAtTimestamp
	}
	return 0
}

func (x *RiskTableStats) GetRiskTypeStats() *Fields {
	if x != nil {
		return x.RiskTypeStats
	}
	return nil
}

func (x *RiskTableStats) GetRiskLevelStats() *Fields {
	if x != nil {
		return x.RiskLevelStats
	}
	return nil
}

type DeleteRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash             string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Filter           *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Ids              []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	DeleteAll        bool               `protobuf:"varint,5,opt,name=DeleteAll,proto3" json:"DeleteAll,omitempty"`
	DeleteRepetition bool               `protobuf:"varint,6,opt,name=DeleteRepetition,proto3" json:"DeleteRepetition,omitempty"`
}

func (x *DeleteRiskRequest) Reset() {
	*x = DeleteRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRiskRequest) ProtoMessage() {}

func (x *DeleteRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{275}
}

func (x *DeleteRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DeleteRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRiskRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteRiskRequest) GetDeleteRepetition() bool {
	if x != nil {
		return x.DeleteRepetition
	}
	return false
}

type Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	IP              string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Url             string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	Port            int32  `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	Host            string `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Title           string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TitleVerbose    string `protobuf:"bytes,7,opt,name=TitleVerbose,proto3" json:"TitleVerbose,omitempty"`
	RiskType        string `protobuf:"bytes,8,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	RiskTypeVerbose string `protobuf:"bytes,9,opt,name=RiskTypeVerbose,proto3" json:"RiskTypeVerbose,omitempty"`
	Parameter       string `protobuf:"bytes,10,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Payload         string `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Details         string `protobuf:"bytes,12,opt,name=Details,proto3" json:"Details,omitempty"`
	FromYakScript   string `protobuf:"bytes,13,opt,name=FromYakScript,proto3" json:"FromYakScript,omitempty"`
	WaitingVerified bool   `protobuf:"varint,14,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	ReverseToken    string `protobuf:"bytes,15,opt,name=ReverseToken,proto3" json:"ReverseToken,omitempty"`
	CreatedAt       int64  `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64  `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Id              int64  `protobuf:"varint,18,opt,name=Id,proto3" json:"Id,omitempty"`
	Severity        string `protobuf:"bytes,19,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Request         []byte `protobuf:"bytes,20,opt,name=Request,proto3" json:"Request,omitempty"`
	Response        []byte `protobuf:"bytes,21,opt,name=Response,proto3" json:"Response,omitempty"`
	RuntimeId       string `protobuf:"bytes,22,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	CVE             string `protobuf:"bytes,23,opt,name=CVE,proto3" json:"CVE,omitempty"`
	Description     string `protobuf:"bytes,24,opt,name=Description,proto3" json:"Description,omitempty"`
	Solution        string `protobuf:"bytes,25,opt,name=Solution,proto3" json:"Solution,omitempty"`
	TaskName        string `protobuf:"bytes,26,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *Risk) Reset() {
	*x = Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{276}
}

func (x *Risk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Risk) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Risk) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Risk) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Risk) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetTitleVerbose() string {
	if x != nil {
		return x.TitleVerbose
	}
	return ""
}

func (x *Risk) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *Risk) GetRiskTypeVerbose() string {
	if x != nil {
		return x.RiskTypeVerbose
	}
	return ""
}

func (x *Risk) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *Risk) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Risk) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Risk) GetFromYakScript() string {
	if x != nil {
		return x.FromYakScript
	}
	return ""
}

func (x *Risk) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *Risk) GetReverseToken() string {
	if x != nil {
		return x.ReverseToken
	}
	return ""
}

func (x *Risk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Risk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Risk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Risk) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Risk) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Risk) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Risk) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *Risk) GetCVE() string {
	if x != nil {
		return x.CVE
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Risk) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type QueryRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hash   string             `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Filter *QueryRisksRequest `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Ids    []int64            `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *QueryRiskRequest) Reset() {
	*x = QueryRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRiskRequest) ProtoMessage() {}

func (x *QueryRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRiskRequest.ProtoReflect.Descriptor instead.
func (*QueryRiskRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{277}
}

func (x *QueryRiskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryRiskRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *QueryRiskRequest) GetFilter() *QueryRisksRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryRiskRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QueryRisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64   `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*Risk `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryRisksResponse) Reset() {
	*x = QueryRisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksResponse) ProtoMessage() {}

func (x *QueryRisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksResponse.ProtoReflect.Descriptor instead.
func (*QueryRisksResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{278}
}

func (x *QueryRisksResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryRisksResponse) GetData() []*Risk {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryRisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Search          string  `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	Network         string  `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	Ports           string  `protobuf:"bytes,4,opt,name=Ports,proto3" json:"Ports,omitempty"`
	RiskType        string  `protobuf:"bytes,5,opt,name=RiskType,proto3" json:"RiskType,omitempty"`
	Token           string  `protobuf:"bytes,6,opt,name=Token,proto3" json:"Token,omitempty"`
	WaitingVerified bool    `protobuf:"varint,7,opt,name=WaitingVerified,proto3" json:"WaitingVerified,omitempty"`
	Severity        string  `protobuf:"bytes,8,opt,name=Severity,proto3" json:"Severity,omitempty"`
}

func (x *QueryRisksRequest) Reset() {
	*x = QueryRisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRisksRequest) ProtoMessage() {}

func (x *QueryRisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRisksRequest.ProtoReflect.Descriptor instead.
func (*QueryRisksRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{279}
}

func (x *QueryRisksRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryRisksRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryRisksRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *QueryRisksRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *QueryRisksRequest) GetRiskType() string {
	if x != nil {
		return x.RiskType
	}
	return ""
}

func (x *QueryRisksRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryRisksRequest) GetWaitingVerified() bool {
	if x != nil {
		return x.WaitingVerified
	}
	return false
}

func (x *QueryRisksRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type UploadScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project  string  `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Token    string  `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Keywords string  `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids      []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *UploadScreenRecorderRequest) Reset() {
	*x = UploadScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadScreenRecorderRequest) ProtoMessage() {}

func (x *UploadScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UploadScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{280}
}

func (x *UploadScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UploadScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetOneScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *GetOneScreenRecorderRequest) Reset() {
	*x = GetOneScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneScreenRecorderRequest) ProtoMessage() {}

func (x *GetOneScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*GetOneScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{281}
}

func (x *GetOneScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetOneScreenRecorderRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UpdateScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VideoName string `protobuf:"bytes,2,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	NoteInfo  string `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
}

func (x *UpdateScreenRecorderRequest) Reset() {
	*x = UpdateScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScreenRecorderRequest) ProtoMessage() {}

func (x *UpdateScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*UpdateScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{282}
}

func (x *UpdateScreenRecorderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScreenRecorderRequest) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *UpdateScreenRecorderRequest) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

type ScreenRecorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Filename  string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	NoteInfo  string `protobuf:"bytes,3,opt,name=NoteInfo,proto3" json:"NoteInfo,omitempty"`
	Project   string `protobuf:"bytes,4,opt,name=Project,proto3" json:"Project,omitempty"`
	CreatedAt int64  `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	VideoName string `protobuf:"bytes,7,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	Cover     string `protobuf:"bytes,8,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Duration  string `protobuf:"bytes,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Before    bool   `protobuf:"varint,10,opt,name=Before,proto3" json:"Before,omitempty"`
	After     bool   `protobuf:"varint,11,opt,name=After,proto3" json:"After,omitempty"`
}

func (x *ScreenRecorder) Reset() {
	*x = ScreenRecorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenRecorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenRecorder) ProtoMessage() {}

func (x *ScreenRecorder) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenRecorder.ProtoReflect.Descriptor instead.
func (*ScreenRecorder) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{283}
}

func (x *ScreenRecorder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenRecorder) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ScreenRecorder) GetNoteInfo() string {
	if x != nil {
		return x.NoteInfo
	}
	return ""
}

func (x *ScreenRecorder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ScreenRecorder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ScreenRecorder) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *ScreenRecorder) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ScreenRecorder) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *ScreenRecorder) GetBefore() bool {
	if x != nil {
		return x.Before
	}
	return false
}

func (x *ScreenRecorder) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type QueryScreenRecorderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ScreenRecorder `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging           `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryScreenRecorderResponse) Reset() {
	*x = QueryScreenRecorderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryScreenRecorderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderResponse) ProtoMessage() {}

func (x *QueryScreenRecorderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderResponse.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{284}
}

func (x *QueryScreenRecorderResponse) GetData() []*ScreenRecorder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type IsScrecorderReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *IsScrecorderReadyResponse) Reset() {
	*x = IsScrecorderReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsScrecorderReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyResponse) ProtoMessage() {}

func (x *IsScrecorderReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyResponse.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{285}
}

func (x *IsScrecorderReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsScrecorderReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type QueryScreenRecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project    string  `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	Pagination *Paging `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Keywords   string  `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Ids        []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *QueryScreenRecorderRequest) Reset() {
	*x = QueryScreenRecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryScreenRecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScreenRecorderRequest) ProtoMessage() {}

func (x *QueryScreenRecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScreenRecorderRequest.ProtoReflect.Descriptor instead.
func (*QueryScreenRecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{286}
}

func (x *QueryScreenRecorderRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryScreenRecorderRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryScreenRecorderRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type StartScrecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Framerate      int64   `protobuf:"varint,1,opt,name=Framerate,proto3" json:"Framerate,omitempty"`
	ResolutionSize string  `protobuf:"bytes,2,opt,name=ResolutionSize,proto3" json:"ResolutionSize,omitempty"`
	CoefficientPTS float64 `protobuf:"fixed64,3,opt,name=CoefficientPTS,proto3" json:"CoefficientPTS,omitempty"`
	DisableMouse   bool    `protobuf:"varint,4,opt,name=DisableMouse,proto3" json:"DisableMouse,omitempty"`
}

func (x *StartScrecorderRequest) Reset() {
	*x = StartScrecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScrecorderRequest) ProtoMessage() {}

func (x *StartScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScrecorderRequest.ProtoReflect.Descriptor instead.
func (*StartScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{287}
}

func (x *StartScrecorderRequest) GetFramerate() int64 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *StartScrecorderRequest) GetResolutionSize() string {
	if x != nil {
		return x.ResolutionSize
	}
	return ""
}

func (x *StartScrecorderRequest) GetCoefficientPTS() float64 {
	if x != nil {
		return x.CoefficientPTS
	}
	return 0
}

func (x *StartScrecorderRequest) GetDisableMouse() bool {
	if x != nil {
		return x.DisableMouse
	}
	return false
}

type InstallScrecorderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *InstallScrecorderRequest) Reset() {
	*x = InstallScrecorderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallScrecorderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallScrecorderRequest) ProtoMessage() {}

func (x *InstallScrecorderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallScrecorderRequest.ProtoReflect.Descriptor instead.
func (*InstallScrecorderRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{288}
}

func (x *InstallScrecorderRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type IsScrecorderReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsScrecorderReadyRequest) Reset() {
	*x = IsScrecorderReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsScrecorderReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsScrecorderReadyRequest) ProtoMessage() {}

func (x *IsScrecorderReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsScrecorderReadyRequest.ProtoReflect.Descriptor instead.
func (*IsScrecorderReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{289}
}

type GeneralStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ExpiredAt  int64  `protobuf:"varint,3,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	ProcessEnv bool   `protobuf:"varint,4,opt,name=ProcessEnv,proto3" json:"ProcessEnv,omitempty"`
	Verbose    string `protobuf:"bytes,5,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Group      string `protobuf:"bytes,6,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *GeneralStorage) Reset() {
	*x = GeneralStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralStorage) ProtoMessage() {}

func (x *GeneralStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralStorage.ProtoReflect.Descriptor instead.
func (*GeneralStorage) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{290}
}

func (x *GeneralStorage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GeneralStorage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GeneralStorage) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GeneralStorage) GetProcessEnv() bool {
	if x != nil {
		return x.ProcessEnv
	}
	return false
}

func (x *GeneralStorage) GetVerbose() string {
	if x != nil {
		return x.Verbose
	}
	return ""
}

func (x *GeneralStorage) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetProcessEnvKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GeneralStorage `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *GetProcessEnvKeyResult) Reset() {
	*x = GetProcessEnvKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessEnvKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessEnvKeyResult) ProtoMessage() {}

func (x *GetProcessEnvKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessEnvKeyResult.ProtoReflect.Descriptor instead.
func (*GetProcessEnvKeyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{291}
}

func (x *GetProcessEnvKeyResult) GetResults() []*GeneralStorage {
	if x != nil {
		return x.Results
	}
	return nil
}

type SetSystemProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy string `protobuf:"bytes,1,opt,name=HttpProxy,proto3" json:"HttpProxy,omitempty"`
	Enable    bool   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
}

func (x *SetSystemProxyRequest) Reset() {
	*x = SetSystemProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemProxyRequest) ProtoMessage() {}

func (x *SetSystemProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemProxyRequest.ProtoReflect.Descriptor instead.
func (*SetSystemProxyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{292}
}

func (x *SetSystemProxyRequest) GetHttpProxy() string {
	if x != nil {
		return x.HttpProxy
	}
	return ""
}

func (x *SetSystemProxyRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type GetSystemProxyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentProxy string `protobuf:"bytes,1,opt,name=CurrentProxy,proto3" json:"CurrentProxy,omitempty"`
	Enable       bool   `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
}

func (x *GetSystemProxyResult) Reset() {
	*x = GetSystemProxyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemProxyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemProxyResult) ProtoMessage() {}

func (x *GetSystemProxyResult) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemProxyResult.ProtoReflect.Descriptor instead.
func (*GetSystemProxyResult) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{293}
}

func (x *GetSystemProxyResult) GetCurrentProxy() string {
	if x != nil {
		return x.CurrentProxy
	}
	return ""
}

func (x *GetSystemProxyResult) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type RandomPortTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAddr                            string   `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP                              string   `protobuf:"bytes,2,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort                            int32    `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	LocalPort                             int32    `protobuf:"varint,4,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	History                               []string `protobuf:"bytes,5,rep,name=History,proto3" json:"History,omitempty"`
	CurrentRemoteCachedConnectionCount    int32    `protobuf:"varint,6,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	LocalPortCachedHistoryConnectionCount int32    `protobuf:"varint,7,opt,name=LocalPortCachedHistoryConnectionCount,proto3" json:"LocalPortCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                      int64    `protobuf:"varint,8,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                             int64    `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RandomPortTriggerNotification) Reset() {
	*x = RandomPortTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPortTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortTriggerNotification) ProtoMessage() {}

func (x *RandomPortTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortTriggerNotification.ProtoReflect.Descriptor instead.
func (*RandomPortTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{294}
}

func (x *RandomPortTriggerNotification) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *RandomPortTriggerNotification) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *RandomPortTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetLocalPortCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.LocalPortCachedHistoryConnectionCount
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *RandomPortTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryRandomPortTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *QueryRandomPortTriggerRequest) Reset() {
	*x = QueryRandomPortTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRandomPortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRandomPortTriggerRequest) ProtoMessage() {}

func (x *QueryRandomPortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRandomPortTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryRandomPortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{295}
}

func (x *QueryRandomPortTriggerRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RandomPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port  int32  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *RandomPortInfo) Reset() {
	*x = RandomPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomPortInfo) ProtoMessage() {}

func (x *RandomPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomPortInfo.ProtoReflect.Descriptor instead.
func (*RandomPortInfo) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{296}
}

func (x *RandomPortInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RandomPortInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RandomPortInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ICMPTriggerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                               int32    `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	CurrentRemoteAddr                  string   `protobuf:"bytes,2,opt,name=CurrentRemoteAddr,proto3" json:"CurrentRemoteAddr,omitempty"`
	Histories                          []string `protobuf:"bytes,3,rep,name=Histories,proto3" json:"Histories,omitempty"`
	CurrentRemoteCachedConnectionCount int32    `protobuf:"varint,4,opt,name=CurrentRemoteCachedConnectionCount,proto3" json:"CurrentRemoteCachedConnectionCount,omitempty"`
	SizedCachedHistoryConnectionCount  int32    `protobuf:"varint,5,opt,name=SizedCachedHistoryConnectionCount,proto3" json:"SizedCachedHistoryConnectionCount,omitempty"`
	TriggerTimestamp                   int64    `protobuf:"varint,7,opt,name=TriggerTimestamp,proto3" json:"TriggerTimestamp,omitempty"`
	Timestamp                          int64    `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ICMPTriggerNotification) Reset() {
	*x = ICMPTriggerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPTriggerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPTriggerNotification) ProtoMessage() {}

func (x *ICMPTriggerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPTriggerNotification.ProtoReflect.Descriptor instead.
func (*ICMPTriggerNotification) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{297}
}

func (x *ICMPTriggerNotification) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ICMPTriggerNotification) GetCurrentRemoteAddr() string {
	if x != nil {
		return x.CurrentRemoteAddr
	}
	return ""
}

func (x *ICMPTriggerNotification) GetHistories() []string {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ICMPTriggerNotification) GetCurrentRemoteCachedConnectionCount() int32 {
	if x != nil {
		return x.CurrentRemoteCachedConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetSizedCachedHistoryConnectionCount() int32 {
	if x != nil {
		return x.SizedCachedHistoryConnectionCount
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTriggerTimestamp() int64 {
	if x != nil {
		return x.TriggerTimestamp
	}
	return 0
}

func (x *ICMPTriggerNotification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryICMPTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification []*ICMPTriggerNotification `protobuf:"bytes,1,rep,name=Notification,proto3" json:"Notification,omitempty"`
}

func (x *QueryICMPTriggerResponse) Reset() {
	*x = QueryICMPTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryICMPTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerResponse) ProtoMessage() {}

func (x *QueryICMPTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerResponse.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{298}
}

func (x *QueryICMPTriggerResponse) GetNotification() []*ICMPTriggerNotification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type QueryICMPTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32 `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
}

func (x *QueryICMPTriggerRequest) Reset() {
	*x = QueryICMPTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryICMPTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryICMPTriggerRequest) ProtoMessage() {}

func (x *QueryICMPTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryICMPTriggerRequest.ProtoReflect.Descriptor instead.
func (*QueryICMPTriggerRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{299}
}

func (x *QueryICMPTriggerRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RequireICMPRandomLengthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length       int32  `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	ExternalHost string `protobuf:"bytes,2,opt,name=ExternalHost,proto3" json:"ExternalHost,omitempty"`
}

func (x *RequireICMPRandomLengthResponse) Reset() {
	*x = RequireICMPRandomLengthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireICMPRandomLengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireICMPRandomLengthResponse) ProtoMessage() {}

func (x *RequireICMPRandomLengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireICMPRandomLengthResponse.ProtoReflect.Descriptor instead.
func (*RequireICMPRandomLengthResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{300}
}

func (x *RequireICMPRandomLengthResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RequireICMPRandomLengthResponse) GetExternalHost() string {
	if x != nil {
		return x.ExternalHost
	}
	return ""
}

type DNSLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSType    string `protobuf:"bytes,1,opt,name=DNSType,proto3" json:"DNSType,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Domain     string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteAddr string `protobuf:"bytes,4,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	RemoteIP   string `protobuf:"bytes,5,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort int32  `protobuf:"varint,6,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Raw        []byte `protobuf:"bytes,7,opt,name=Raw,proto3" json:"Raw,omitempty"`
	Timestamp  int64  `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *DNSLogEvent) Reset() {
	*x = DNSLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogEvent) ProtoMessage() {}

func (x *DNSLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogEvent.ProtoReflect.Descriptor instead.
func (*DNSLogEvent) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{301}
}

func (x *DNSLogEvent) GetDNSType() string {
	if x != nil {
		return x.DNSType
	}
	return ""
}

func (x *DNSLogEvent) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DNSLogEvent) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DNSLogEvent) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *DNSLogEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DNSLogEvent) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *DNSLogEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type QueryDNSLogByTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*DNSLogEvent `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *QueryDNSLogByTokenResponse) Reset() {
	*x = QueryDNSLogByTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSLogByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenResponse) ProtoMessage() {}

func (x *QueryDNSLogByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenResponse.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{302}
}

func (x *QueryDNSLogByTokenResponse) GetEvents() []*DNSLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type QueryDNSLogByTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	DNSLogAddr string `protobuf:"bytes,2,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
}

func (x *QueryDNSLogByTokenRequest) Reset() {
	*x = QueryDNSLogByTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSLogByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSLogByTokenRequest) ProtoMessage() {}

func (x *QueryDNSLogByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSLogByTokenRequest.ProtoReflect.Descriptor instead.
func (*QueryDNSLogByTokenRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{303}
}

func (x *QueryDNSLogByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryDNSLogByTokenRequest) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

type DNSLogRootDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *DNSLogRootDomain) Reset() {
	*x = DNSLogRootDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSLogRootDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSLogRootDomain) ProtoMessage() {}

func (x *DNSLogRootDomain) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSLogRootDomain.ProtoReflect.Descriptor instead.
func (*DNSLogRootDomain) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{304}
}

func (x *DNSLogRootDomain) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSLogRootDomain) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type YakDNSLogBridgeAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSLogAddr       string `protobuf:"bytes,1,opt,name=DNSLogAddr,proto3" json:"DNSLogAddr,omitempty"`
	DNSLogAddrSecret string `protobuf:"bytes,2,opt,name=DNSLogAddrSecret,proto3" json:"DNSLogAddrSecret,omitempty"`
}

func (x *YakDNSLogBridgeAddr) Reset() {
	*x = YakDNSLogBridgeAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakDNSLogBridgeAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakDNSLogBridgeAddr) ProtoMessage() {}

func (x *YakDNSLogBridgeAddr) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakDNSLogBridgeAddr.ProtoReflect.Descriptor instead.
func (*YakDNSLogBridgeAddr) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{305}
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddr() string {
	if x != nil {
		return x.DNSLogAddr
	}
	return ""
}

func (x *YakDNSLogBridgeAddr) GetDNSLogAddrSecret() string {
	if x != nil {
		return x.DNSLogAddrSecret
	}
	return ""
}

type GetTunnelServerExternalIPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
}

func (x *GetTunnelServerExternalIPParams) Reset() {
	*x = GetTunnelServerExternalIPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelServerExternalIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPParams) ProtoMessage() {}

func (x *GetTunnelServerExternalIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPParams.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{306}
}

func (x *GetTunnelServerExternalIPParams) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetTunnelServerExternalIPParams) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type GetTunnelServerExternalIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *GetTunnelServerExternalIPResponse) Reset() {
	*x = GetTunnelServerExternalIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelServerExternalIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelServerExternalIPResponse) ProtoMessage() {}

func (x *GetTunnelServerExternalIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelServerExternalIPResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelServerExternalIPResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{307}
}

func (x *GetTunnelServerExternalIPResponse) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type VerifyTunnelServerDomainParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectParams *GetTunnelServerExternalIPParams `protobuf:"bytes,1,opt,name=ConnectParams,proto3" json:"ConnectParams,omitempty"`
	Domain        string                           `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *VerifyTunnelServerDomainParams) Reset() {
	*x = VerifyTunnelServerDomainParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTunnelServerDomainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainParams) ProtoMessage() {}

func (x *VerifyTunnelServerDomainParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainParams.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{308}
}

func (x *VerifyTunnelServerDomainParams) GetConnectParams() *GetTunnelServerExternalIPParams {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

func (x *VerifyTunnelServerDomainParams) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type VerifyTunnelServerDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Ok     bool   `protobuf:"varint,2,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *VerifyTunnelServerDomainResponse) Reset() {
	*x = VerifyTunnelServerDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTunnelServerDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTunnelServerDomainResponse) ProtoMessage() {}

func (x *VerifyTunnelServerDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTunnelServerDomainResponse.ProtoReflect.Descriptor instead.
func (*VerifyTunnelServerDomainResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{309}
}

func (x *VerifyTunnelServerDomainResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VerifyTunnelServerDomainResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyTunnelServerDomainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateFromGithubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy     string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	GithubUrl string `protobuf:"bytes,2,opt,name=GithubUrl,proto3" json:"GithubUrl,omitempty"`
}

func (x *UpdateFromGithubRequest) Reset() {
	*x = UpdateFromGithubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromGithubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromGithubRequest) ProtoMessage() {}

func (x *UpdateFromGithubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromGithubRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromGithubRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{310}
}

func (x *UpdateFromGithubRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromGithubRequest) GetGithubUrl() string {
	if x != nil {
		return x.GithubUrl
	}
	return ""
}

type UpdateFromYakitResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy         string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	BaseSourceUrl string `protobuf:"bytes,2,opt,name=BaseSourceUrl,proto3" json:"BaseSourceUrl,omitempty"`
}

func (x *UpdateFromYakitResourceRequest) Reset() {
	*x = UpdateFromYakitResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromYakitResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromYakitResourceRequest) ProtoMessage() {}

func (x *UpdateFromYakitResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromYakitResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromYakitResourceRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{311}
}

func (x *UpdateFromYakitResourceRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *UpdateFromYakitResourceRequest) GetBaseSourceUrl() string {
	if x != nil {
		return x.BaseSourceUrl
	}
	return ""
}

type IsVulinboxReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsVulinboxReadyRequest) Reset() {
	*x = IsVulinboxReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVulinboxReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyRequest) ProtoMessage() {}

func (x *IsVulinboxReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyRequest.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{312}
}

type IsVulinboxReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *IsVulinboxReadyResponse) Reset() {
	*x = IsVulinboxReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVulinboxReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVulinboxReadyResponse) ProtoMessage() {}

func (x *IsVulinboxReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVulinboxReadyResponse.ProtoReflect.Descriptor instead.
func (*IsVulinboxReadyResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{313}
}

func (x *IsVulinboxReadyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IsVulinboxReadyResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InstallVulinboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *InstallVulinboxRequest) Reset() {
	*x = InstallVulinboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallVulinboxRequest) ProtoMessage() {}

func (x *InstallVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallVulinboxRequest.ProtoReflect.Descriptor instead.
func (*InstallVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{314}
}

func (x *InstallVulinboxRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type StartVulinboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	NoHttps  bool   `protobuf:"varint,3,opt,name=NoHttps,proto3" json:"NoHttps,omitempty"`
	SafeMode bool   `protobuf:"varint,4,opt,name=SafeMode,proto3" json:"SafeMode,omitempty"`
}

func (x *StartVulinboxRequest) Reset() {
	*x = StartVulinboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVulinboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVulinboxRequest) ProtoMessage() {}

func (x *StartVulinboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVulinboxRequest.ProtoReflect.Descriptor instead.
func (*StartVulinboxRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{315}
}

func (x *StartVulinboxRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StartVulinboxRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *StartVulinboxRequest) GetNoHttps() bool {
	if x != nil {
		return x.NoHttps
	}
	return false
}

func (x *StartVulinboxRequest) GetSafeMode() bool {
	if x != nil {
		return x.SafeMode
	}
	return false
}

type DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{316}
}

func (x *DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

type WebsocketFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt            int64  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	WebsocketRequestHash string `protobuf:"bytes,3,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	FrameIndex           int64  `protobuf:"varint,4,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	FromServer           bool   `protobuf:"varint,5,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	MessageType          string `protobuf:"bytes,6,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Data                 []byte `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	DataSizeVerbose      string `protobuf:"bytes,8,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataLength           int64  `protobuf:"varint,9,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	DataVerbose          string `protobuf:"bytes,10,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	IsJson               bool   `protobuf:"varint,11,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf           bool   `protobuf:"varint,12,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
}

func (x *WebsocketFlow) Reset() {
	*x = WebsocketFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlow) ProtoMessage() {}

func (x *WebsocketFlow) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlow.ProtoReflect.Descriptor instead.
func (*WebsocketFlow) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{317}
}

func (x *WebsocketFlow) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebsocketFlow) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WebsocketFlow) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *WebsocketFlow) GetFrameIndex() int64 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *WebsocketFlow) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *WebsocketFlow) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WebsocketFlow) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlow) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *WebsocketFlow) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *WebsocketFlow) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *WebsocketFlow) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

type WebsocketFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging          `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Data       []*WebsocketFlow `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
	Total      int64            `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *WebsocketFlows) Reset() {
	*x = WebsocketFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketFlows) ProtoMessage() {}

func (x *WebsocketFlows) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketFlows.ProtoReflect.Descriptor instead.
func (*WebsocketFlows) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{318}
}

func (x *WebsocketFlows) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *WebsocketFlows) GetData() []*WebsocketFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebsocketFlows) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryWebsocketFlowByHTTPFlowWebsocketHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsocketRequestHash string  `protobuf:"bytes,1,opt,name=WebsocketRequestHash,proto3" json:"WebsocketRequestHash,omitempty"`
	Pagination           *Paging `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Reset() {
	*x = QueryWebsocketFlowByHTTPFlowWebsocketHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoMessage() {}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.ProtoReflect.Descriptor instead.
func (*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{319}
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetWebsocketRequestHash() string {
	if x != nil {
		return x.WebsocketRequestHash
	}
	return ""
}

func (x *QueryWebsocketFlowByHTTPFlowWebsocketHashRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ClientWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDataFrame             bool     `protobuf:"varint,1,opt,name=IsDataFrame,proto3" json:"IsDataFrame,omitempty"`
	SwitchProtocolSucceeded bool     `protobuf:"varint,2,opt,name=SwitchProtocolSucceeded,proto3" json:"SwitchProtocolSucceeded,omitempty"`
	FromServer              bool     `protobuf:"varint,4,opt,name=FromServer,proto3" json:"FromServer,omitempty"`
	GuessEncode             []string `protobuf:"bytes,5,rep,name=GuessEncode,proto3" json:"GuessEncode,omitempty"`
	StatusVerbose           string   `protobuf:"bytes,6,opt,name=StatusVerbose,proto3" json:"StatusVerbose,omitempty"`
	ReasonVerbose           string   `protobuf:"bytes,7,opt,name=ReasonVerbose,proto3" json:"ReasonVerbose,omitempty"`
	DataLength              int64    `protobuf:"varint,8,opt,name=DataLength,proto3" json:"DataLength,omitempty"`
	Data                    []byte   `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	IsJson                  bool     `protobuf:"varint,10,opt,name=IsJson,proto3" json:"IsJson,omitempty"`
	IsProtobuf              bool     `protobuf:"varint,11,opt,name=IsProtobuf,proto3" json:"IsProtobuf,omitempty"`
	DataFrameIndex          int64    `protobuf:"varint,12,opt,name=DataFrameIndex,proto3" json:"DataFrameIndex,omitempty"`
	WebsocketHash           string   `protobuf:"bytes,13,opt,name=WebsocketHash,proto3" json:"WebsocketHash,omitempty"`
	DataSizeVerbose         string   `protobuf:"bytes,14,opt,name=DataSizeVerbose,proto3" json:"DataSizeVerbose,omitempty"`
	DataVerbose             string   `protobuf:"bytes,15,opt,name=DataVerbose,proto3" json:"DataVerbose,omitempty"`
	IsUpgradeResponse       bool     `protobuf:"varint,16,opt,name=IsUpgradeResponse,proto3" json:"IsUpgradeResponse,omitempty"`
	UpgradeResponse         []byte   `protobuf:"bytes,17,opt,name=UpgradeResponse,proto3" json:"UpgradeResponse,omitempty"`
}

func (x *ClientWebsocketResponse) Reset() {
	*x = ClientWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketResponse) ProtoMessage() {}

func (x *ClientWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketResponse.ProtoReflect.Descriptor instead.
func (*ClientWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{320}
}

func (x *ClientWebsocketResponse) GetIsDataFrame() bool {
	if x != nil {
		return x.IsDataFrame
	}
	return false
}

func (x *ClientWebsocketResponse) GetSwitchProtocolSucceeded() bool {
	if x != nil {
		return x.SwitchProtocolSucceeded
	}
	return false
}

func (x *ClientWebsocketResponse) GetFromServer() bool {
	if x != nil {
		return x.FromServer
	}
	return false
}

func (x *ClientWebsocketResponse) GetGuessEncode() []string {
	if x != nil {
		return x.GuessEncode
	}
	return nil
}

func (x *ClientWebsocketResponse) GetStatusVerbose() string {
	if x != nil {
		return x.StatusVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetReasonVerbose() string {
	if x != nil {
		return x.ReasonVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *ClientWebsocketResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientWebsocketResponse) GetIsJson() bool {
	if x != nil {
		return x.IsJson
	}
	return false
}

func (x *ClientWebsocketResponse) GetIsProtobuf() bool {
	if x != nil {
		return x.IsProtobuf
	}
	return false
}

func (x *ClientWebsocketResponse) GetDataFrameIndex() int64 {
	if x != nil {
		return x.DataFrameIndex
	}
	return 0
}

func (x *ClientWebsocketResponse) GetWebsocketHash() string {
	if x != nil {
		return x.WebsocketHash
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataSizeVerbose() string {
	if x != nil {
		return x.DataSizeVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetDataVerbose() string {
	if x != nil {
		return x.DataVerbose
	}
	return ""
}

func (x *ClientWebsocketResponse) GetIsUpgradeResponse() bool {
	if x != nil {
		return x.IsUpgradeResponse
	}
	return false
}

func (x *ClientWebsocketResponse) GetUpgradeResponse() []byte {
	if x != nil {
		return x.UpgradeResponse
	}
	return nil
}

type ClientWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTLS               bool     `protobuf:"varint,1,opt,name=IsTLS,proto3" json:"IsTLS,omitempty"`
	UpgradeRequest      []byte   `protobuf:"bytes,2,opt,name=UpgradeRequest,proto3" json:"UpgradeRequest,omitempty"`
	ToServer            []byte   `protobuf:"bytes,3,opt,name=ToServer,proto3" json:"ToServer,omitempty"`
	Encode              []string `protobuf:"bytes,4,rep,name=Encode,proto3" json:"Encode,omitempty"`
	AllowToFuzz         bool     `protobuf:"varint,5,opt,name=AllowToFuzz,proto3" json:"AllowToFuzz,omitempty"`
	TotalTimeoutSeconds int64    `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	Proxy               string   `protobuf:"bytes,7,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ClientWebsocketRequest) Reset() {
	*x = ClientWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebsocketRequest) ProtoMessage() {}

func (x *ClientWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebsocketRequest.ProtoReflect.Descriptor instead.
func (*ClientWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{321}
}

func (x *ClientWebsocketRequest) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *ClientWebsocketRequest) GetUpgradeRequest() []byte {
	if x != nil {
		return x.UpgradeRequest
	}
	return nil
}

func (x *ClientWebsocketRequest) GetToServer() []byte {
	if x != nil {
		return x.ToServer
	}
	return nil
}

func (x *ClientWebsocketRequest) GetEncode() []string {
	if x != nil {
		return x.Encode
	}
	return nil
}

func (x *ClientWebsocketRequest) GetAllowToFuzz() bool {
	if x != nil {
		return x.AllowToFuzz
	}
	return false
}

func (x *ClientWebsocketRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ClientWebsocketRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw  []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{322}
}

func (x *Input) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Input) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Input) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw        []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Control    bool   `protobuf:"varint,2,opt,name=control,proto3" json:"control,omitempty"`
	Closed     bool   `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	Waiting    bool   `protobuf:"varint,4,opt,name=waiting,proto3" json:"waiting,omitempty"`
	RemoteAddr string `protobuf:"bytes,11,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	LocalAddr  string `protobuf:"bytes,12,opt,name=localAddr,proto3" json:"localAddr,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{323}
}

func (x *Output) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Output) GetControl() bool {
	if x != nil {
		return x.Control
	}
	return false
}

func (x *Output) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Output) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

func (x *Output) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *Output) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

type EchoResposne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EchoResposne) Reset() {
	*x = EchoResposne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResposne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResposne) ProtoMessage() {}

func (x *EchoResposne) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResposne.ProtoReflect.Descriptor instead.
func (*EchoResposne) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{324}
}

func (x *EchoResposne) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{325}
}

func (x *EchoRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{326}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type QueryYakScriptByNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptName []string `protobuf:"bytes,1,rep,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *QueryYakScriptByNamesRequest) Reset() {
	*x = QueryYakScriptByNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesRequest) ProtoMessage() {}

func (x *QueryYakScriptByNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{327}
}

func (x *QueryYakScriptByNamesRequest) GetYakScriptName() []string {
	if x != nil {
		return x.YakScriptName
	}
	return nil
}

type QueryYakScriptByNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptByNamesResponse) Reset() {
	*x = QueryYakScriptByNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByNamesResponse) ProtoMessage() {}

func (x *QueryYakScriptByNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByNamesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{328}
}

func (x *QueryYakScriptByNamesResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type YakScriptNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptNames []string `protobuf:"bytes,1,rep,name=YakScriptNames,proto3" json:"YakScriptNames,omitempty"`
}

func (x *YakScriptNames) Reset() {
	*x = YakScriptNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptNames) ProtoMessage() {}

func (x *YakScriptNames) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptNames.ProtoReflect.Descriptor instead.
func (*YakScriptNames) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{329}
}

func (x *YakScriptNames) GetYakScriptNames() []string {
	if x != nil {
		return x.YakScriptNames
	}
	return nil
}

type DeleteYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []int64 `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *DeleteYakScriptExecResultRequest) Reset() {
	*x = DeleteYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptExecResultRequest) ProtoMessage() {}

func (x *DeleteYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{330}
}

func (x *DeleteYakScriptExecResultRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptExecResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging       `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64         `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*ExecResult `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptExecResultResponse) Reset() {
	*x = QueryYakScriptExecResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultResponse) ProtoMessage() {}

func (x *QueryYakScriptExecResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{331}
}

func (x *QueryYakScriptExecResultResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptExecResultResponse) GetData() []*ExecResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptExecResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptName string  `protobuf:"bytes,2,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *QueryYakScriptExecResultRequest) Reset() {
	*x = QueryYakScriptExecResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptExecResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptExecResultRequest) ProtoMessage() {}

func (x *QueryYakScriptExecResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptExecResultRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptExecResultRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{332}
}

func (x *QueryYakScriptExecResultRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptExecResultRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

type QueryYakScriptByOnlineGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineGroup string `protobuf:"bytes,1,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
}

func (x *QueryYakScriptByOnlineGroupRequest) Reset() {
	*x = QueryYakScriptByOnlineGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptByOnlineGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptByOnlineGroupRequest) ProtoMessage() {}

func (x *QueryYakScriptByOnlineGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptByOnlineGroupRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptByOnlineGroupRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{333}
}

func (x *QueryYakScriptByOnlineGroupRequest) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

type QueryYakScriptLocalAndUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*YakScript `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptLocalAndUserResponse) Reset() {
	*x = QueryYakScriptLocalAndUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserResponse) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{334}
}

func (x *QueryYakScriptLocalAndUserResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryYakScriptLocalAndUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineBaseUrl string `protobuf:"bytes,1,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	UserId        int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *QueryYakScriptLocalAndUserRequest) Reset() {
	*x = QueryYakScriptLocalAndUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptLocalAndUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptLocalAndUserRequest) ProtoMessage() {}

func (x *QueryYakScriptLocalAndUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptLocalAndUserRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptLocalAndUserRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{335}
}

func (x *QueryYakScriptLocalAndUserRequest) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *QueryYakScriptLocalAndUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{336}
}

func (x *Tags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tags) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetYakScriptTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []*Tags `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *GetYakScriptTagsResponse) Reset() {
	*x = GetYakScriptTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptTagsResponse) ProtoMessage() {}

func (x *GetYakScriptTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptTagsResponse.ProtoReflect.Descriptor instead.
func (*GetYakScriptTagsResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{337}
}

func (x *GetYakScriptTagsResponse) GetTag() []*Tags {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ExportYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputDir string `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
}

func (x *ExportYakScriptResponse) Reset() {
	*x = ExportYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptResponse) ProtoMessage() {}

func (x *ExportYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptResponse.ProtoReflect.Descriptor instead.
func (*ExportYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{338}
}

func (x *ExportYakScriptResponse) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type ExecuteBatchPacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName     []string `protobuf:"bytes,1,rep,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps        bool     `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request        []byte   `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response       []byte   `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
	Concurrent     int32    `protobuf:"varint,5,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	PerTaskTimeout float64  `protobuf:"fixed64,6,opt,name=PerTaskTimeout,proto3" json:"PerTaskTimeout,omitempty"`
}

func (x *ExecuteBatchPacketYakScriptParams) Reset() {
	*x = ExecuteBatchPacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteBatchPacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchPacketYakScriptParams) ProtoMessage() {}

func (x *ExecuteBatchPacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchPacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecuteBatchPacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{339}
}

func (x *ExecuteBatchPacketYakScriptParams) GetScriptName() []string {
	if x != nil {
		return x.ScriptName
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecuteBatchPacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecuteBatchPacketYakScriptParams) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecuteBatchPacketYakScriptParams) GetPerTaskTimeout() float64 {
	if x != nil {
		return x.PerTaskTimeout
	}
	return 0
}

type ExecutePacketYakScriptParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	IsHttps    bool   `protobuf:"varint,2,opt,name=IsHttps,proto3" json:"IsHttps,omitempty"`
	Request    []byte `protobuf:"bytes,3,opt,name=Request,proto3" json:"Request,omitempty"`
	Response   []byte `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *ExecutePacketYakScriptParams) Reset() {
	*x = ExecutePacketYakScriptParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePacketYakScriptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePacketYakScriptParams) ProtoMessage() {}

func (x *ExecutePacketYakScriptParams) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePacketYakScriptParams.ProtoReflect.Descriptor instead.
func (*ExecutePacketYakScriptParams) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{340}
}

func (x *ExecutePacketYakScriptParams) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ExecutePacketYakScriptParams) GetIsHttps() bool {
	if x != nil {
		return x.IsHttps
	}
	return false
}

func (x *ExecutePacketYakScriptParams) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecutePacketYakScriptParams) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type ExportYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakScriptId     int64   `protobuf:"varint,1,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	OutputDir       string  `protobuf:"bytes,2,opt,name=OutputDir,proto3" json:"OutputDir,omitempty"`
	OutputPluginDir string  `protobuf:"bytes,3,opt,name=OutputPluginDir,proto3" json:"OutputPluginDir,omitempty"`
	YakScriptIds    []int64 `protobuf:"varint,4,rep,packed,name=YakScriptIds,proto3" json:"YakScriptIds,omitempty"`
	All             bool    `protobuf:"varint,5,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *ExportYakScriptRequest) Reset() {
	*x = ExportYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportYakScriptRequest) ProtoMessage() {}

func (x *ExportYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExportYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{341}
}

func (x *ExportYakScriptRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExportYakScriptRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetOutputPluginDir() string {
	if x != nil {
		return x.OutputPluginDir
	}
	return ""
}

func (x *ExportYakScriptRequest) GetYakScriptIds() []int64 {
	if x != nil {
		return x.YakScriptIds
	}
	return nil
}

func (x *ExportYakScriptRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GetYakScriptByOnlineIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineID int64  `protobuf:"varint,2,opt,name=OnlineID,proto3" json:"OnlineID,omitempty"`
}

func (x *GetYakScriptByOnlineIDRequest) Reset() {
	*x = GetYakScriptByOnlineIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByOnlineIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByOnlineIDRequest) ProtoMessage() {}

func (x *GetYakScriptByOnlineIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByOnlineIDRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByOnlineIDRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{342}
}

func (x *GetYakScriptByOnlineIDRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetYakScriptByOnlineIDRequest) GetOnlineID() int64 {
	if x != nil {
		return x.OnlineID
	}
	return 0
}

type GetYakScriptByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *GetYakScriptByNameRequest) Reset() {
	*x = GetYakScriptByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByNameRequest) ProtoMessage() {}

func (x *GetYakScriptByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByNameRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByNameRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{343}
}

func (x *GetYakScriptByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination               *Paging  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Type                     string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Keyword                  string   `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	IsHistory                bool     `protobuf:"varint,4,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore                 bool     `protobuf:"varint,5,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule          bool     `protobuf:"varint,6,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	IsBatch                  bool     `protobuf:"varint,7,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	ExcludeNucleiWorkflow    bool     `protobuf:"varint,8,opt,name=ExcludeNucleiWorkflow,proto3" json:"ExcludeNucleiWorkflow,omitempty"`
	ExcludeScriptNames       []string `protobuf:"bytes,9,rep,name=ExcludeScriptNames,proto3" json:"ExcludeScriptNames,omitempty"`
	IncludedScriptNames      []string `protobuf:"bytes,10,rep,name=IncludedScriptNames,proto3" json:"IncludedScriptNames,omitempty"`
	Tag                      []string `protobuf:"bytes,11,rep,name=Tag,proto3" json:"Tag,omitempty"`
	NoResultReturn           bool     `protobuf:"varint,12,opt,name=NoResultReturn,proto3" json:"NoResultReturn,omitempty"`
	UserId                   int64    `protobuf:"varint,13,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName                 string   `protobuf:"bytes,14,opt,name=UserName,proto3" json:"UserName,omitempty"`
	IgnoreGeneralModuleOrder bool     `protobuf:"varint,15,opt,name=IgnoreGeneralModuleOrder,proto3" json:"IgnoreGeneralModuleOrder,omitempty"`
	Family                   []string `protobuf:"bytes,16,rep,name=Family,proto3" json:"Family,omitempty"`
}

func (x *QueryYakScriptRequest) Reset() {
	*x = QueryYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptRequest) ProtoMessage() {}

func (x *QueryYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptRequest.ProtoReflect.Descriptor instead.
func (*QueryYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{344}
}

func (x *QueryYakScriptRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *QueryYakScriptRequest) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeNucleiWorkflow() bool {
	if x != nil {
		return x.ExcludeNucleiWorkflow
	}
	return false
}

func (x *QueryYakScriptRequest) GetExcludeScriptNames() []string {
	if x != nil {
		return x.ExcludeScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetIncludedScriptNames() []string {
	if x != nil {
		return x.IncludedScriptNames
	}
	return nil
}

func (x *QueryYakScriptRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *QueryYakScriptRequest) GetNoResultReturn() bool {
	if x != nil {
		return x.NoResultReturn
	}
	return false
}

func (x *QueryYakScriptRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryYakScriptRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryYakScriptRequest) GetIgnoreGeneralModuleOrder() bool {
	if x != nil {
		return x.IgnoreGeneralModuleOrder
	}
	return false
}

func (x *QueryYakScriptRequest) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

type QueryYakScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Paging      `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Data       []*YakScript `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryYakScriptResponse) Reset() {
	*x = QueryYakScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryYakScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryYakScriptResponse) ProtoMessage() {}

func (x *QueryYakScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryYakScriptResponse.ProtoReflect.Descriptor instead.
func (*QueryYakScriptResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{345}
}

func (x *QueryYakScriptResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryYakScriptResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryYakScriptResponse) GetData() []*YakScript {
	if x != nil {
		return x.Data
	}
	return nil
}

type YakScriptParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	TypeVerbose  string `protobuf:"bytes,3,opt,name=TypeVerbose,proto3" json:"TypeVerbose,omitempty"`
	FieldVerbose string `protobuf:"bytes,4,opt,name=FieldVerbose,proto3" json:"FieldVerbose,omitempty"`
	Help         string `protobuf:"bytes,5,opt,name=Help,proto3" json:"Help,omitempty"`
	Required     bool   `protobuf:"varint,6,opt,name=Required,proto3" json:"Required,omitempty"`
	Group        string `protobuf:"bytes,7,opt,name=Group,proto3" json:"Group,omitempty"`
	ExtraSetting string `protobuf:"bytes,8,opt,name=ExtraSetting,proto3" json:"ExtraSetting,omitempty"`
}

func (x *YakScriptParam) Reset() {
	*x = YakScriptParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScriptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScriptParam) ProtoMessage() {}

func (x *YakScriptParam) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScriptParam.ProtoReflect.Descriptor instead.
func (*YakScriptParam) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{346}
}

func (x *YakScriptParam) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YakScriptParam) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *YakScriptParam) GetTypeVerbose() string {
	if x != nil {
		return x.TypeVerbose
	}
	return ""
}

func (x *YakScriptParam) GetFieldVerbose() string {
	if x != nil {
		return x.FieldVerbose
	}
	return ""
}

func (x *YakScriptParam) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScriptParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *YakScriptParam) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *YakScriptParam) GetExtraSetting() string {
	if x != nil {
		return x.ExtraSetting
	}
	return ""
}

type YakScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Content              string            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Type                 string            `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Params               []*YakScriptParam `protobuf:"bytes,4,rep,name=Params,proto3" json:"Params,omitempty"`
	CreatedAt            int64             `protobuf:"varint,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ScriptName           string            `protobuf:"bytes,6,opt,name=ScriptName,proto3" json:"ScriptName,omitempty"`
	Help                 string            `protobuf:"bytes,7,opt,name=Help,proto3" json:"Help,omitempty"`
	Level                string            `protobuf:"bytes,8,opt,name=Level,proto3" json:"Level,omitempty"`
	Author               string            `protobuf:"bytes,9,opt,name=Author,proto3" json:"Author,omitempty"`
	Tags                 string            `protobuf:"bytes,10,opt,name=Tags,proto3" json:"Tags,omitempty"`
	IsHistory            bool              `protobuf:"varint,11,opt,name=IsHistory,proto3" json:"IsHistory,omitempty"`
	IsIgnore             bool              `protobuf:"varint,12,opt,name=IsIgnore,proto3" json:"IsIgnore,omitempty"`
	IsGeneralModule      bool              `protobuf:"varint,13,opt,name=IsGeneralModule,proto3" json:"IsGeneralModule,omitempty"`
	GeneralModuleVerbose string            `protobuf:"bytes,14,opt,name=GeneralModuleVerbose,proto3" json:"GeneralModuleVerbose,omitempty"`
	GeneralModuleKey     string            `protobuf:"bytes,15,opt,name=GeneralModuleKey,proto3" json:"GeneralModuleKey,omitempty"`
	FromGit              string            `protobuf:"bytes,16,opt,name=FromGit,proto3" json:"FromGit,omitempty"`
	EnablePluginSelector bool              `protobuf:"varint,17,opt,name=EnablePluginSelector,proto3" json:"EnablePluginSelector,omitempty"`
	PluginSelectorTypes  string            `protobuf:"bytes,18,opt,name=PluginSelectorTypes,proto3" json:"PluginSelectorTypes,omitempty"`
	OnlineId             int64             `protobuf:"varint,19,opt,name=OnlineId,proto3" json:"OnlineId,omitempty"`
	UserId               int64             `protobuf:"varint,20,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OnlineScriptName     string            `protobuf:"bytes,21,opt,name=OnlineScriptName,proto3" json:"OnlineScriptName,omitempty"`
	OnlineContributors   string            `protobuf:"bytes,22,opt,name=OnlineContributors,proto3" json:"OnlineContributors,omitempty"`
	UUID                 string            `protobuf:"bytes,23,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OnlineIsPrivate      bool              `protobuf:"varint,24,opt,name=OnlineIsPrivate,proto3" json:"OnlineIsPrivate,omitempty"`
	HeadImg              string            `protobuf:"bytes,25,opt,name=HeadImg,proto3" json:"HeadImg,omitempty"`
	OnlineBaseUrl        string            `protobuf:"bytes,26,opt,name=OnlineBaseUrl,proto3" json:"OnlineBaseUrl,omitempty"`
	BaseOnlineId         int64             `protobuf:"varint,27,opt,name=BaseOnlineId,proto3" json:"BaseOnlineId,omitempty"`
	OnlineOfficial       bool              `protobuf:"varint,28,opt,name=OnlineOfficial,proto3" json:"OnlineOfficial,omitempty"`
	OnlineGroup          string            `protobuf:"bytes,29,opt,name=OnlineGroup,proto3" json:"OnlineGroup,omitempty"`
}

func (x *YakScript) Reset() {
	*x = YakScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakScript) ProtoMessage() {}

func (x *YakScript) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakScript.ProtoReflect.Descriptor instead.
func (*YakScript) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{347}
}

func (x *YakScript) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YakScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *YakScript) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YakScript) GetParams() []*YakScriptParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *YakScript) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *YakScript) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *YakScript) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YakScript) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *YakScript) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *YakScript) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *YakScript) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

func (x *YakScript) GetIsIgnore() bool {
	if x != nil {
		return x.IsIgnore
	}
	return false
}

func (x *YakScript) GetIsGeneralModule() bool {
	if x != nil {
		return x.IsGeneralModule
	}
	return false
}

func (x *YakScript) GetGeneralModuleVerbose() string {
	if x != nil {
		return x.GeneralModuleVerbose
	}
	return ""
}

func (x *YakScript) GetGeneralModuleKey() string {
	if x != nil {
		return x.GeneralModuleKey
	}
	return ""
}

func (x *YakScript) GetFromGit() string {
	if x != nil {
		return x.FromGit
	}
	return ""
}

func (x *YakScript) GetEnablePluginSelector() bool {
	if x != nil {
		return x.EnablePluginSelector
	}
	return false
}

func (x *YakScript) GetPluginSelectorTypes() string {
	if x != nil {
		return x.PluginSelectorTypes
	}
	return ""
}

func (x *YakScript) GetOnlineId() int64 {
	if x != nil {
		return x.OnlineId
	}
	return 0
}

func (x *YakScript) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *YakScript) GetOnlineScriptName() string {
	if x != nil {
		return x.OnlineScriptName
	}
	return ""
}

func (x *YakScript) GetOnlineContributors() string {
	if x != nil {
		return x.OnlineContributors
	}
	return ""
}

func (x *YakScript) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *YakScript) GetOnlineIsPrivate() bool {
	if x != nil {
		return x.OnlineIsPrivate
	}
	return false
}

func (x *YakScript) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *YakScript) GetOnlineBaseUrl() string {
	if x != nil {
		return x.OnlineBaseUrl
	}
	return ""
}

func (x *YakScript) GetBaseOnlineId() int64 {
	if x != nil {
		return x.BaseOnlineId
	}
	return 0
}

func (x *YakScript) GetOnlineOfficial() bool {
	if x != nil {
		return x.OnlineOfficial
	}
	return false
}

func (x *YakScript) GetOnlineGroup() string {
	if x != nil {
		return x.OnlineGroup
	}
	return ""
}

type DeleteYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64   `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Ids []int64 `protobuf:"varint,4,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteYakScriptRequest) Reset() {
	*x = DeleteYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteYakScriptRequest) ProtoMessage() {}

func (x *DeleteYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteYakScriptRequest.ProtoReflect.Descriptor instead.
func (*DeleteYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{348}
}

func (x *DeleteYakScriptRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteYakScriptRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetYakScriptByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetYakScriptByIdRequest) Reset() {
	*x = GetYakScriptByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYakScriptByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYakScriptByIdRequest) ProtoMessage() {}

func (x *GetYakScriptByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYakScriptByIdRequest.ProtoReflect.Descriptor instead.
func (*GetYakScriptByIdRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{349}
}

func (x *GetYakScriptByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type YaklangShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input string `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *YaklangShellRequest) Reset() {
	*x = YaklangShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellRequest) ProtoMessage() {}

func (x *YaklangShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellRequest.ProtoReflect.Descriptor instead.
func (*YaklangShellRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{350}
}

func (x *YaklangShellRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type YaklangShellKVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value        []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueVerbose string `protobuf:"bytes,3,opt,name=ValueVerbose,proto3" json:"ValueVerbose,omitempty"`
	SymbolId     int64  `protobuf:"varint,4,opt,name=SymbolId,proto3" json:"SymbolId,omitempty"`
}

func (x *YaklangShellKVPair) Reset() {
	*x = YaklangShellKVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellKVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellKVPair) ProtoMessage() {}

func (x *YaklangShellKVPair) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellKVPair.ProtoReflect.Descriptor instead.
func (*YaklangShellKVPair) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{351}
}

func (x *YaklangShellKVPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YaklangShellKVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YaklangShellKVPair) GetValueVerbose() string {
	if x != nil {
		return x.ValueVerbose
	}
	return ""
}

func (x *YaklangShellKVPair) GetSymbolId() int64 {
	if x != nil {
		return x.SymbolId
	}
	return 0
}

type YaklangShellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawResult *ExecResult           `protobuf:"bytes,1,opt,name=RawResult,proto3" json:"RawResult,omitempty"`
	Scope     []*YaklangShellKVPair `protobuf:"bytes,2,rep,name=Scope,proto3" json:"Scope,omitempty"`
}

func (x *YaklangShellResponse) Reset() {
	*x = YaklangShellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YaklangShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YaklangShellResponse) ProtoMessage() {}

func (x *YaklangShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YaklangShellResponse.ProtoReflect.Descriptor instead.
func (*YaklangShellResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{352}
}

func (x *YaklangShellResponse) GetRawResult() *ExecResult {
	if x != nil {
		return x.RawResult
	}
	return nil
}

func (x *YaklangShellResponse) GetScope() []*YaklangShellKVPair {
	if x != nil {
		return x.Scope
	}
	return nil
}

type YsoClassGeneraterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *YsoClassGeneraterOptions) Reset() {
	*x = YsoClassGeneraterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassGeneraterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptions) ProtoMessage() {}

func (x *YsoClassGeneraterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptions.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptions) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{353}
}

func (x *YsoClassGeneraterOptions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type YsoOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gadget  string                      `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class   string                      `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options []*YsoClassGeneraterOptions `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsRequest) Reset() {
	*x = YsoOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequest) ProtoMessage() {}

func (x *YsoOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequest.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequest) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{354}
}

func (x *YsoOptionsRequest) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequest) GetOptions() []*YsoClassGeneraterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoClassOptionsResponseWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoClassOptionsResponseWithVerbose) Reset() {
	*x = YsoClassOptionsResponseWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassOptionsResponseWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassOptionsResponseWithVerbose) ProtoMessage() {}

func (x *YsoClassOptionsResponseWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassOptionsResponseWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassOptionsResponseWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{355}
}

func (x *YsoClassOptionsResponseWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YsoDumpResponse) Reset() {
	*x = YsoDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoDumpResponse) ProtoMessage() {}

func (x *YsoDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoDumpResponse.ProtoReflect.Descriptor instead.
func (*YsoDumpResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{356}
}

func (x *YsoDumpResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type YsoBytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Bytes    []byte `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *YsoBytesResponse) Reset() {
	*x = YsoBytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoBytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesResponse) ProtoMessage() {}

func (x *YsoBytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesResponse.ProtoReflect.Descriptor instead.
func (*YsoBytesResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{357}
}

func (x *YsoBytesResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *YsoBytesResponse) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type YsoBytesObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *YsoBytesObject) Reset() {
	*x = YsoBytesObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoBytesObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoBytesObject) ProtoMessage() {}

func (x *YsoBytesObject) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoBytesObject.ProtoReflect.Descriptor instead.
func (*YsoBytesObject) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{358}
}

func (x *YsoBytesObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type YsoCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *YsoCodeResponse) Reset() {
	*x = YsoCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoCodeResponse) ProtoMessage() {}

func (x *YsoCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoCodeResponse.ProtoReflect.Descriptor instead.
func (*YsoCodeResponse) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{359}
}

func (x *YsoCodeResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type YsoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NameVerbose string `protobuf:"bytes,2,opt,name=NameVerbose,proto3" json:"NameVerbose,omitempty"`
	Help        string `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
}

func (x *YsoOption) Reset() {
	*x = YsoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOption) ProtoMessage() {}

func (x *YsoOption) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOption.ProtoReflect.Descriptor instead.
func (*YsoOption) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{360}
}

func (x *YsoOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YsoOption) GetNameVerbose() string {
	if x != nil {
		return x.NameVerbose
	}
	return ""
}

func (x *YsoOption) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

type YsoOptionsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*YsoOption `protobuf:"bytes,1,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsWithVerbose) Reset() {
	*x = YsoOptionsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsWithVerbose) ProtoMessage() {}

func (x *YsoOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{361}
}

func (x *YsoOptionsWithVerbose) GetOptions() []*YsoOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoOptionsRequerstWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gadget  string                                 `protobuf:"bytes,1,opt,name=Gadget,proto3" json:"Gadget,omitempty"`
	Class   string                                 `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Options []*YsoClassGeneraterOptionsWithVerbose `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *YsoOptionsRequerstWithVerbose) Reset() {
	*x = YsoOptionsRequerstWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoOptionsRequerstWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoOptionsRequerstWithVerbose) ProtoMessage() {}

func (x *YsoOptionsRequerstWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoOptionsRequerstWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoOptionsRequerstWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{362}
}

func (x *YsoOptionsRequerstWithVerbose) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *YsoOptionsRequerstWithVerbose) GetOptions() []*YsoClassGeneraterOptionsWithVerbose {
	if x != nil {
		return x.Options
	}
	return nil
}

type YsoClassGeneraterOptionsWithVerbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                                         `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyVerbose  string                                         `protobuf:"bytes,2,opt,name=KeyVerbose,proto3" json:"KeyVerbose,omitempty"`
	Help        string                                         `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
	Value       string                                         `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Type        string                                         `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	BindOptions map[string]*YsoClassOptionsResponseWithVerbose `protobuf:"bytes,6,rep,name=BindOptions,proto3" json:"BindOptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YsoClassGeneraterOptionsWithVerbose) Reset() {
	*x = YsoClassGeneraterOptionsWithVerbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yakgrpc_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YsoClassGeneraterOptionsWithVerbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsoClassGeneraterOptionsWithVerbose) ProtoMessage() {}

func (x *YsoClassGeneraterOptionsWithVerbose) ProtoReflect() protoreflect.Message {
	mi := &file_yakgrpc_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsoClassGeneraterOptionsWithVerbose.ProtoReflect.Descriptor instead.
func (*YsoClassGeneraterOptionsWithVerbose) Descriptor() ([]byte, []int) {
	return file_yakgrpc_proto_rawDescGZIP(), []int{363}
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetKeyVerbose() string {
	if x != nil {
		return x.KeyVerbose
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YsoClassGeneraterOptionsWithVerbose) GetBindOptions() map[string]*YsoClassOptionsResponseWithVerbose {
	if x != nil {
		return x.BindOptions
	}
	return nil
}

var File_yakgrpc_proto protoreflect.FileDescriptor

var file_yakgrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x79, 0x61, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x79, 0x70, 0x62, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x7e, 0x0a,
	0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0x6d, 0x0a,
	0x1b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x0a, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xec, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x49, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x45,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x48, 0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x80,
	0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x84, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49,
	0x50, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x49, 0x73, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x82, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41,
	0x6c, 0x6c, 0x22, 0x6e, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x54, 0x54, 0x50, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc8,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a,
	0x1e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x80, 0x05, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x4f, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x44, 0x69, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x44, 0x69, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x44, 0x69, 0x63, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62,
	0x0a, 0x1c, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x22, 0xfc, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x49, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e,
	0x64, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x48, 0x0a, 0x1f, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79,
	0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x61, 0x77,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x72, 0x69, 0x63, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x72, 0x69,
	0x63, 0x61, 0x74, 0x61, 0x52, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x5a, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x5a, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x5a, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x56, 0x45, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x81, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x10, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x45, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x41, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x41, 0x75, 0x74, 0x6f,
	0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0d,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x75,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x4a, 0x75, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x7a, 0x7a, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12,
	0x3c, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x1f, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x53, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x1a, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x28, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x22, 0xd6, 0x07, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x1a,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xa3, 0x03, 0x0a, 0x09, 0x43, 0x57, 0x45, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x61, 0x6d, 0x65, 0x5a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d,
	0x65, 0x5a, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5a, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x56, 0x45, 0x22, 0xff, 0x07,
	0x0a, 0x09, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x43,
	0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56, 0x45, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5a, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x57, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x56, 0x53, 0x53, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x43, 0x56, 0x53, 0x53, 0x76, 0x32, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x51, 0x0a, 0x0b, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x12, 0x20,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x43, 0x56, 0x45,
	0x12, 0x20, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x57, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x43,
	0x57, 0x45, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x43, 0x56, 0x45, 0x22, 0x79, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x43, 0x57, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x56, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x56, 0x45, 0x22, 0x68, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x1b, 0x0a, 0x19, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe2, 0x03, 0x0a,
	0x18, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x52,
	0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0f, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x13, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x69, 0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x1d,
	0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x18, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x64, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x65, 0x63,
	0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xe9, 0x02, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x61, 0x77, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1,
	0x03, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f,
	0x6d, 0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xef, 0x05, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0xdb, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x03, 0x50,
	0x6f, 0x43, 0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xbc, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x43, 0x0a, 0x2f, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22,
	0x42, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x53, 0x56, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x1a, 0x4d, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x35, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73,
	0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0xa4, 0x03, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x4e, 0x53, 0x4c, 0x6f,
	0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0xa3, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x48, 0x0a, 0x13,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x46, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x4f, 0x0a, 0x1a, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49,
	0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x50, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x3e,
	0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x30, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd5,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x27, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x75, 0x7a,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a,
	0x15, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x12,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x8d, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x54, 0x0a, 0x20,
	0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x33, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x18, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9b, 0x01,
	0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x15,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x22, 0x49, 0x0a, 0x19, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x58, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x58, 0x50, 0x61, 0x74,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xcd, 0x02, 0x0a,
	0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53,
	0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a,
	0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c,
	0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53,
	0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd2, 0x07, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x4f, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x4e, 0x53, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x2d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x14,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1,
	0x0b, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x7a, 0x7a,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4e, 0x6f,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x4e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4e, 0x6f,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x53, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x57, 0x65, 0x62, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x45,
	0x74, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x45, 0x74, 0x63, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4e, 0x6f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x47, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x34, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xf9, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a,
	0x14, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6b, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x35,
	0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f,
	0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59,
	0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x23, 0x0a, 0x08, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01,
	0x22, 0x4b, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01,
	0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x77, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x50, 0x77, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x54, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52,
	0x61, 0x77, 0x22, 0x50, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x22, 0x31, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x6f, 0x0a, 0x1b, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x44, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xd1, 0x07, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x52,
	0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c,
	0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xa9, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x22, 0xcc, 0x0b, 0x0a, 0x08,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x79,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74,
	0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48,
	0x74, 0x6d, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x6f, 0x46, 0x69, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54,
	0x46, 0x38, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x54, 0x46, 0x38,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x15,
	0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x66,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x6f,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x09, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x67, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x5d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74,
	0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22,
	0xf7, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61,
	0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b,
	0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x52, 0x0a, 0x18, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d,
	0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30,
	0x0a, 0x06, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x37, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x62, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x65, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1d,
	0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22,
	0xc7, 0x01, 0x0a, 0x15, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x22, 0x46, 0x0a, 0x14, 0x4d, 0x49, 0x54,
	0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x05, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x3b, 0x0a,
	0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x22, 0x42, 0x0a, 0x08, 0x4d, 0x49,
	0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d,
	0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61,
	0x78, 0x41, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x65,
	0x53, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x04, 0x0a,
	0x13, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4e, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x52, 0x49, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x52, 0x49, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x22, 0x75, 0x0a, 0x11, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x22, 0x5a, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x91, 0x09, 0x0a,
	0x0c, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30,
	0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x68, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x6f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x71, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x72, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x72, 0x69, 0x18, 0x73, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73,
	0x22, 0x6e, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x44,
	0x22, 0x65, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x43, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0xbf, 0x0d, 0x0a, 0x0b, 0x4d, 0x49, 0x54, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x72, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f,
	0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x79, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x79, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x6f, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x49, 0x54, 0x4d, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x2c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x34, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54, 0x4c, 0x53, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x4d, 0x54,
	0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47, 0x4d, 0x54, 0x4c,
	0x53, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x47,
	0x4d, 0x54, 0x4c, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x20, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x66, 0x0a, 0x29, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4c, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x6f, 0x67, 0x22, 0x62, 0x0a,
	0x28, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x86, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x22, 0x5b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0xc2, 0x02, 0x0a, 0x22, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x69,
	0x6e, 0x64, 0x4d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x6a, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x22, 0x67, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x22, 0x78, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x72, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x39, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x74, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x74, 0x72, 0x22, 0x5e, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x3e, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x85, 0x07, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x79,
	0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x2f, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79,
	0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x24, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xca, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x4e, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x22, 0xe6, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x54, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x22, 0x69, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x22, 0x9b, 0x01,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x22, 0x38, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x7a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40,
	0x0a, 0x12, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x22, 0xc1, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0d, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x05, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56,
	0x45, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x80, 0x02,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x7b, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x67, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x0e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x43, 0x0a, 0x19, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x54, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x18,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x1a,
	0x0a, 0x18, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0xa3, 0x03, 0x0a, 0x1d, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x35, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x0e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xe1, 0x02, 0x0a,
	0x17, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x21, 0x53, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x21, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x5c, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x5d, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x43, 0x4d, 0x50,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x46, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x22,
	0x40, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x61, 0x0a, 0x13, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e,
	0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x62, 0x0a, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55,
	0x72, 0x6c, 0x22, 0x5c, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x59, 0x61, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x18, 0x0a, 0x16, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x17, 0x49, 0x73,
	0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2e, 0x0a,
	0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x74, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x4e, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x66, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x61, 0x66, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8b, 0x03, 0x0a,
	0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x7b, 0x0a, 0x0e, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x04,
	0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x54,
	0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x75, 0x7a, 0x7a,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x06,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x26, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2b, 0x0a,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x1c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x58, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x22,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x48, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x61,
	0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x37,
	0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c,
	0x6c, 0x22, 0x4f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xca, 0x04, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0x7f, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xca,
	0x07, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3a, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x7c, 0x0a, 0x12, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b,
	0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x14, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e,
	0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x11, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x22, 0x59, 0x73, 0x6f, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x25, 0x0a, 0x0f, 0x59, 0x73, 0x6f, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x10, 0x59, 0x73, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x24,
	0x0a, 0x0e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65,
	0x6c, 0x70, 0x22, 0x41, 0x0a, 0x15, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x23, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x67,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xd2, 0x93, 0x01, 0x0a, 0x03, 0x59, 0x61, 0x6b,
	0x12, 0x53, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x63, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x72, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x72, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x15, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x77, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x56, 0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x56,
	0x4d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x59,
	0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b,
	0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x14, 0x56, 0x69,
	0x65, 0x77, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x12, 0x49, 0x73, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56,
	0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x56,
	0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x45, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x51, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x56, 0x45, 0x12, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x56, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x12, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x56, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x56, 0x45, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x45, 0x78, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x15, 0x53, 0x6d, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14, 0x53,
	0x61, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63,
	0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36,
	0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x65, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x30, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x28,
	0x50, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x81, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x41, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x50, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x59, 0x73, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x6f, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x46, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x12, 0x1f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x73, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x23, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1c,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x11, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x1a, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x7a, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x75, 0x7a, 0x7a,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x46, 0x50, 0x6f, 0x63, 0x42, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x12, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48,
	0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x4e, 0x65, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x63, 0x61, 0x70,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x04, 0x4d, 0x49, 0x54, 0x4d, 0x12, 0x10, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x49, 0x54, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54,
	0x4d, 0x43, 0x65, 0x72, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54,
	0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x49, 0x54,
	0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72,
	0x73, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49, 0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x49,
	0x54, 0x4d, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x49, 0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x49,
	0x54, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x14, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42,
	0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x22, 0x50, 0x6f, 0x70, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x40, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x46, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x15, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b,
	0x12, 0x15, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x2f, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65,
	0x77, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x49, 0x73, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x43, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65,
	0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x76, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x26, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59,
	0x61, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x15, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x12, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0f, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x75,
	0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x75, 0x6c, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x12, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x75, 0x6c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x79, 0x0a,
	0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x29,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x55, 0x6e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x26, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x59, 0x61,
	0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x6c, 0x61,
	0x6e, 0x67, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59,
	0x73, 0x6f, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x59, 0x73,
	0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x27, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x14, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59,
	0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x72, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x59, 0x73, 0x6f, 0x44, 0x75, 0x6d, 0x70,
	0x12, 0x13, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x73, 0x6f, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a,
	0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yakgrpc_proto_rawDescOnce sync.Once
	file_yakgrpc_proto_rawDescData = file_yakgrpc_proto_rawDesc
)

func file_yakgrpc_proto_rawDescGZIP() []byte {
	file_yakgrpc_proto_rawDescOnce.Do(func() {
		file_yakgrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_yakgrpc_proto_rawDescData)
	})
	return file_yakgrpc_proto_rawDescData
}

var file_yakgrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yakgrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 366)
var file_yakgrpc_proto_goTypes = []interface{}{
	(GenerateYakCodeByPacketRequest_Template)(0),              // 0: ypb.GenerateYakCodeByPacketRequest.Template
	(*HTTPRequestParamItem)(nil),                              // 1: ypb.HTTPRequestParamItem
	(*HTTPRequestAnalysis)(nil),                               // 2: ypb.HTTPRequestAnalysis
	(*HTTPRequestAnalysisMaterial)(nil),                       // 3: ypb.HTTPRequestAnalysisMaterial
	(*GroupList)(nil),                                         // 4: ypb.GroupList
	(*PortsGroup)(nil),                                        // 5: ypb.PortsGroup
	(*QueryPortsGroupResponse)(nil),                           // 6: ypb.QueryPortsGroupResponse
	(*QueryPortsRequest)(nil),                                 // 7: ypb.QueryPortsRequest
	(*Port)(nil),                                              // 8: ypb.Port
	(*QueryPortsResponse)(nil),                                // 9: ypb.QueryPortsResponse
	(*DeletePortsRequest)(nil),                                // 10: ypb.DeletePortsRequest
	(*QueryHostsRequest)(nil),                                 // 11: ypb.QueryHostsRequest
	(*Host)(nil),                                              // 12: ypb.Host
	(*QueryHostsResponse)(nil),                                // 13: ypb.QueryHostsResponse
	(*DeleteHostsRequest)(nil),                                // 14: ypb.DeleteHostsRequest
	(*QueryDomainsRequest)(nil),                               // 15: ypb.QueryDomainsRequest
	(*Domain)(nil),                                            // 16: ypb.Domain
	(*QueryDomainsResponse)(nil),                              // 17: ypb.QueryDomainsResponse
	(*DeleteDomainsRequest)(nil),                              // 18: ypb.DeleteDomainsRequest
	(*AttachCombinedOutputRequest)(nil),                       // 19: ypb.AttachCombinedOutputRequest
	(*SaveTextToTemporalFileRequest)(nil),                     // 20: ypb.SaveTextToTemporalFileRequest
	(*SaveTextToTemporalFileResponse)(nil),                    // 21: ypb.SaveTextToTemporalFileResponse
	(*GetAvailableBruteTypesResponse)(nil),                    // 22: ypb.GetAvailableBruteTypesResponse
	(*StartBruteParams)(nil),                                  // 23: ypb.StartBruteParams
	(*IsRemoteAddrAvailableResponse)(nil),                     // 24: ypb.IsRemoteAddrAvailableResponse
	(*IsRemoteAddrAvailableRequest)(nil),                      // 25: ypb.IsRemoteAddrAvailableRequest
	(*ChaosMakerRuleGroup)(nil),                               // 26: ypb.ChaosMakerRuleGroup
	(*ExecuteChaosMakerRuleRequest)(nil),                      // 27: ypb.ExecuteChaosMakerRuleRequest
	(*DeleteChaosMakerRuleByIDRequest)(nil),                   // 28: ypb.DeleteChaosMakerRuleByIDRequest
	(*ChaosMakerRule)(nil),                                    // 29: ypb.ChaosMakerRule
	(*QueryChaosMakerRuleResponse)(nil),                       // 30: ypb.QueryChaosMakerRuleResponse
	(*QueryChaosMakerRuleRequest)(nil),                        // 31: ypb.QueryChaosMakerRuleRequest
	(*ImportChaosMakerRulesRequest)(nil),                      // 32: ypb.ImportChaosMakerRulesRequest
	(*AutoDecodeResult)(nil),                                  // 33: ypb.AutoDecodeResult
	(*AutoDecodeResponse)(nil),                                // 34: ypb.AutoDecodeResponse
	(*AutoDecodeRequest)(nil),                                 // 35: ypb.AutoDecodeRequest
	(*CodecRequest)(nil),                                      // 36: ypb.CodecRequest
	(*CodecResponse)(nil),                                     // 37: ypb.CodecResponse
	(*StaticAnalyzeErrorResult)(nil),                          // 38: ypb.StaticAnalyzeErrorResult
	(*SuggestionDescription)(nil),                             // 39: ypb.SuggestionDescription
	(*MethodSuggestion)(nil),                                  // 40: ypb.MethodSuggestion
	(*GetYakVMBuildInMethodCompletionResponse)(nil),           // 41: ypb.GetYakVMBuildInMethodCompletionResponse
	(*YaklangCompileAndFormatResponse)(nil),                   // 42: ypb.YaklangCompileAndFormatResponse
	(*YaklangCompileAndFormatRequest)(nil),                    // 43: ypb.YaklangCompileAndFormatRequest
	(*StaticAnalyzeErrorResponse)(nil),                        // 44: ypb.StaticAnalyzeErrorResponse
	(*StaticAnalyzeErrorRequest)(nil),                         // 45: ypb.StaticAnalyzeErrorRequest
	(*YakitCompletionRawResponse)(nil),                        // 46: ypb.YakitCompletionRawResponse
	(*GetYakVMBuildInMethodCompletionRequest)(nil),            // 47: ypb.GetYakVMBuildInMethodCompletionRequest
	(*HTTPCookie)(nil),                                        // 48: ypb.HTTPCookie
	(*StartBasicCrawlerRequest)(nil),                          // 49: ypb.StartBasicCrawlerRequest
	(*GenerateWebsiteTreeRequest)(nil),                        // 50: ypb.GenerateWebsiteTreeRequest
	(*GenerateWebsiteTreeResponse)(nil),                       // 51: ypb.GenerateWebsiteTreeResponse
	(*CWEDetail)(nil),                                         // 52: ypb.CWEDetail
	(*CVEDetail)(nil),                                         // 53: ypb.CVEDetail
	(*CVEDetailEx)(nil),                                       // 54: ypb.CVEDetailEx
	(*GetCVERequest)(nil),                                     // 55: ypb.GetCVERequest
	(*QueryCVEResponse)(nil),                                  // 56: ypb.QueryCVEResponse
	(*QueryCVERequest)(nil),                                   // 57: ypb.QueryCVERequest
	(*ImportsProfileDatabaseRequest)(nil),                     // 58: ypb.ImportsProfileDatabaseRequest
	(*ExportsProfileDatabaseRequest)(nil),                     // 59: ypb.ExportsProfileDatabaseRequest
	(*UpdateCVEDatabaseRequest)(nil),                          // 60: ypb.UpdateCVEDatabaseRequest
	(*IsCVEDatabaseReadyResponse)(nil),                        // 61: ypb.IsCVEDatabaseReadyResponse
	(*IsCVEDatabaseReadyRequest)(nil),                         // 62: ypb.IsCVEDatabaseReadyRequest
	(*HTTPRequestBuilderParams)(nil),                          // 63: ypb.HTTPRequestBuilderParams
	(*SmokingEvaluatePluginRequest)(nil),                      // 64: ypb.SmokingEvaluatePluginRequest
	(*SmokingEvaluateResult)(nil),                             // 65: ypb.SmokingEvaluateResult
	(*SmokingEvaluatePluginResponse)(nil),                     // 66: ypb.SmokingEvaluatePluginResponse
	(*DebugPluginRequest)(nil),                                // 67: ypb.DebugPluginRequest
	(*HTTPRequestBuilderResult)(nil),                          // 68: ypb.HTTPRequestBuilderResult
	(*HTTPRequestBuilderResponse)(nil),                        // 69: ypb.HTTPRequestBuilderResponse
	(*GetMarkdownDocumentResponse)(nil),                       // 70: ypb.GetMarkdownDocumentResponse
	(*GetMarkdownDocumentRequest)(nil),                        // 71: ypb.GetMarkdownDocumentRequest
	(*SaveMarkdownDocumentRequest)(nil),                       // 72: ypb.SaveMarkdownDocumentRequest
	(*ExecYakitPluginsByYakScriptFilterRequest)(nil),          // 73: ypb.ExecYakitPluginsByYakScriptFilterRequest
	(*ExecPacketScanRequest)(nil),                             // 74: ypb.ExecPacketScanRequest
	(*ExecRequest)(nil),                                       // 75: ypb.ExecRequest
	(*ExecHistoryRequest)(nil),                                // 76: ypb.ExecHistoryRequest
	(*ExecHistoryRecord)(nil),                                 // 77: ypb.ExecHistoryRecord
	(*ExecHistoryRecordResponse)(nil),                         // 78: ypb.ExecHistoryRecordResponse
	(*ExecBatchYakScriptRequest)(nil),                         // 79: ypb.ExecBatchYakScriptRequest
	(*ExecBatchYakScriptResult)(nil),                          // 80: ypb.ExecBatchYakScriptResult
	(*ExecBatchYakScriptUnfinishedTask)(nil),                  // 81: ypb.ExecBatchYakScriptUnfinishedTask
	(*GetExecBatchYakScriptUnfinishedTaskResponse)(nil),       // 82: ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	(*GetExecBatchYakScriptUnfinishedTaskByUidRequest)(nil),   // 83: ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	(*RecoverExecBatchYakScriptUnfinishedTaskRequest)(nil),    // 84: ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	(*ExtractableData)(nil),                                   // 85: ypb.ExtractableData
	(*ExtractDataToFileRequest)(nil),                          // 86: ypb.ExtractDataToFileRequest
	(*ExtractDataToFileResult)(nil),                           // 87: ypb.ExtractDataToFileResult
	(*RegisterFacadesHTTPResponse)(nil),                       // 88: ypb.RegisterFacadesHTTPResponse
	(*RegisterFacadesHTTPRequest)(nil),                        // 89: ypb.RegisterFacadesHTTPRequest
	(*StartFacadesParams)(nil),                                // 90: ypb.StartFacadesParams
	(*StartFacadesWithYsoParams)(nil),                         // 91: ypb.StartFacadesWithYsoParams
	(*ApplyClassToFacadesParamsWithVerbose)(nil),              // 92: ypb.ApplyClassToFacadesParamsWithVerbose
	(*BytesToBase64Request)(nil),                              // 93: ypb.BytesToBase64Request
	(*BytesToBase64Response)(nil),                             // 94: ypb.BytesToBase64Response
	(*ConfigGlobalReverseParams)(nil),                         // 95: ypb.ConfigGlobalReverseParams
	(*NetInterface)(nil),                                      // 96: ypb.NetInterface
	(*AvailableLocalAddrResponse)(nil),                        // 97: ypb.AvailableLocalAddrResponse
	(*GetGlobalReverseServerResponse)(nil),                    // 98: ypb.GetGlobalReverseServerResponse
	(*SaveFuzzerLabelRequest)(nil),                            // 99: ypb.SaveFuzzerLabelRequest
	(*QueryFuzzerLabelResponse)(nil),                          // 100: ypb.QueryFuzzerLabelResponse
	(*FuzzerLabel)(nil),                                       // 101: ypb.FuzzerLabel
	(*DeleteFuzzerLabelRequest)(nil),                          // 102: ypb.DeleteFuzzerLabelRequest
	(*StringFuzzerResponse)(nil),                              // 103: ypb.StringFuzzerResponse
	(*StringFuzzerRequest)(nil),                               // 104: ypb.StringFuzzerRequest
	(*ExtractedUrl)(nil),                                      // 105: ypb.ExtractedUrl
	(*QueryHTTPFuzzerResponseByTaskIdResponse)(nil),           // 106: ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	(*QueryHTTPFuzzerResponseByTaskIdRequest)(nil),            // 107: ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	(*ExtractDataResponse)(nil),                               // 108: ypb.ExtractDataResponse
	(*ExtractDataRequest)(nil),                                // 109: ypb.ExtractDataRequest
	(*GenerateExtractRuleResponse)(nil),                       // 110: ypb.GenerateExtractRuleResponse
	(*IsMultipartFormDataRequestResult)(nil),                  // 111: ypb.IsMultipartFormDataRequestResult
	(*GenerateExtractRuleRequest)(nil),                        // 112: ypb.GenerateExtractRuleRequest
	(*FixUploadPacketResponse)(nil),                           // 113: ypb.FixUploadPacketResponse
	(*FixUploadPacketRequest)(nil),                            // 114: ypb.FixUploadPacketRequest
	(*HTTPResponseMutateParams)(nil),                          // 115: ypb.HTTPResponseMutateParams
	(*MutateResult)(nil),                                      // 116: ypb.MutateResult
	(*HTTPRequestMutateParams)(nil),                           // 117: ypb.HTTPRequestMutateParams
	(*RedirectRequestParams)(nil),                             // 118: ypb.RedirectRequestParams
	(*ExtractHTTPResponseResult)(nil),                         // 119: ypb.ExtractHTTPResponseResult
	(*HTTPResponseExtractor)(nil),                             // 120: ypb.HTTPResponseExtractor
	(*ExtractHTTPResponseParams)(nil),                         // 121: ypb.ExtractHTTPResponseParams
	(*MatchHTTPResponseResult)(nil),                           // 122: ypb.MatchHTTPResponseResult
	(*HTTPResponseMatcher)(nil),                               // 123: ypb.HTTPResponseMatcher
	(*MatchHTTPResponseParams)(nil),                           // 124: ypb.MatchHTTPResponseParams
	(*RenderVariablesResponse)(nil),                           // 125: ypb.RenderVariablesResponse
	(*RenderVariablesRequest)(nil),                            // 126: ypb.RenderVariablesRequest
	(*FuzzerParamItem)(nil),                                   // 127: ypb.FuzzerParamItem
	(*PreloadHTTPFuzzerParamsResponse)(nil),                   // 128: ypb.PreloadHTTPFuzzerParamsResponse
	(*PreloadHTTPFuzzerParamsRequest)(nil),                    // 129: ypb.PreloadHTTPFuzzerParamsRequest
	(*FuzzerResponse)(nil),                                    // 130: ypb.FuzzerResponse
	(*FuzzerResponseFilter)(nil),                              // 131: ypb.FuzzerResponseFilter
	(*FuzzerRequest)(nil),                                     // 132: ypb.FuzzerRequest
	(*DeleteHistoryHTTPFuzzerTaskRequest)(nil),                // 133: ypb.DeleteHistoryHTTPFuzzerTaskRequest
	(*GetHistoryHTTPFuzzerTaskRequest)(nil),                   // 134: ypb.GetHistoryHTTPFuzzerTaskRequest
	(*HistoryHTTPFuzzerTaskDetail)(nil),                       // 135: ypb.HistoryHTTPFuzzerTaskDetail
	(*HistoryHTTPFuzzerTask)(nil),                             // 136: ypb.HistoryHTTPFuzzerTask
	(*HistoryHTTPFuzzerTasks)(nil),                            // 137: ypb.HistoryHTTPFuzzerTasks
	(*HistoryHTTPFuzzerTasksResponse)(nil),                    // 138: ypb.HistoryHTTPFuzzerTasksResponse
	(*QueryHistoryHTTPFuzzerTaskExParams)(nil),                // 139: ypb.QueryHistoryHTTPFuzzerTaskExParams
	(*GenerateCSRFPocByPacketResponse)(nil),                   // 140: ypb.GenerateCSRFPocByPacketResponse
	(*GenerateCSRFPocByPacketRequest)(nil),                    // 141: ypb.GenerateCSRFPocByPacketRequest
	(*GenerateYakCodeByPacketResponse)(nil),                   // 142: ypb.GenerateYakCodeByPacketResponse
	(*GenerateYakCodeByPacketRequest)(nil),                    // 143: ypb.GenerateYakCodeByPacketRequest
	(*HTTPFlowsExtractRequest)(nil),                           // 144: ypb.HTTPFlowsExtractRequest
	(*HTTPFlowsShareRequest)(nil),                             // 145: ypb.HTTPFlowsShareRequest
	(*HTTPFlowsShareResponse)(nil),                            // 146: ypb.HTTPFlowsShareResponse
	(*Bytes)(nil),                                             // 147: ypb.Bytes
	(*GetHTTPPacketBodyRequest)(nil),                          // 148: ypb.GetHTTPPacketBodyRequest
	(*DownloadBodyByHTTPFlowIDRequest)(nil),                   // 149: ypb.DownloadBodyByHTTPFlowIDRequest
	(*TagsCode)(nil),                                          // 150: ypb.TagsCode
	(*HTTPFlowsFieldGroupResponse)(nil),                       // 151: ypb.HTTPFlowsFieldGroupResponse
	(*HTTPFlowsFieldGroupRequest)(nil),                        // 152: ypb.HTTPFlowsFieldGroupRequest
	(*SetTagForHTTPFlowRequest)(nil),                          // 153: ypb.SetTagForHTTPFlowRequest
	(*CheckSetTagsHTTPFlow)(nil),                              // 154: ypb.CheckSetTagsHTTPFlow
	(*QueryHTTPFlowResponse)(nil),                             // 155: ypb.QueryHTTPFlowResponse
	(*QueryHTTPFlowRequest)(nil),                              // 156: ypb.QueryHTTPFlowRequest
	(*DeleteHTTPFlowRequest)(nil),                             // 157: ypb.DeleteHTTPFlowRequest
	(*QueryHTTPFlowsIdsRequest)(nil),                          // 158: ypb.QueryHTTPFlowsIdsRequest
	(*QueryHTTPFlowsIdsResponse)(nil),                         // 159: ypb.QueryHTTPFlowsIdsResponse
	(*GetHTTPFlowByIdsRequest)(nil),                           // 160: ypb.GetHTTPFlowByIdsRequest
	(*GetHTTPFlowByIdRequest)(nil),                            // 161: ypb.GetHTTPFlowByIdRequest
	(*GetHTTPFlowByHashRequest)(nil),                          // 162: ypb.GetHTTPFlowByHashRequest
	(*FuzzableParam)(nil),                                     // 163: ypb.FuzzableParam
	(*HTTPFlow)(nil),                                          // 164: ypb.HTTPFlow
	(*HTTPFlows)(nil),                                         // 165: ypb.HTTPFlows
	(*GetLicenseResponse)(nil),                                // 166: ypb.GetLicenseResponse
	(*CheckLicenseRequest)(nil),                               // 167: ypb.CheckLicenseRequest
	(*AddToNavigationRequest)(nil),                            // 168: ypb.AddToNavigationRequest
	(*NavigationList)(nil),                                    // 169: ypb.NavigationList
	(*NavigationItem)(nil),                                    // 170: ypb.NavigationItem
	(*GetAllNavigationRequest)(nil),                           // 171: ypb.GetAllNavigationRequest
	(*GetAllNavigationItemResponse)(nil),                      // 172: ypb.GetAllNavigationItemResponse
	(*AddOneNavigationRequest)(nil),                           // 173: ypb.AddOneNavigationRequest
	(*QueryNavigationGroupsRequest)(nil),                      // 174: ypb.QueryNavigationGroupsRequest
	(*GroupNames)(nil),                                        // 175: ypb.GroupNames
	(*QueryAllMenuItemRequest)(nil),                           // 176: ypb.QueryAllMenuItemRequest
	(*MenuItemGroup)(nil),                                     // 177: ypb.MenuItemGroup
	(*AddMenuRequest)(nil),                                    // 178: ypb.AddMenuRequest
	(*QueryGroupsByYakScriptIdRequest)(nil),                   // 179: ypb.QueryGroupsByYakScriptIdRequest
	(*BatchExecutionPluginFilter)(nil),                        // 180: ypb.BatchExecutionPluginFilter
	(*MenuItem)(nil),                                          // 181: ypb.MenuItem
	(*GetMenuItemByIdRequest)(nil),                            // 182: ypb.GetMenuItemByIdRequest
	(*ExportMenuItemResult)(nil),                              // 183: ypb.ExportMenuItemResult
	(*ImportMenuItemRequest)(nil),                             // 184: ypb.ImportMenuItemRequest
	(*MenuByGroup)(nil),                                       // 185: ypb.MenuByGroup
	(*YakScriptIsInMenuRequest)(nil),                          // 186: ypb.YakScriptIsInMenuRequest
	(*RemoveFromMenuRequest)(nil),                             // 187: ypb.RemoveFromMenuRequest
	(*AddToMenuRequest)(nil),                                  // 188: ypb.AddToMenuRequest
	(*Empty)(nil),                                             // 189: ypb.Empty
	(*KVPair)(nil),                                            // 190: ypb.KVPair
	(*ExecParamItem)(nil),                                     // 191: ypb.ExecParamItem
	(*ExecResult)(nil),                                        // 192: ypb.ExecResult
	(*Paging)(nil),                                            // 193: ypb.Paging
	(*HTTPHeader)(nil),                                        // 194: ypb.HTTPHeader
	(*FieldName)(nil),                                         // 195: ypb.FieldName
	(*Fields)(nil),                                            // 196: ypb.Fields
	(*SimpleScript)(nil),                                      // 197: ypb.SimpleScript
	(*GetMachineIDResponse)(nil),                              // 198: ypb.GetMachineIDResponse
	(*ResetAndInvalidUserDataRequest)(nil),                    // 199: ypb.ResetAndInvalidUserDataRequest
	(*IsPrivilegedForNetRawResponse)(nil),                     // 200: ypb.IsPrivilegedForNetRawResponse
	(*MITMRuleExtractedData)(nil),                             // 201: ypb.MITMRuleExtractedData
	(*QueryMITMRuleExtractedDataResponse)(nil),                // 202: ypb.QueryMITMRuleExtractedDataResponse
	(*QueryMITMRuleExtractedDataRequest)(nil),                 // 203: ypb.QueryMITMRuleExtractedDataRequest
	(*MITMContentReplacers)(nil),                              // 204: ypb.MITMContentReplacers
	(*ImportMITMReplacerRulesRequest)(nil),                    // 205: ypb.ImportMITMReplacerRulesRequest
	(*ExportMITMReplacerRulesResponse)(nil),                   // 206: ypb.ExportMITMReplacerRulesResponse
	(*MITMCert)(nil),                                          // 207: ypb.MITMCert
	(*SetMITMFilterResponse)(nil),                             // 208: ypb.SetMITMFilterResponse
	(*SetMITMFilterRequest)(nil),                              // 209: ypb.SetMITMFilterRequest
	(*HTTPCookieSetting)(nil),                                 // 210: ypb.HTTPCookieSetting
	(*MITMContentReplacer)(nil),                               // 211: ypb.MITMContentReplacer
	(*YakScriptHookItem)(nil),                                 // 212: ypb.YakScriptHookItem
	(*YakScriptHooks)(nil),                                    // 213: ypb.YakScriptHooks
	(*MITMResponse)(nil),                                      // 214: ypb.MITMResponse
	(*RemoveHookParams)(nil),                                  // 215: ypb.RemoveHookParams
	(*Certificate)(nil),                                       // 216: ypb.Certificate
	(*MITMRequest)(nil),                                       // 217: ypb.MITMRequest
	(*DownloadOnlinePluginByScriptName)(nil),                  // 218: ypb.DownloadOnlinePluginByScriptName
	(*DownloadOnlinePluginByScriptNamesResponse)(nil),         // 219: ypb.DownloadOnlinePluginByScriptNamesResponse
	(*DownloadOnlinePluginProgress)(nil),                      // 220: ypb.DownloadOnlinePluginProgress
	(*DownloadOnlinePluginByScriptNamesRequest)(nil),          // 221: ypb.DownloadOnlinePluginByScriptNamesRequest
	(*DeleteLocalPluginsByWhereRequest)(nil),                  // 222: ypb.DeleteLocalPluginsByWhereRequest
	(*TagsAndType)(nil),                                       // 223: ypb.TagsAndType
	(*GetYakScriptTagsAndTypeResponse)(nil),                   // 224: ypb.GetYakScriptTagsAndTypeResponse
	(*DeletePluginByUserIDRequest)(nil),                       // 225: ypb.DeletePluginByUserIDRequest
	(*DownloadOnlinePluginByTokenRequest)(nil),                // 226: ypb.DownloadOnlinePluginByTokenRequest
	(*DownloadOnlinePluginByIdsRequest)(nil),                  // 227: ypb.DownloadOnlinePluginByIdsRequest
	(*DownloadOnlinePluginByIdRequest)(nil),                   // 228: ypb.DownloadOnlinePluginByIdRequest
	(*OnlineProfile)(nil),                                     // 229: ypb.OnlineProfile
	(*GetAllPayloadGroupResponse)(nil),                        // 230: ypb.GetAllPayloadGroupResponse
	(*SavePayloadProgress)(nil),                               // 231: ypb.SavePayloadProgress
	(*DeletePayloadRequest)(nil),                              // 232: ypb.DeletePayloadRequest
	(*SavePayloadRequest)(nil),                                // 233: ypb.SavePayloadRequest
	(*UpdatePayloadRequest)(nil),                              // 234: ypb.UpdatePayloadRequest
	(*QueryPayloadRequest)(nil),                               // 235: ypb.QueryPayloadRequest
	(*QueryPayloadResponse)(nil),                              // 236: ypb.QueryPayloadResponse
	(*Payload)(nil),                                           // 237: ypb.Payload
	(*GetAllPayloadRequest)(nil),                              // 238: ypb.GetAllPayloadRequest
	(*GetAllPayloadResponse)(nil),                             // 239: ypb.GetAllPayloadResponse
	(*DeletePayloadByGroupRequest)(nil),                       // 240: ypb.DeletePayloadByGroupRequest
	(*LastRecord)(nil),                                        // 241: ypb.LastRecord
	(*SimpleDetectUnfinishedTask)(nil),                        // 242: ypb.SimpleDetectUnfinishedTask
	(*GetSimpleDetectUnfinishedTaskResponse)(nil),             // 243: ypb.GetSimpleDetectUnfinishedTaskResponse
	(*RecordPortScanRequest)(nil),                             // 244: ypb.RecordPortScanRequest
	(*PortScanRequest)(nil),                                   // 245: ypb.PortScanRequest
	(*SimpleDetectYakScriptUnfinishedTaskByUidRequest)(nil),   // 246: ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	(*SetKeyRequest)(nil),                                     // 247: ypb.SetKeyRequest
	(*GetKeyRequest)(nil),                                     // 248: ypb.GetKeyRequest
	(*GetKeyResult)(nil),                                      // 249: ypb.GetKeyResult
	(*ImportProjectRequest)(nil),                              // 250: ypb.ImportProjectRequest
	(*ExportProjectRequest)(nil),                              // 251: ypb.ExportProjectRequest
	(*ProjectIOProgress)(nil),                                 // 252: ypb.ProjectIOProgress
	(*QueryProjectDetailRequest)(nil),                         // 253: ypb.QueryProjectDetailRequest
	(*RemoveProjectRequest)(nil),                              // 254: ypb.RemoveProjectRequest
	(*IsProjectNameValidRequest)(nil),                         // 255: ypb.IsProjectNameValidRequest
	(*NewProjectResponse)(nil),                                // 256: ypb.NewProjectResponse
	(*NewProjectRequest)(nil),                                 // 257: ypb.NewProjectRequest
	(*ProjectDescription)(nil),                                // 258: ypb.ProjectDescription
	(*GetProjectsRequest)(nil),                                // 259: ypb.GetProjectsRequest
	(*DeleteProjectRequest)(nil),                              // 260: ypb.DeleteProjectRequest
	(*GetProjectsResponse)(nil),                               // 261: ypb.GetProjectsResponse
	(*SetCurrentProjectRequest)(nil),                          // 262: ypb.SetCurrentProjectRequest
	(*DefaultProxyResult)(nil),                                // 263: ypb.DefaultProxyResult
	(*DownloadReportRequest)(nil),                             // 264: ypb.DownloadReportRequest
	(*DeleteReportRequest)(nil),                               // 265: ypb.DeleteReportRequest
	(*Report)(nil),                                            // 266: ypb.Report
	(*QueryReportRequest)(nil),                                // 267: ypb.QueryReportRequest
	(*QueryReportsResponse)(nil),                              // 268: ypb.QueryReportsResponse
	(*QueryReportsRequest)(nil),                               // 269: ypb.QueryReportsRequest
	(*UploadRiskToOnlineRequest)(nil),                         // 270: ypb.UploadRiskToOnlineRequest
	(*NewRiskReadRequest)(nil),                                // 271: ypb.NewRiskReadRequest
	(*NewRisk)(nil),                                           // 272: ypb.NewRisk
	(*QueryNewRiskResponse)(nil),                              // 273: ypb.QueryNewRiskResponse
	(*QueryNewRiskRequest)(nil),                               // 274: ypb.QueryNewRiskRequest
	(*RiskTableStats)(nil),                                    // 275: ypb.RiskTableStats
	(*DeleteRiskRequest)(nil),                                 // 276: ypb.DeleteRiskRequest
	(*Risk)(nil),                                              // 277: ypb.Risk
	(*QueryRiskRequest)(nil),                                  // 278: ypb.QueryRiskRequest
	(*QueryRisksResponse)(nil),                                // 279: ypb.QueryRisksResponse
	(*QueryRisksRequest)(nil),                                 // 280: ypb.QueryRisksRequest
	(*UploadScreenRecorderRequest)(nil),                       // 281: ypb.UploadScreenRecorderRequest
	(*GetOneScreenRecorderRequest)(nil),                       // 282: ypb.GetOneScreenRecorderRequest
	(*UpdateScreenRecorderRequest)(nil),                       // 283: ypb.UpdateScreenRecorderRequest
	(*ScreenRecorder)(nil),                                    // 284: ypb.ScreenRecorder
	(*QueryScreenRecorderResponse)(nil),                       // 285: ypb.QueryScreenRecorderResponse
	(*IsScrecorderReadyResponse)(nil),                         // 286: ypb.IsScrecorderReadyResponse
	(*QueryScreenRecorderRequest)(nil),                        // 287: ypb.QueryScreenRecorderRequest
	(*StartScrecorderRequest)(nil),                            // 288: ypb.StartScrecorderRequest
	(*InstallScrecorderRequest)(nil),                          // 289: ypb.InstallScrecorderRequest
	(*IsScrecorderReadyRequest)(nil),                          // 290: ypb.IsScrecorderReadyRequest
	(*GeneralStorage)(nil),                                    // 291: ypb.GeneralStorage
	(*GetProcessEnvKeyResult)(nil),                            // 292: ypb.GetProcessEnvKeyResult
	(*SetSystemProxyRequest)(nil),                             // 293: ypb.SetSystemProxyRequest
	(*GetSystemProxyResult)(nil),                              // 294: ypb.GetSystemProxyResult
	(*RandomPortTriggerNotification)(nil),                     // 295: ypb.RandomPortTriggerNotification
	(*QueryRandomPortTriggerRequest)(nil),                     // 296: ypb.QueryRandomPortTriggerRequest
	(*RandomPortInfo)(nil),                                    // 297: ypb.RandomPortInfo
	(*ICMPTriggerNotification)(nil),                           // 298: ypb.ICMPTriggerNotification
	(*QueryICMPTriggerResponse)(nil),                          // 299: ypb.QueryICMPTriggerResponse
	(*QueryICMPTriggerRequest)(nil),                           // 300: ypb.QueryICMPTriggerRequest
	(*RequireICMPRandomLengthResponse)(nil),                   // 301: ypb.RequireICMPRandomLengthResponse
	(*DNSLogEvent)(nil),                                       // 302: ypb.DNSLogEvent
	(*QueryDNSLogByTokenResponse)(nil),                        // 303: ypb.QueryDNSLogByTokenResponse
	(*QueryDNSLogByTokenRequest)(nil),                         // 304: ypb.QueryDNSLogByTokenRequest
	(*DNSLogRootDomain)(nil),                                  // 305: ypb.DNSLogRootDomain
	(*YakDNSLogBridgeAddr)(nil),                               // 306: ypb.YakDNSLogBridgeAddr
	(*GetTunnelServerExternalIPParams)(nil),                   // 307: ypb.GetTunnelServerExternalIPParams
	(*GetTunnelServerExternalIPResponse)(nil),                 // 308: ypb.GetTunnelServerExternalIPResponse
	(*VerifyTunnelServerDomainParams)(nil),                    // 309: ypb.VerifyTunnelServerDomainParams
	(*VerifyTunnelServerDomainResponse)(nil),                  // 310: ypb.VerifyTunnelServerDomainResponse
	(*UpdateFromGithubRequest)(nil),                           // 311: ypb.UpdateFromGithubRequest
	(*UpdateFromYakitResourceRequest)(nil),                    // 312: ypb.UpdateFromYakitResourceRequest
	(*IsVulinboxReadyRequest)(nil),                            // 313: ypb.IsVulinboxReadyRequest
	(*IsVulinboxReadyResponse)(nil),                           // 314: ypb.IsVulinboxReadyResponse
	(*InstallVulinboxRequest)(nil),                            // 315: ypb.InstallVulinboxRequest
	(*StartVulinboxRequest)(nil),                              // 316: ypb.StartVulinboxRequest
	(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil), // 317: ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*WebsocketFlow)(nil),                                     // 318: ypb.WebsocketFlow
	(*WebsocketFlows)(nil),                                    // 319: ypb.WebsocketFlows
	(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest)(nil),  // 320: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	(*ClientWebsocketResponse)(nil),                           // 321: ypb.ClientWebsocketResponse
	(*ClientWebsocketRequest)(nil),                            // 322: ypb.ClientWebsocketRequest
	(*Input)(nil),                                             // 323: ypb.Input
	(*Output)(nil),                                            // 324: ypb.Output
	(*EchoResposne)(nil),                                      // 325: ypb.EchoResposne
	(*EchoRequest)(nil),                                       // 326: ypb.EchoRequest
	(*VersionResponse)(nil),                                   // 327: ypb.VersionResponse
	(*QueryYakScriptByNamesRequest)(nil),                      // 328: ypb.QueryYakScriptByNamesRequest
	(*QueryYakScriptByNamesResponse)(nil),                     // 329: ypb.QueryYakScriptByNamesResponse
	(*YakScriptNames)(nil),                                    // 330: ypb.YakScriptNames
	(*DeleteYakScriptExecResultRequest)(nil),                  // 331: ypb.DeleteYakScriptExecResultRequest
	(*QueryYakScriptExecResultResponse)(nil),                  // 332: ypb.QueryYakScriptExecResultResponse
	(*QueryYakScriptExecResultRequest)(nil),                   // 333: ypb.QueryYakScriptExecResultRequest
	(*QueryYakScriptByOnlineGroupRequest)(nil),                // 334: ypb.QueryYakScriptByOnlineGroupRequest
	(*QueryYakScriptLocalAndUserResponse)(nil),                // 335: ypb.QueryYakScriptLocalAndUserResponse
	(*QueryYakScriptLocalAndUserRequest)(nil),                 // 336: ypb.QueryYakScriptLocalAndUserRequest
	(*Tags)(nil),                                              // 337: ypb.Tags
	(*GetYakScriptTagsResponse)(nil),                          // 338: ypb.GetYakScriptTagsResponse
	(*ExportYakScriptResponse)(nil),                           // 339: ypb.ExportYakScriptResponse
	(*ExecuteBatchPacketYakScriptParams)(nil),                 // 340: ypb.ExecuteBatchPacketYakScriptParams
	(*ExecutePacketYakScriptParams)(nil),                      // 341: ypb.ExecutePacketYakScriptParams
	(*ExportYakScriptRequest)(nil),                            // 342: ypb.ExportYakScriptRequest
	(*GetYakScriptByOnlineIDRequest)(nil),                     // 343: ypb.GetYakScriptByOnlineIDRequest
	(*GetYakScriptByNameRequest)(nil),                         // 344: ypb.GetYakScriptByNameRequest
	(*QueryYakScriptRequest)(nil),                             // 345: ypb.QueryYakScriptRequest
	(*QueryYakScriptResponse)(nil),                            // 346: ypb.QueryYakScriptResponse
	(*YakScriptParam)(nil),                                    // 347: ypb.YakScriptParam
	(*YakScript)(nil),                                         // 348: ypb.YakScript
	(*DeleteYakScriptRequest)(nil),                            // 349: ypb.DeleteYakScriptRequest
	(*GetYakScriptByIdRequest)(nil),                           // 350: ypb.GetYakScriptByIdRequest
	(*YaklangShellRequest)(nil),                               // 351: ypb.YaklangShellRequest
	(*YaklangShellKVPair)(nil),                                // 352: ypb.YaklangShellKVPair
	(*YaklangShellResponse)(nil),                              // 353: ypb.YaklangShellResponse
	(*YsoClassGeneraterOptions)(nil),                          // 354: ypb.YsoClassGeneraterOptions
	(*YsoOptionsRequest)(nil),                                 // 355: ypb.YsoOptionsRequest
	(*YsoClassOptionsResponseWithVerbose)(nil),                // 356: ypb.YsoClassOptionsResponseWithVerbose
	(*YsoDumpResponse)(nil),                                   // 357: ypb.YsoDumpResponse
	(*YsoBytesResponse)(nil),                                  // 358: ypb.YsoBytesResponse
	(*YsoBytesObject)(nil),                                    // 359: ypb.YsoBytesObject
	(*YsoCodeResponse)(nil),                                   // 360: ypb.YsoCodeResponse
	(*YsoOption)(nil),                                         // 361: ypb.YsoOption
	(*YsoOptionsWithVerbose)(nil),                             // 362: ypb.YsoOptionsWithVerbose
	(*YsoOptionsRequerstWithVerbose)(nil),                     // 363: ypb.YsoOptionsRequerstWithVerbose
	(*YsoClassGeneraterOptionsWithVerbose)(nil),               // 364: ypb.YsoClassGeneraterOptionsWithVerbose
	nil, // 365: ypb.ExtractDataToFileRequest.DataEntry
	nil, // 366: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
}
var file_yakgrpc_proto_depIdxs = []int32{
	1,   // 0: ypb.HTTPRequestAnalysis.Params:type_name -> ypb.HTTPRequestParamItem
	4,   // 1: ypb.PortsGroup.GroupLists:type_name -> ypb.GroupList
	5,   // 2: ypb.QueryPortsGroupResponse.PortsGroupList:type_name -> ypb.PortsGroup
	193, // 3: ypb.QueryPortsRequest.Pagination:type_name -> ypb.Paging
	193, // 4: ypb.QueryPortsResponse.Pagination:type_name -> ypb.Paging
	8,   // 5: ypb.QueryPortsResponse.Data:type_name -> ypb.Port
	7,   // 6: ypb.DeletePortsRequest.Filter:type_name -> ypb.QueryPortsRequest
	193, // 7: ypb.QueryHostsRequest.Pagination:type_name -> ypb.Paging
	193, // 8: ypb.QueryHostsResponse.Pagination:type_name -> ypb.Paging
	12,  // 9: ypb.QueryHostsResponse.Data:type_name -> ypb.Host
	193, // 10: ypb.QueryDomainsRequest.Pagination:type_name -> ypb.Paging
	193, // 11: ypb.QueryDomainsResponse.Pagination:type_name -> ypb.Paging
	16,  // 12: ypb.QueryDomainsResponse.Data:type_name -> ypb.Domain
	15,  // 13: ypb.DeleteDomainsRequest.Filter:type_name -> ypb.QueryDomainsRequest
	26,  // 14: ypb.ExecuteChaosMakerRuleRequest.Groups:type_name -> ypb.ChaosMakerRuleGroup
	193, // 15: ypb.QueryChaosMakerRuleResponse.Pagination:type_name -> ypb.Paging
	29,  // 16: ypb.QueryChaosMakerRuleResponse.Data:type_name -> ypb.ChaosMakerRule
	193, // 17: ypb.QueryChaosMakerRuleRequest.Pagination:type_name -> ypb.Paging
	33,  // 18: ypb.AutoDecodeResponse.Results:type_name -> ypb.AutoDecodeResult
	191, // 19: ypb.CodecRequest.Params:type_name -> ypb.ExecParamItem
	39,  // 20: ypb.MethodSuggestion.Suggestions:type_name -> ypb.SuggestionDescription
	40,  // 21: ypb.GetYakVMBuildInMethodCompletionResponse.Suggestions:type_name -> ypb.MethodSuggestion
	38,  // 22: ypb.YaklangCompileAndFormatResponse.Errors:type_name -> ypb.StaticAnalyzeErrorResult
	38,  // 23: ypb.StaticAnalyzeErrorResponse.Result:type_name -> ypb.StaticAnalyzeErrorResult
	194, // 24: ypb.StartBasicCrawlerRequest.Headers:type_name -> ypb.HTTPHeader
	48,  // 25: ypb.StartBasicCrawlerRequest.Cookies:type_name -> ypb.HTTPCookie
	53,  // 26: ypb.CVEDetailEx.CVE:type_name -> ypb.CVEDetail
	52,  // 27: ypb.CVEDetailEx.CWE:type_name -> ypb.CWEDetail
	193, // 28: ypb.QueryCVEResponse.Pagination:type_name -> ypb.Paging
	53,  // 29: ypb.QueryCVEResponse.Data:type_name -> ypb.CVEDetail
	193, // 30: ypb.QueryCVERequest.Pagination:type_name -> ypb.Paging
	190, // 31: ypb.HTTPRequestBuilderParams.Headers:type_name -> ypb.KVPair
	190, // 32: ypb.HTTPRequestBuilderParams.Cookie:type_name -> ypb.KVPair
	190, // 33: ypb.HTTPRequestBuilderParams.GetParams:type_name -> ypb.KVPair
	190, // 34: ypb.HTTPRequestBuilderParams.PostParams:type_name -> ypb.KVPair
	190, // 35: ypb.HTTPRequestBuilderParams.MultipartParams:type_name -> ypb.KVPair
	190, // 36: ypb.HTTPRequestBuilderParams.MultipartFileParams:type_name -> ypb.KVPair
	63,  // 37: ypb.SmokingEvaluatePluginRequest.Requests:type_name -> ypb.HTTPRequestBuilderParams
	65,  // 38: ypb.SmokingEvaluatePluginResponse.Results:type_name -> ypb.SmokingEvaluateResult
	63,  // 39: ypb.DebugPluginRequest.HTTPRequestTemplate:type_name -> ypb.HTTPRequestBuilderParams
	68,  // 40: ypb.HTTPRequestBuilderResponse.Results:type_name -> ypb.HTTPRequestBuilderResult
	348, // 41: ypb.GetMarkdownDocumentResponse.Script:type_name -> ypb.YakScript
	345, // 42: ypb.ExecYakitPluginsByYakScriptFilterRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	191, // 43: ypb.ExecYakitPluginsByYakScriptFilterRequest.ExtraParams:type_name -> ypb.ExecParamItem
	191, // 44: ypb.ExecRequest.Params:type_name -> ypb.ExecParamItem
	193, // 45: ypb.ExecHistoryRequest.Pagination:type_name -> ypb.Paging
	77,  // 46: ypb.ExecHistoryRecordResponse.Data:type_name -> ypb.ExecHistoryRecord
	193, // 47: ypb.ExecHistoryRecordResponse.Pagination:type_name -> ypb.Paging
	191, // 48: ypb.ExecBatchYakScriptRequest.ExtraParams:type_name -> ypb.ExecParamItem
	345, // 49: ypb.ExecBatchYakScriptRequest.PluginFilter:type_name -> ypb.QueryYakScriptRequest
	348, // 50: ypb.ExecBatchYakScriptResult.PoC:type_name -> ypb.YakScript
	192, // 51: ypb.ExecBatchYakScriptResult.Result:type_name -> ypb.ExecResult
	191, // 52: ypb.ExecBatchYakScriptResult.ExtraParam:type_name -> ypb.ExecParamItem
	81,  // 53: ypb.GetExecBatchYakScriptUnfinishedTaskResponse.Tasks:type_name -> ypb.ExecBatchYakScriptUnfinishedTask
	365, // 54: ypb.ExtractDataToFileRequest.Data:type_name -> ypb.ExtractDataToFileRequest.DataEntry
	307, // 55: ypb.StartFacadesParams.ConnectParam:type_name -> ypb.GetTunnelServerExternalIPParams
	307, // 56: ypb.StartFacadesWithYsoParams.BridgeParam:type_name -> ypb.GetTunnelServerExternalIPParams
	355, // 57: ypb.StartFacadesWithYsoParams.GenerateClassParams:type_name -> ypb.YsoOptionsRequest
	363, // 58: ypb.ApplyClassToFacadesParamsWithVerbose.GenerateClassParams:type_name -> ypb.YsoOptionsRequerstWithVerbose
	307, // 59: ypb.ConfigGlobalReverseParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	96,  // 60: ypb.AvailableLocalAddrResponse.Interfaces:type_name -> ypb.NetInterface
	101, // 61: ypb.SaveFuzzerLabelRequest.Data:type_name -> ypb.FuzzerLabel
	101, // 62: ypb.QueryFuzzerLabelResponse.Data:type_name -> ypb.FuzzerLabel
	193, // 63: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Pagination:type_name -> ypb.Paging
	130, // 64: ypb.QueryHTTPFuzzerResponseByTaskIdResponse.Data:type_name -> ypb.FuzzerResponse
	193, // 65: ypb.QueryHTTPFuzzerResponseByTaskIdRequest.Pagination:type_name -> ypb.Paging
	120, // 66: ypb.RedirectRequestParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	123, // 67: ypb.RedirectRequestParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	127, // 68: ypb.RedirectRequestParams.Params:type_name -> ypb.FuzzerParamItem
	127, // 69: ypb.ExtractHTTPResponseResult.Values:type_name -> ypb.FuzzerParamItem
	120, // 70: ypb.ExtractHTTPResponseParams.Extractors:type_name -> ypb.HTTPResponseExtractor
	123, // 71: ypb.HTTPResponseMatcher.SubMatchers:type_name -> ypb.HTTPResponseMatcher
	123, // 72: ypb.MatchHTTPResponseParams.Matchers:type_name -> ypb.HTTPResponseMatcher
	190, // 73: ypb.RenderVariablesResponse.Results:type_name -> ypb.KVPair
	190, // 74: ypb.RenderVariablesRequest.Params:type_name -> ypb.KVPair
	127, // 75: ypb.PreloadHTTPFuzzerParamsResponse.Values:type_name -> ypb.FuzzerParamItem
	127, // 76: ypb.PreloadHTTPFuzzerParamsRequest.Params:type_name -> ypb.FuzzerParamItem
	194, // 77: ypb.FuzzerResponse.Headers:type_name -> ypb.HTTPHeader
	190, // 78: ypb.FuzzerResponse.ExtractedResults:type_name -> ypb.KVPair
	127, // 79: ypb.FuzzerRequest.Params:type_name -> ypb.FuzzerParamItem
	131, // 80: ypb.FuzzerRequest.Filter:type_name -> ypb.FuzzerResponseFilter
	190, // 81: ypb.FuzzerRequest.EtcHosts:type_name -> ypb.KVPair
	120, // 82: ypb.FuzzerRequest.Extractors:type_name -> ypb.HTTPResponseExtractor
	123, // 83: ypb.FuzzerRequest.Matchers:type_name -> ypb.HTTPResponseMatcher
	136, // 84: ypb.HistoryHTTPFuzzerTaskDetail.BasicInfo:type_name -> ypb.HistoryHTTPFuzzerTask
	132, // 85: ypb.HistoryHTTPFuzzerTaskDetail.OriginRequest:type_name -> ypb.FuzzerRequest
	136, // 86: ypb.HistoryHTTPFuzzerTasks.Tasks:type_name -> ypb.HistoryHTTPFuzzerTask
	135, // 87: ypb.HistoryHTTPFuzzerTasksResponse.Data:type_name -> ypb.HistoryHTTPFuzzerTaskDetail
	193, // 88: ypb.HistoryHTTPFuzzerTasksResponse.Pagination:type_name -> ypb.Paging
	193, // 89: ypb.QueryHistoryHTTPFuzzerTaskExParams.Pagination:type_name -> ypb.Paging
	0,   // 90: ypb.GenerateYakCodeByPacketRequest.CodeTemplate:type_name -> ypb.GenerateYakCodeByPacketRequest.Template
	150, // 91: ypb.HTTPFlowsFieldGroupResponse.Tags:type_name -> ypb.TagsCode
	150, // 92: ypb.HTTPFlowsFieldGroupResponse.StatusCode:type_name -> ypb.TagsCode
	154, // 93: ypb.SetTagForHTTPFlowRequest.CheckTags:type_name -> ypb.CheckSetTagsHTTPFlow
	193, // 94: ypb.QueryHTTPFlowResponse.Pagination:type_name -> ypb.Paging
	164, // 95: ypb.QueryHTTPFlowResponse.Data:type_name -> ypb.HTTPFlow
	193, // 96: ypb.QueryHTTPFlowRequest.Pagination:type_name -> ypb.Paging
	156, // 97: ypb.DeleteHTTPFlowRequest.Filter:type_name -> ypb.QueryHTTPFlowRequest
	164, // 98: ypb.QueryHTTPFlowsIdsResponse.Data:type_name -> ypb.HTTPFlow
	194, // 99: ypb.HTTPFlow.RequestHeader:type_name -> ypb.HTTPHeader
	194, // 100: ypb.HTTPFlow.ResponseHeader:type_name -> ypb.HTTPHeader
	163, // 101: ypb.HTTPFlow.GetParams:type_name -> ypb.FuzzableParam
	163, // 102: ypb.HTTPFlow.PostParams:type_name -> ypb.FuzzableParam
	163, // 103: ypb.HTTPFlow.CookieParams:type_name -> ypb.FuzzableParam
	164, // 104: ypb.HTTPFlows.Data:type_name -> ypb.HTTPFlow
	169, // 105: ypb.AddToNavigationRequest.Data:type_name -> ypb.NavigationList
	170, // 106: ypb.NavigationList.Items:type_name -> ypb.NavigationItem
	169, // 107: ypb.GetAllNavigationItemResponse.Data:type_name -> ypb.NavigationList
	181, // 108: ypb.MenuItemGroup.Items:type_name -> ypb.MenuItem
	177, // 109: ypb.AddMenuRequest.Data:type_name -> ypb.MenuItemGroup
	180, // 110: ypb.MenuItem.Query:type_name -> ypb.BatchExecutionPluginFilter
	177, // 111: ypb.MenuByGroup.Groups:type_name -> ypb.MenuItemGroup
	195, // 112: ypb.Fields.Values:type_name -> ypb.FieldName
	201, // 113: ypb.QueryMITMRuleExtractedDataResponse.Data:type_name -> ypb.MITMRuleExtractedData
	193, // 114: ypb.QueryMITMRuleExtractedDataResponse.Pagination:type_name -> ypb.Paging
	193, // 115: ypb.QueryMITMRuleExtractedDataRequest.Pagination:type_name -> ypb.Paging
	211, // 116: ypb.MITMContentReplacers.Rules:type_name -> ypb.MITMContentReplacer
	194, // 117: ypb.MITMContentReplacer.ExtraHeaders:type_name -> ypb.HTTPHeader
	210, // 118: ypb.MITMContentReplacer.ExtraCookies:type_name -> ypb.HTTPCookieSetting
	212, // 119: ypb.YakScriptHooks.Hooks:type_name -> ypb.YakScriptHookItem
	164, // 120: ypb.MITMResponse.historyHTTPFlow:type_name -> ypb.HTTPFlow
	192, // 121: ypb.MITMResponse.message:type_name -> ypb.ExecResult
	213, // 122: ypb.MITMResponse.hooks:type_name -> ypb.YakScriptHooks
	211, // 123: ypb.MITMResponse.replacers:type_name -> ypb.MITMContentReplacer
	191, // 124: ypb.MITMRequest.yakScriptParams:type_name -> ypb.ExecParamItem
	215, // 125: ypb.MITMRequest.removeHookParams:type_name -> ypb.RemoveHookParams
	211, // 126: ypb.MITMRequest.replacers:type_name -> ypb.MITMContentReplacer
	216, // 127: ypb.MITMRequest.certificates:type_name -> ypb.Certificate
	190, // 128: ypb.MITMRequest.hosts:type_name -> ypb.KVPair
	218, // 129: ypb.DownloadOnlinePluginByScriptNamesResponse.Data:type_name -> ypb.DownloadOnlinePluginByScriptName
	223, // 130: ypb.GetYakScriptTagsAndTypeResponse.Type:type_name -> ypb.TagsAndType
	223, // 131: ypb.GetYakScriptTagsAndTypeResponse.Tag:type_name -> ypb.TagsAndType
	193, // 132: ypb.QueryPayloadRequest.Pagination:type_name -> ypb.Paging
	193, // 133: ypb.QueryPayloadResponse.Pagination:type_name -> ypb.Paging
	237, // 134: ypb.QueryPayloadResponse.Data:type_name -> ypb.Payload
	237, // 135: ypb.GetAllPayloadResponse.Data:type_name -> ypb.Payload
	242, // 136: ypb.GetSimpleDetectUnfinishedTaskResponse.Tasks:type_name -> ypb.SimpleDetectUnfinishedTask
	241, // 137: ypb.RecordPortScanRequest.LastRecord:type_name -> ypb.LastRecord
	245, // 138: ypb.RecordPortScanRequest.PortScanRequest:type_name -> ypb.PortScanRequest
	193, // 139: ypb.GetProjectsRequest.Pagination:type_name -> ypb.Paging
	258, // 140: ypb.GetProjectsResponse.Projects:type_name -> ypb.ProjectDescription
	193, // 141: ypb.GetProjectsResponse.Pagination:type_name -> ypb.Paging
	269, // 142: ypb.DeleteReportRequest.Filter:type_name -> ypb.QueryReportsRequest
	266, // 143: ypb.QueryReportsResponse.Data:type_name -> ypb.Report
	193, // 144: ypb.QueryReportsResponse.Pagination:type_name -> ypb.Paging
	193, // 145: ypb.QueryReportsRequest.Pagination:type_name -> ypb.Paging
	272, // 146: ypb.QueryNewRiskResponse.Data:type_name -> ypb.NewRisk
	196, // 147: ypb.RiskTableStats.RiskTypeStats:type_name -> ypb.Fields
	196, // 148: ypb.RiskTableStats.RiskLevelStats:type_name -> ypb.Fields
	280, // 149: ypb.DeleteRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	280, // 150: ypb.QueryRiskRequest.Filter:type_name -> ypb.QueryRisksRequest
	193, // 151: ypb.QueryRisksResponse.Pagination:type_name -> ypb.Paging
	277, // 152: ypb.QueryRisksResponse.Data:type_name -> ypb.Risk
	193, // 153: ypb.QueryRisksRequest.Pagination:type_name -> ypb.Paging
	284, // 154: ypb.QueryScreenRecorderResponse.Data:type_name -> ypb.ScreenRecorder
	193, // 155: ypb.QueryScreenRecorderResponse.Pagination:type_name -> ypb.Paging
	193, // 156: ypb.QueryScreenRecorderRequest.Pagination:type_name -> ypb.Paging
	291, // 157: ypb.GetProcessEnvKeyResult.Results:type_name -> ypb.GeneralStorage
	298, // 158: ypb.QueryICMPTriggerResponse.Notification:type_name -> ypb.ICMPTriggerNotification
	302, // 159: ypb.QueryDNSLogByTokenResponse.Events:type_name -> ypb.DNSLogEvent
	307, // 160: ypb.VerifyTunnelServerDomainParams.ConnectParams:type_name -> ypb.GetTunnelServerExternalIPParams
	193, // 161: ypb.WebsocketFlows.Pagination:type_name -> ypb.Paging
	318, // 162: ypb.WebsocketFlows.Data:type_name -> ypb.WebsocketFlow
	193, // 163: ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest.Pagination:type_name -> ypb.Paging
	348, // 164: ypb.QueryYakScriptByNamesResponse.Data:type_name -> ypb.YakScript
	193, // 165: ypb.QueryYakScriptExecResultResponse.Pagination:type_name -> ypb.Paging
	192, // 166: ypb.QueryYakScriptExecResultResponse.Data:type_name -> ypb.ExecResult
	193, // 167: ypb.QueryYakScriptExecResultRequest.Pagination:type_name -> ypb.Paging
	348, // 168: ypb.QueryYakScriptLocalAndUserResponse.Data:type_name -> ypb.YakScript
	337, // 169: ypb.GetYakScriptTagsResponse.Tag:type_name -> ypb.Tags
	193, // 170: ypb.QueryYakScriptRequest.Pagination:type_name -> ypb.Paging
	193, // 171: ypb.QueryYakScriptResponse.Pagination:type_name -> ypb.Paging
	348, // 172: ypb.QueryYakScriptResponse.Data:type_name -> ypb.YakScript
	347, // 173: ypb.YakScript.Params:type_name -> ypb.YakScriptParam
	192, // 174: ypb.YaklangShellResponse.RawResult:type_name -> ypb.ExecResult
	352, // 175: ypb.YaklangShellResponse.Scope:type_name -> ypb.YaklangShellKVPair
	354, // 176: ypb.YsoOptionsRequest.Options:type_name -> ypb.YsoClassGeneraterOptions
	364, // 177: ypb.YsoClassOptionsResponseWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	361, // 178: ypb.YsoOptionsWithVerbose.Options:type_name -> ypb.YsoOption
	364, // 179: ypb.YsoOptionsRequerstWithVerbose.Options:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose
	366, // 180: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptions:type_name -> ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry
	85,  // 181: ypb.ExtractDataToFileRequest.DataEntry.value:type_name -> ypb.ExtractableData
	356, // 182: ypb.YsoClassGeneraterOptionsWithVerbose.BindOptionsEntry.value:type_name -> ypb.YsoClassOptionsResponseWithVerbose
	3,   // 183: ypb.Yak.HTTPRequestAnalyzer:input_type -> ypb.HTTPRequestAnalysisMaterial
	7,   // 184: ypb.Yak.QueryPorts:input_type -> ypb.QueryPortsRequest
	10,  // 185: ypb.Yak.DeletePorts:input_type -> ypb.DeletePortsRequest
	11,  // 186: ypb.Yak.QueryHosts:input_type -> ypb.QueryHostsRequest
	14,  // 187: ypb.Yak.DeleteHosts:input_type -> ypb.DeleteHostsRequest
	15,  // 188: ypb.Yak.QueryDomains:input_type -> ypb.QueryDomainsRequest
	18,  // 189: ypb.Yak.DeleteDomains:input_type -> ypb.DeleteDomainsRequest
	189, // 190: ypb.Yak.QueryPortsGroup:input_type -> ypb.Empty
	19,  // 191: ypb.Yak.AttachCombinedOutput:input_type -> ypb.AttachCombinedOutputRequest
	20,  // 192: ypb.Yak.SaveTextToTemporalFile:input_type -> ypb.SaveTextToTemporalFileRequest
	23,  // 193: ypb.Yak.StartBrute:input_type -> ypb.StartBruteParams
	189, // 194: ypb.Yak.GetAvailableBruteTypes:input_type -> ypb.Empty
	32,  // 195: ypb.Yak.ImportChaosMakerRules:input_type -> ypb.ImportChaosMakerRulesRequest
	31,  // 196: ypb.Yak.QueryChaosMakerRule:input_type -> ypb.QueryChaosMakerRuleRequest
	28,  // 197: ypb.Yak.DeleteChaosMakerRuleByID:input_type -> ypb.DeleteChaosMakerRuleByIDRequest
	27,  // 198: ypb.Yak.ExecuteChaosMakerRule:input_type -> ypb.ExecuteChaosMakerRuleRequest
	25,  // 199: ypb.Yak.IsRemoteAddrAvailable:input_type -> ypb.IsRemoteAddrAvailableRequest
	36,  // 200: ypb.Yak.Codec:input_type -> ypb.CodecRequest
	35,  // 201: ypb.Yak.AutoDecode:input_type -> ypb.AutoDecodeRequest
	189, // 202: ypb.Yak.GetYakitCompletionRaw:input_type -> ypb.Empty
	47,  // 203: ypb.Yak.GetYakVMBuildInMethodCompletion:input_type -> ypb.GetYakVMBuildInMethodCompletionRequest
	45,  // 204: ypb.Yak.StaticAnalyzeError:input_type -> ypb.StaticAnalyzeErrorRequest
	43,  // 205: ypb.Yak.YaklangCompileAndFormat:input_type -> ypb.YaklangCompileAndFormatRequest
	49,  // 206: ypb.Yak.StartBasicCrawler:input_type -> ypb.StartBasicCrawlerRequest
	189, // 207: ypb.Yak.ViewBasicCrawlerCode:input_type -> ypb.Empty
	50,  // 208: ypb.Yak.GenerateWebsiteTree:input_type -> ypb.GenerateWebsiteTreeRequest
	62,  // 209: ypb.Yak.IsCVEDatabaseReady:input_type -> ypb.IsCVEDatabaseReadyRequest
	60,  // 210: ypb.Yak.UpdateCVEDatabase:input_type -> ypb.UpdateCVEDatabaseRequest
	59,  // 211: ypb.Yak.ExportsProfileDatabase:input_type -> ypb.ExportsProfileDatabaseRequest
	58,  // 212: ypb.Yak.ImportsProfileDatabase:input_type -> ypb.ImportsProfileDatabaseRequest
	57,  // 213: ypb.Yak.QueryCVE:input_type -> ypb.QueryCVERequest
	55,  // 214: ypb.Yak.GetCVE:input_type -> ypb.GetCVERequest
	63,  // 215: ypb.Yak.HTTPRequestBuilder:input_type -> ypb.HTTPRequestBuilderParams
	67,  // 216: ypb.Yak.DebugPlugin:input_type -> ypb.DebugPluginRequest
	64,  // 217: ypb.Yak.SmokingEvaluatePlugin:input_type -> ypb.SmokingEvaluatePluginRequest
	72,  // 218: ypb.Yak.SaveMarkdownDocument:input_type -> ypb.SaveMarkdownDocumentRequest
	71,  // 219: ypb.Yak.GetMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	71,  // 220: ypb.Yak.DeleteMarkdownDocument:input_type -> ypb.GetMarkdownDocumentRequest
	75,  // 221: ypb.Yak.Exec:input_type -> ypb.ExecRequest
	76,  // 222: ypb.Yak.QueryExecHistory:input_type -> ypb.ExecHistoryRequest
	189, // 223: ypb.Yak.RemoveExecHistory:input_type -> ypb.Empty
	189, // 224: ypb.Yak.LoadNucleiTemplates:input_type -> ypb.Empty
	189, // 225: ypb.Yak.AutoUpdateYakModule:input_type -> ypb.Empty
	75,  // 226: ypb.Yak.ExecYakScript:input_type -> ypb.ExecRequest
	79,  // 227: ypb.Yak.ExecBatchYakScript:input_type -> ypb.ExecBatchYakScriptRequest
	189, // 228: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:input_type -> ypb.Empty
	83,  // 229: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	83,  // 230: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	84,  // 231: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	341, // 232: ypb.Yak.ExecutePacketYakScript:input_type -> ypb.ExecutePacketYakScriptParams
	340, // 233: ypb.Yak.ExecuteBatchPacketYakScript:input_type -> ypb.ExecuteBatchPacketYakScriptParams
	74,  // 234: ypb.Yak.ExecPacketScan:input_type -> ypb.ExecPacketScanRequest
	73,  // 235: ypb.Yak.ExecYakitPluginsByYakScriptFilter:input_type -> ypb.ExecYakitPluginsByYakScriptFilterRequest
	86,  // 236: ypb.Yak.ExtractDataToFile:input_type -> ypb.ExtractDataToFileRequest
	90,  // 237: ypb.Yak.StartFacades:input_type -> ypb.StartFacadesParams
	91,  // 238: ypb.Yak.StartFacadesWithYsoObject:input_type -> ypb.StartFacadesWithYsoParams
	92,  // 239: ypb.Yak.ApplyClassToFacades:input_type -> ypb.ApplyClassToFacadesParamsWithVerbose
	93,  // 240: ypb.Yak.BytesToBase64:input_type -> ypb.BytesToBase64Request
	95,  // 241: ypb.Yak.ConfigGlobalReverse:input_type -> ypb.ConfigGlobalReverseParams
	189, // 242: ypb.Yak.AvailableLocalAddr:input_type -> ypb.Empty
	189, // 243: ypb.Yak.GetGlobalReverseServer:input_type -> ypb.Empty
	89,  // 244: ypb.Yak.RegisterFacadesHTTP:input_type -> ypb.RegisterFacadesHTTPRequest
	134, // 245: ypb.Yak.GetHistoryHTTPFuzzerTask:input_type -> ypb.GetHistoryHTTPFuzzerTaskRequest
	189, // 246: ypb.Yak.QueryHistoryHTTPFuzzerTask:input_type -> ypb.Empty
	139, // 247: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:input_type -> ypb.QueryHistoryHTTPFuzzerTaskExParams
	133, // 248: ypb.Yak.DeleteHistoryHTTPFuzzerTask:input_type -> ypb.DeleteHistoryHTTPFuzzerTaskRequest
	132, // 249: ypb.Yak.HTTPFuzzer:input_type -> ypb.FuzzerRequest
	129, // 250: ypb.Yak.PreloadHTTPFuzzerParams:input_type -> ypb.PreloadHTTPFuzzerParamsRequest
	126, // 251: ypb.Yak.RenderVariables:input_type -> ypb.RenderVariablesRequest
	124, // 252: ypb.Yak.MatchHTTPResponse:input_type -> ypb.MatchHTTPResponseParams
	121, // 253: ypb.Yak.ExtractHTTPResponse:input_type -> ypb.ExtractHTTPResponseParams
	118, // 254: ypb.Yak.RedirectRequest:input_type -> ypb.RedirectRequestParams
	117, // 255: ypb.Yak.HTTPRequestMutate:input_type -> ypb.HTTPRequestMutateParams
	115, // 256: ypb.Yak.HTTPResponseMutate:input_type -> ypb.HTTPResponseMutateParams
	114, // 257: ypb.Yak.FixUploadPacket:input_type -> ypb.FixUploadPacketRequest
	114, // 258: ypb.Yak.IsMultipartFormDataRequest:input_type -> ypb.FixUploadPacketRequest
	112, // 259: ypb.Yak.GenerateExtractRule:input_type -> ypb.GenerateExtractRuleRequest
	109, // 260: ypb.Yak.ExtractData:input_type -> ypb.ExtractDataRequest
	107, // 261: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:input_type -> ypb.QueryHTTPFuzzerResponseByTaskIdRequest
	132, // 262: ypb.Yak.ExtractUrl:input_type -> ypb.FuzzerRequest
	130, // 263: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:input_type -> ypb.FuzzerResponse
	104, // 264: ypb.Yak.StringFuzzer:input_type -> ypb.StringFuzzerRequest
	99,  // 265: ypb.Yak.SaveFuzzerLabel:input_type -> ypb.SaveFuzzerLabelRequest
	189, // 266: ypb.Yak.QueryFuzzerLabel:input_type -> ypb.Empty
	102, // 267: ypb.Yak.DeleteFuzzerLabel:input_type -> ypb.DeleteFuzzerLabelRequest
	143, // 268: ypb.Yak.GenerateYakCodeByPacket:input_type -> ypb.GenerateYakCodeByPacketRequest
	141, // 269: ypb.Yak.GenerateCSRFPocByPacket:input_type -> ypb.GenerateCSRFPocByPacketRequest
	162, // 270: ypb.Yak.GetHTTPFlowByHash:input_type -> ypb.GetHTTPFlowByHashRequest
	161, // 271: ypb.Yak.GetHTTPFlowById:input_type -> ypb.GetHTTPFlowByIdRequest
	160, // 272: ypb.Yak.QueryHTTPFlowByIds:input_type -> ypb.GetHTTPFlowByIdsRequest
	160, // 273: ypb.Yak.GetHTTPFlowByIds:input_type -> ypb.GetHTTPFlowByIdsRequest
	156, // 274: ypb.Yak.QueryHTTPFlows:input_type -> ypb.QueryHTTPFlowRequest
	157, // 275: ypb.Yak.DeleteHTTPFlows:input_type -> ypb.DeleteHTTPFlowRequest
	153, // 276: ypb.Yak.SetTagForHTTPFlow:input_type -> ypb.SetTagForHTTPFlowRequest
	158, // 277: ypb.Yak.QueryHTTPFlowsIds:input_type -> ypb.QueryHTTPFlowsIdsRequest
	152, // 278: ypb.Yak.HTTPFlowsFieldGroup:input_type -> ypb.HTTPFlowsFieldGroupRequest
	145, // 279: ypb.Yak.HTTPFlowsShare:input_type -> ypb.HTTPFlowsShareRequest
	144, // 280: ypb.Yak.HTTPFlowsExtract:input_type -> ypb.HTTPFlowsExtractRequest
	149, // 281: ypb.Yak.GetRequestBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	149, // 282: ypb.Yak.GetResponseBodyByHTTPFlowID:input_type -> ypb.DownloadBodyByHTTPFlowIDRequest
	148, // 283: ypb.Yak.GetHTTPPacketBody:input_type -> ypb.GetHTTPPacketBodyRequest
	189, // 284: ypb.Yak.GetLicense:input_type -> ypb.Empty
	167, // 285: ypb.Yak.CheckLicense:input_type -> ypb.CheckLicenseRequest
	188, // 286: ypb.Yak.AddToMenu:input_type -> ypb.AddToMenuRequest
	187, // 287: ypb.Yak.RemoveFromMenu:input_type -> ypb.RemoveFromMenuRequest
	186, // 288: ypb.Yak.YakScriptIsInMenu:input_type -> ypb.YakScriptIsInMenuRequest
	189, // 289: ypb.Yak.GetAllMenuItem:input_type -> ypb.Empty
	189, // 290: ypb.Yak.DeleteAllMenuItem:input_type -> ypb.Empty
	184, // 291: ypb.Yak.ImportMenuItem:input_type -> ypb.ImportMenuItemRequest
	189, // 292: ypb.Yak.ExportMenuItem:input_type -> ypb.Empty
	182, // 293: ypb.Yak.GetMenuItemById:input_type -> ypb.GetMenuItemByIdRequest
	179, // 294: ypb.Yak.QueryGroupsByYakScriptId:input_type -> ypb.QueryGroupsByYakScriptIdRequest
	178, // 295: ypb.Yak.AddMenus:input_type -> ypb.AddMenuRequest
	176, // 296: ypb.Yak.QueryAllMenuItem:input_type -> ypb.QueryAllMenuItemRequest
	176, // 297: ypb.Yak.DeleteAllMenu:input_type -> ypb.QueryAllMenuItemRequest
	168, // 298: ypb.Yak.AddToNavigation:input_type -> ypb.AddToNavigationRequest
	171, // 299: ypb.Yak.GetAllNavigationItem:input_type -> ypb.GetAllNavigationRequest
	171, // 300: ypb.Yak.DeleteAllNavigation:input_type -> ypb.GetAllNavigationRequest
	173, // 301: ypb.Yak.AddOneNavigation:input_type -> ypb.AddOneNavigationRequest
	174, // 302: ypb.Yak.QueryNavigationGroups:input_type -> ypb.QueryNavigationGroupsRequest
	199, // 303: ypb.Yak.ResetAndInvalidUserData:input_type -> ypb.ResetAndInvalidUserDataRequest
	189, // 304: ypb.Yak.IsPrivilegedForNetRaw:input_type -> ypb.Empty
	189, // 305: ypb.Yak.PromotePermissionForUserPcap:input_type -> ypb.Empty
	189, // 306: ypb.Yak.GetMachineID:input_type -> ypb.Empty
	217, // 307: ypb.Yak.MITM:input_type -> ypb.MITMRequest
	189, // 308: ypb.Yak.DownloadMITMCert:input_type -> ypb.Empty
	189, // 309: ypb.Yak.GetCurrentRules:input_type -> ypb.Empty
	204, // 310: ypb.Yak.SetCurrentRules:input_type -> ypb.MITMContentReplacers
	189, // 311: ypb.Yak.ExportMITMReplacerRules:input_type -> ypb.Empty
	205, // 312: ypb.Yak.ImportMITMReplacerRules:input_type -> ypb.ImportMITMReplacerRulesRequest
	203, // 313: ypb.Yak.QueryMITMRuleExtractedData:input_type -> ypb.QueryMITMRuleExtractedDataRequest
	209, // 314: ypb.Yak.SetMITMFilter:input_type -> ypb.SetMITMFilterRequest
	189, // 315: ypb.Yak.GetMITMFilter:input_type -> ypb.Empty
	189, // 316: ypb.Yak.GetOnlineProfile:input_type -> ypb.Empty
	229, // 317: ypb.Yak.SetOnlineProfile:input_type -> ypb.OnlineProfile
	228, // 318: ypb.Yak.DownloadOnlinePluginById:input_type -> ypb.DownloadOnlinePluginByIdRequest
	227, // 319: ypb.Yak.DownloadOnlinePluginByIds:input_type -> ypb.DownloadOnlinePluginByIdsRequest
	226, // 320: ypb.Yak.DownloadOnlinePluginAll:input_type -> ypb.DownloadOnlinePluginByTokenRequest
	225, // 321: ypb.Yak.DeletePluginByUserID:input_type -> ypb.DeletePluginByUserIDRequest
	189, // 322: ypb.Yak.DeleteAllLocalPlugins:input_type -> ypb.Empty
	189, // 323: ypb.Yak.GetYakScriptTagsAndType:input_type -> ypb.Empty
	222, // 324: ypb.Yak.DeleteLocalPluginsByWhere:input_type -> ypb.DeleteLocalPluginsByWhereRequest
	221, // 325: ypb.Yak.DownloadOnlinePluginByScriptNames:input_type -> ypb.DownloadOnlinePluginByScriptNamesRequest
	235, // 326: ypb.Yak.QueryPayload:input_type -> ypb.QueryPayloadRequest
	240, // 327: ypb.Yak.DeletePayloadByGroup:input_type -> ypb.DeletePayloadByGroupRequest
	232, // 328: ypb.Yak.DeletePayload:input_type -> ypb.DeletePayloadRequest
	233, // 329: ypb.Yak.SavePayload:input_type -> ypb.SavePayloadRequest
	233, // 330: ypb.Yak.SavePayloadStream:input_type -> ypb.SavePayloadRequest
	189, // 331: ypb.Yak.GetAllPayloadGroup:input_type -> ypb.Empty
	234, // 332: ypb.Yak.UpdatePayload:input_type -> ypb.UpdatePayloadRequest
	238, // 333: ypb.Yak.GetAllPayload:input_type -> ypb.GetAllPayloadRequest
	245, // 334: ypb.Yak.PortScan:input_type -> ypb.PortScanRequest
	189, // 335: ypb.Yak.ViewPortScanCode:input_type -> ypb.Empty
	244, // 336: ypb.Yak.SimpleDetect:input_type -> ypb.RecordPortScanRequest
	244, // 337: ypb.Yak.SaveCancelSimpleDetect:input_type -> ypb.RecordPortScanRequest
	189, // 338: ypb.Yak.GetSimpleDetectUnfinishedTask:input_type -> ypb.Empty
	246, // 339: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	246, // 340: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	246, // 341: ypb.Yak.RecoverSimpleDetectUnfinishedTask:input_type -> ypb.SimpleDetectYakScriptUnfinishedTaskByUidRequest
	262, // 342: ypb.Yak.SetCurrentProject:input_type -> ypb.SetCurrentProjectRequest
	189, // 343: ypb.Yak.GetCurrentProject:input_type -> ypb.Empty
	259, // 344: ypb.Yak.GetProjects:input_type -> ypb.GetProjectsRequest
	257, // 345: ypb.Yak.NewProject:input_type -> ypb.NewProjectRequest
	255, // 346: ypb.Yak.IsProjectNameValid:input_type -> ypb.IsProjectNameValidRequest
	254, // 347: ypb.Yak.RemoveProject:input_type -> ypb.RemoveProjectRequest
	260, // 348: ypb.Yak.DeleteProject:input_type -> ypb.DeleteProjectRequest
	189, // 349: ypb.Yak.GetDefaultProject:input_type -> ypb.Empty
	253, // 350: ypb.Yak.QueryProjectDetail:input_type -> ypb.QueryProjectDetailRequest
	251, // 351: ypb.Yak.ExportProject:input_type -> ypb.ExportProjectRequest
	250, // 352: ypb.Yak.ImportProject:input_type -> ypb.ImportProjectRequest
	189, // 353: ypb.Yak.MigrateLegacyDatabase:input_type -> ypb.Empty
	248, // 354: ypb.Yak.GetProjectKey:input_type -> ypb.GetKeyRequest
	247, // 355: ypb.Yak.SetProjectKey:input_type -> ypb.SetKeyRequest
	189, // 356: ypb.Yak.GetEngineDefaultProxy:input_type -> ypb.Empty
	263, // 357: ypb.Yak.SetEngineDefaultProxy:input_type -> ypb.DefaultProxyResult
	269, // 358: ypb.Yak.QueryReports:input_type -> ypb.QueryReportsRequest
	267, // 359: ypb.Yak.QueryReport:input_type -> ypb.QueryReportRequest
	265, // 360: ypb.Yak.DeleteReport:input_type -> ypb.DeleteReportRequest
	189, // 361: ypb.Yak.QueryAvailableReportFrom:input_type -> ypb.Empty
	264, // 362: ypb.Yak.DownloadReport:input_type -> ypb.DownloadReportRequest
	280, // 363: ypb.Yak.QueryRisks:input_type -> ypb.QueryRisksRequest
	278, // 364: ypb.Yak.QueryRisk:input_type -> ypb.QueryRiskRequest
	276, // 365: ypb.Yak.DeleteRisk:input_type -> ypb.DeleteRiskRequest
	189, // 366: ypb.Yak.QueryAvailableRiskType:input_type -> ypb.Empty
	189, // 367: ypb.Yak.QueryAvailableRiskLevel:input_type -> ypb.Empty
	189, // 368: ypb.Yak.QueryRiskTableStats:input_type -> ypb.Empty
	189, // 369: ypb.Yak.ResetRiskTableStats:input_type -> ypb.Empty
	189, // 370: ypb.Yak.QueryAvailableTarget:input_type -> ypb.Empty
	274, // 371: ypb.Yak.QueryNewRisk:input_type -> ypb.QueryNewRiskRequest
	271, // 372: ypb.Yak.NewRiskRead:input_type -> ypb.NewRiskReadRequest
	270, // 373: ypb.Yak.UploadRiskToOnline:input_type -> ypb.UploadRiskToOnlineRequest
	290, // 374: ypb.Yak.IsScrecorderReady:input_type -> ypb.IsScrecorderReadyRequest
	289, // 375: ypb.Yak.InstallScrecorder:input_type -> ypb.InstallScrecorderRequest
	288, // 376: ypb.Yak.StartScrecorder:input_type -> ypb.StartScrecorderRequest
	287, // 377: ypb.Yak.QueryScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	287, // 378: ypb.Yak.DeleteScreenRecorders:input_type -> ypb.QueryScreenRecorderRequest
	281, // 379: ypb.Yak.UploadScreenRecorders:input_type -> ypb.UploadScreenRecorderRequest
	282, // 380: ypb.Yak.GetOneScreenRecorders:input_type -> ypb.GetOneScreenRecorderRequest
	283, // 381: ypb.Yak.UpdateScreenRecorders:input_type -> ypb.UpdateScreenRecorderRequest
	248, // 382: ypb.Yak.GetKey:input_type -> ypb.GetKeyRequest
	247, // 383: ypb.Yak.SetKey:input_type -> ypb.SetKeyRequest
	248, // 384: ypb.Yak.DelKey:input_type -> ypb.GetKeyRequest
	189, // 385: ypb.Yak.GetAllProcessEnvKey:input_type -> ypb.Empty
	247, // 386: ypb.Yak.SetProcessEnvKey:input_type -> ypb.SetKeyRequest
	189, // 387: ypb.Yak.GetSystemProxy:input_type -> ypb.Empty
	293, // 388: ypb.Yak.SetSystemProxy:input_type -> ypb.SetSystemProxyRequest
	307, // 389: ypb.Yak.GetTunnelServerExternalIP:input_type -> ypb.GetTunnelServerExternalIPParams
	309, // 390: ypb.Yak.VerifyTunnelServerDomain:input_type -> ypb.VerifyTunnelServerDomainParams
	306, // 391: ypb.Yak.SetYakBridgeLogServer:input_type -> ypb.YakDNSLogBridgeAddr
	189, // 392: ypb.Yak.GetCurrentYakBridgeLogServer:input_type -> ypb.Empty
	306, // 393: ypb.Yak.RequireDNSLogDomain:input_type -> ypb.YakDNSLogBridgeAddr
	304, // 394: ypb.Yak.QueryDNSLogByToken:input_type -> ypb.QueryDNSLogByTokenRequest
	189, // 395: ypb.Yak.RequireICMPRandomLength:input_type -> ypb.Empty
	300, // 396: ypb.Yak.QueryICMPTrigger:input_type -> ypb.QueryICMPTriggerRequest
	189, // 397: ypb.Yak.RequireRandomPortToken:input_type -> ypb.Empty
	296, // 398: ypb.Yak.QueryRandomPortTrigger:input_type -> ypb.QueryRandomPortTriggerRequest
	312, // 399: ypb.Yak.UpdateFromYakitResource:input_type -> ypb.UpdateFromYakitResourceRequest
	311, // 400: ypb.Yak.UpdateFromGithub:input_type -> ypb.UpdateFromGithubRequest
	313, // 401: ypb.Yak.IsVulinboxReady:input_type -> ypb.IsVulinboxReadyRequest
	315, // 402: ypb.Yak.InstallVulinbox:input_type -> ypb.InstallVulinboxRequest
	316, // 403: ypb.Yak.StartVulinbox:input_type -> ypb.StartVulinboxRequest
	322, // 404: ypb.Yak.CreateWebsocketFuzzer:input_type -> ypb.ClientWebsocketRequest
	320, // 405: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.QueryWebsocketFlowByHTTPFlowWebsocketHashRequest
	317, // 406: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:input_type -> ypb.DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest
	189, // 407: ypb.Yak.DeleteWebsocketFlowAll:input_type -> ypb.Empty
	189, // 408: ypb.Yak.Version:input_type -> ypb.Empty
	326, // 409: ypb.Yak.Echo:input_type -> ypb.EchoRequest
	323, // 410: ypb.Yak.OpenPort:input_type -> ypb.Input
	345, // 411: ypb.Yak.QueryYakScript:input_type -> ypb.QueryYakScriptRequest
	345, // 412: ypb.Yak.QueryYakScriptByYakScriptName:input_type -> ypb.QueryYakScriptRequest
	348, // 413: ypb.Yak.SaveYakScript:input_type -> ypb.YakScript
	349, // 414: ypb.Yak.DeleteYakScript:input_type -> ypb.DeleteYakScriptRequest
	350, // 415: ypb.Yak.GetYakScriptById:input_type -> ypb.GetYakScriptByIdRequest
	344, // 416: ypb.Yak.GetYakScriptByName:input_type -> ypb.GetYakScriptByNameRequest
	343, // 417: ypb.Yak.GetYakScriptByOnlineID:input_type -> ypb.GetYakScriptByOnlineIDRequest
	349, // 418: ypb.Yak.IgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	349, // 419: ypb.Yak.UnIgnoreYakScript:input_type -> ypb.DeleteYakScriptRequest
	342, // 420: ypb.Yak.ExportYakScript:input_type -> ypb.ExportYakScriptRequest
	189, // 421: ypb.Yak.GetYakScriptTags:input_type -> ypb.Empty
	336, // 422: ypb.Yak.QueryYakScriptLocalAndUser:input_type -> ypb.QueryYakScriptLocalAndUserRequest
	334, // 423: ypb.Yak.QueryYakScriptByOnlineGroup:input_type -> ypb.QueryYakScriptByOnlineGroupRequest
	189, // 424: ypb.Yak.QueryYakScriptLocalAll:input_type -> ypb.Empty
	328, // 425: ypb.Yak.QueryYakScriptByNames:input_type -> ypb.QueryYakScriptByNamesRequest
	333, // 426: ypb.Yak.QueryYakScriptExecResult:input_type -> ypb.QueryYakScriptExecResultRequest
	189, // 427: ypb.Yak.QueryYakScriptNameInExecResult:input_type -> ypb.Empty
	331, // 428: ypb.Yak.DeleteYakScriptExecResult:input_type -> ypb.DeleteYakScriptExecResultRequest
	189, // 429: ypb.Yak.DeleteYakScriptExec:input_type -> ypb.Empty
	189, // 430: ypb.Yak.GetAvailableYakScriptTags:input_type -> ypb.Empty
	189, // 431: ypb.Yak.ForceUpdateAvailableYakScriptTags:input_type -> ypb.Empty
	351, // 432: ypb.Yak.CreateYaklangShell:input_type -> ypb.YaklangShellRequest
	189, // 433: ypb.Yak.GetAllYsoGadgetOptions:input_type -> ypb.Empty
	363, // 434: ypb.Yak.GetAllYsoClassOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	363, // 435: ypb.Yak.GetAllYsoClassGeneraterOptions:input_type -> ypb.YsoOptionsRequerstWithVerbose
	363, // 436: ypb.Yak.GenerateYsoCode:input_type -> ypb.YsoOptionsRequerstWithVerbose
	363, // 437: ypb.Yak.GenerateYsoBytes:input_type -> ypb.YsoOptionsRequerstWithVerbose
	359, // 438: ypb.Yak.YsoDump:input_type -> ypb.YsoBytesObject
	2,   // 439: ypb.Yak.HTTPRequestAnalyzer:output_type -> ypb.HTTPRequestAnalysis
	9,   // 440: ypb.Yak.QueryPorts:output_type -> ypb.QueryPortsResponse
	189, // 441: ypb.Yak.DeletePorts:output_type -> ypb.Empty
	13,  // 442: ypb.Yak.QueryHosts:output_type -> ypb.QueryHostsResponse
	189, // 443: ypb.Yak.DeleteHosts:output_type -> ypb.Empty
	17,  // 444: ypb.Yak.QueryDomains:output_type -> ypb.QueryDomainsResponse
	189, // 445: ypb.Yak.DeleteDomains:output_type -> ypb.Empty
	6,   // 446: ypb.Yak.QueryPortsGroup:output_type -> ypb.QueryPortsGroupResponse
	192, // 447: ypb.Yak.AttachCombinedOutput:output_type -> ypb.ExecResult
	21,  // 448: ypb.Yak.SaveTextToTemporalFile:output_type -> ypb.SaveTextToTemporalFileResponse
	192, // 449: ypb.Yak.StartBrute:output_type -> ypb.ExecResult
	22,  // 450: ypb.Yak.GetAvailableBruteTypes:output_type -> ypb.GetAvailableBruteTypesResponse
	189, // 451: ypb.Yak.ImportChaosMakerRules:output_type -> ypb.Empty
	30,  // 452: ypb.Yak.QueryChaosMakerRule:output_type -> ypb.QueryChaosMakerRuleResponse
	189, // 453: ypb.Yak.DeleteChaosMakerRuleByID:output_type -> ypb.Empty
	192, // 454: ypb.Yak.ExecuteChaosMakerRule:output_type -> ypb.ExecResult
	24,  // 455: ypb.Yak.IsRemoteAddrAvailable:output_type -> ypb.IsRemoteAddrAvailableResponse
	37,  // 456: ypb.Yak.Codec:output_type -> ypb.CodecResponse
	34,  // 457: ypb.Yak.AutoDecode:output_type -> ypb.AutoDecodeResponse
	46,  // 458: ypb.Yak.GetYakitCompletionRaw:output_type -> ypb.YakitCompletionRawResponse
	41,  // 459: ypb.Yak.GetYakVMBuildInMethodCompletion:output_type -> ypb.GetYakVMBuildInMethodCompletionResponse
	44,  // 460: ypb.Yak.StaticAnalyzeError:output_type -> ypb.StaticAnalyzeErrorResponse
	42,  // 461: ypb.Yak.YaklangCompileAndFormat:output_type -> ypb.YaklangCompileAndFormatResponse
	192, // 462: ypb.Yak.StartBasicCrawler:output_type -> ypb.ExecResult
	197, // 463: ypb.Yak.ViewBasicCrawlerCode:output_type -> ypb.SimpleScript
	51,  // 464: ypb.Yak.GenerateWebsiteTree:output_type -> ypb.GenerateWebsiteTreeResponse
	61,  // 465: ypb.Yak.IsCVEDatabaseReady:output_type -> ypb.IsCVEDatabaseReadyResponse
	192, // 466: ypb.Yak.UpdateCVEDatabase:output_type -> ypb.ExecResult
	192, // 467: ypb.Yak.ExportsProfileDatabase:output_type -> ypb.ExecResult
	192, // 468: ypb.Yak.ImportsProfileDatabase:output_type -> ypb.ExecResult
	56,  // 469: ypb.Yak.QueryCVE:output_type -> ypb.QueryCVEResponse
	54,  // 470: ypb.Yak.GetCVE:output_type -> ypb.CVEDetailEx
	69,  // 471: ypb.Yak.HTTPRequestBuilder:output_type -> ypb.HTTPRequestBuilderResponse
	192, // 472: ypb.Yak.DebugPlugin:output_type -> ypb.ExecResult
	66,  // 473: ypb.Yak.SmokingEvaluatePlugin:output_type -> ypb.SmokingEvaluatePluginResponse
	189, // 474: ypb.Yak.SaveMarkdownDocument:output_type -> ypb.Empty
	70,  // 475: ypb.Yak.GetMarkdownDocument:output_type -> ypb.GetMarkdownDocumentResponse
	189, // 476: ypb.Yak.DeleteMarkdownDocument:output_type -> ypb.Empty
	192, // 477: ypb.Yak.Exec:output_type -> ypb.ExecResult
	78,  // 478: ypb.Yak.QueryExecHistory:output_type -> ypb.ExecHistoryRecordResponse
	189, // 479: ypb.Yak.RemoveExecHistory:output_type -> ypb.Empty
	189, // 480: ypb.Yak.LoadNucleiTemplates:output_type -> ypb.Empty
	192, // 481: ypb.Yak.AutoUpdateYakModule:output_type -> ypb.ExecResult
	192, // 482: ypb.Yak.ExecYakScript:output_type -> ypb.ExecResult
	80,  // 483: ypb.Yak.ExecBatchYakScript:output_type -> ypb.ExecBatchYakScriptResult
	82,  // 484: ypb.Yak.GetExecBatchYakScriptUnfinishedTask:output_type -> ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	79,  // 485: ypb.Yak.GetExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	79,  // 486: ypb.Yak.PopExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	80,  // 487: ypb.Yak.RecoverExecBatchYakScriptUnfinishedTask:output_type -> ypb.ExecBatchYakScriptResult
	192, // 488: ypb.Yak.ExecutePacketYakScript:output_type -> ypb.ExecResult
	80,  // 489: ypb.Yak.ExecuteBatchPacketYakScript:output_type -> ypb.ExecBatchYakScriptResult
	192, // 490: ypb.Yak.ExecPacketScan:output_type -> ypb.ExecResult
	192, // 491: ypb.Yak.ExecYakitPluginsByYakScriptFilter:output_type -> ypb.ExecResult
	87,  // 492: ypb.Yak.ExtractDataToFile:output_type -> ypb.ExtractDataToFileResult
	192, // 493: ypb.Yak.StartFacades:output_type -> ypb.ExecResult
	192, // 494: ypb.Yak.StartFacadesWithYsoObject:output_type -> ypb.ExecResult
	189, // 495: ypb.Yak.ApplyClassToFacades:output_type -> ypb.Empty
	94,  // 496: ypb.Yak.BytesToBase64:output_type -> ypb.BytesToBase64Response
	189, // 497: ypb.Yak.ConfigGlobalReverse:output_type -> ypb.Empty
	97,  // 498: ypb.Yak.AvailableLocalAddr:output_type -> ypb.AvailableLocalAddrResponse
	98,  // 499: ypb.Yak.GetGlobalReverseServer:output_type -> ypb.GetGlobalReverseServerResponse
	88,  // 500: ypb.Yak.RegisterFacadesHTTP:output_type -> ypb.RegisterFacadesHTTPResponse
	135, // 501: ypb.Yak.GetHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTaskDetail
	137, // 502: ypb.Yak.QueryHistoryHTTPFuzzerTask:output_type -> ypb.HistoryHTTPFuzzerTasks
	138, // 503: ypb.Yak.QueryHistoryHTTPFuzzerTaskEx:output_type -> ypb.HistoryHTTPFuzzerTasksResponse
	189, // 504: ypb.Yak.DeleteHistoryHTTPFuzzerTask:output_type -> ypb.Empty
	130, // 505: ypb.Yak.HTTPFuzzer:output_type -> ypb.FuzzerResponse
	128, // 506: ypb.Yak.PreloadHTTPFuzzerParams:output_type -> ypb.PreloadHTTPFuzzerParamsResponse
	125, // 507: ypb.Yak.RenderVariables:output_type -> ypb.RenderVariablesResponse
	122, // 508: ypb.Yak.MatchHTTPResponse:output_type -> ypb.MatchHTTPResponseResult
	119, // 509: ypb.Yak.ExtractHTTPResponse:output_type -> ypb.ExtractHTTPResponseResult
	130, // 510: ypb.Yak.RedirectRequest:output_type -> ypb.FuzzerResponse
	116, // 511: ypb.Yak.HTTPRequestMutate:output_type -> ypb.MutateResult
	116, // 512: ypb.Yak.HTTPResponseMutate:output_type -> ypb.MutateResult
	113, // 513: ypb.Yak.FixUploadPacket:output_type -> ypb.FixUploadPacketResponse
	111, // 514: ypb.Yak.IsMultipartFormDataRequest:output_type -> ypb.IsMultipartFormDataRequestResult
	110, // 515: ypb.Yak.GenerateExtractRule:output_type -> ypb.GenerateExtractRuleResponse
	108, // 516: ypb.Yak.ExtractData:output_type -> ypb.ExtractDataResponse
	106, // 517: ypb.Yak.QueryHTTPFuzzerResponseByTaskId:output_type -> ypb.QueryHTTPFuzzerResponseByTaskIdResponse
	105, // 518: ypb.Yak.ExtractUrl:output_type -> ypb.ExtractedUrl
	164, // 519: ypb.Yak.ConvertFuzzerResponseToHTTPFlow:output_type -> ypb.HTTPFlow
	103, // 520: ypb.Yak.StringFuzzer:output_type -> ypb.StringFuzzerResponse
	189, // 521: ypb.Yak.SaveFuzzerLabel:output_type -> ypb.Empty
	100, // 522: ypb.Yak.QueryFuzzerLabel:output_type -> ypb.QueryFuzzerLabelResponse
	189, // 523: ypb.Yak.DeleteFuzzerLabel:output_type -> ypb.Empty
	142, // 524: ypb.Yak.GenerateYakCodeByPacket:output_type -> ypb.GenerateYakCodeByPacketResponse
	140, // 525: ypb.Yak.GenerateCSRFPocByPacket:output_type -> ypb.GenerateCSRFPocByPacketResponse
	164, // 526: ypb.Yak.GetHTTPFlowByHash:output_type -> ypb.HTTPFlow
	164, // 527: ypb.Yak.GetHTTPFlowById:output_type -> ypb.HTTPFlow
	165, // 528: ypb.Yak.QueryHTTPFlowByIds:output_type -> ypb.HTTPFlows
	165, // 529: ypb.Yak.GetHTTPFlowByIds:output_type -> ypb.HTTPFlows
	155, // 530: ypb.Yak.QueryHTTPFlows:output_type -> ypb.QueryHTTPFlowResponse
	189, // 531: ypb.Yak.DeleteHTTPFlows:output_type -> ypb.Empty
	189, // 532: ypb.Yak.SetTagForHTTPFlow:output_type -> ypb.Empty
	159, // 533: ypb.Yak.QueryHTTPFlowsIds:output_type -> ypb.QueryHTTPFlowsIdsResponse
	151, // 534: ypb.Yak.HTTPFlowsFieldGroup:output_type -> ypb.HTTPFlowsFieldGroupResponse
	146, // 535: ypb.Yak.HTTPFlowsShare:output_type -> ypb.HTTPFlowsShareResponse
	189, // 536: ypb.Yak.HTTPFlowsExtract:output_type -> ypb.Empty
	147, // 537: ypb.Yak.GetRequestBodyByHTTPFlowID:output_type -> ypb.Bytes
	147, // 538: ypb.Yak.GetResponseBodyByHTTPFlowID:output_type -> ypb.Bytes
	147, // 539: ypb.Yak.GetHTTPPacketBody:output_type -> ypb.Bytes
	166, // 540: ypb.Yak.GetLicense:output_type -> ypb.GetLicenseResponse
	189, // 541: ypb.Yak.CheckLicense:output_type -> ypb.Empty
	189, // 542: ypb.Yak.AddToMenu:output_type -> ypb.Empty
	189, // 543: ypb.Yak.RemoveFromMenu:output_type -> ypb.Empty
	189, // 544: ypb.Yak.YakScriptIsInMenu:output_type -> ypb.Empty
	185, // 545: ypb.Yak.GetAllMenuItem:output_type -> ypb.MenuByGroup
	189, // 546: ypb.Yak.DeleteAllMenuItem:output_type -> ypb.Empty
	189, // 547: ypb.Yak.ImportMenuItem:output_type -> ypb.Empty
	183, // 548: ypb.Yak.ExportMenuItem:output_type -> ypb.ExportMenuItemResult
	181, // 549: ypb.Yak.GetMenuItemById:output_type -> ypb.MenuItem
	175, // 550: ypb.Yak.QueryGroupsByYakScriptId:output_type -> ypb.GroupNames
	189, // 551: ypb.Yak.AddMenus:output_type -> ypb.Empty
	185, // 552: ypb.Yak.QueryAllMenuItem:output_type -> ypb.MenuByGroup
	189, // 553: ypb.Yak.DeleteAllMenu:output_type -> ypb.Empty
	189, // 554: ypb.Yak.AddToNavigation:output_type -> ypb.Empty
	172, // 555: ypb.Yak.GetAllNavigationItem:output_type -> ypb.GetAllNavigationItemResponse
	189, // 556: ypb.Yak.DeleteAllNavigation:output_type -> ypb.Empty
	189, // 557: ypb.Yak.AddOneNavigation:output_type -> ypb.Empty
	175, // 558: ypb.Yak.QueryNavigationGroups:output_type -> ypb.GroupNames
	189, // 559: ypb.Yak.ResetAndInvalidUserData:output_type -> ypb.Empty
	200, // 560: ypb.Yak.IsPrivilegedForNetRaw:output_type -> ypb.IsPrivilegedForNetRawResponse
	189, // 561: ypb.Yak.PromotePermissionForUserPcap:output_type -> ypb.Empty
	198, // 562: ypb.Yak.GetMachineID:output_type -> ypb.GetMachineIDResponse
	214, // 563: ypb.Yak.MITM:output_type -> ypb.MITMResponse
	207, // 564: ypb.Yak.DownloadMITMCert:output_type -> ypb.MITMCert
	204, // 565: ypb.Yak.GetCurrentRules:output_type -> ypb.MITMContentReplacers
	189, // 566: ypb.Yak.SetCurrentRules:output_type -> ypb.Empty
	206, // 567: ypb.Yak.ExportMITMReplacerRules:output_type -> ypb.ExportMITMReplacerRulesResponse
	189, // 568: ypb.Yak.ImportMITMReplacerRules:output_type -> ypb.Empty
	202, // 569: ypb.Yak.QueryMITMRuleExtractedData:output_type -> ypb.QueryMITMRuleExtractedDataResponse
	208, // 570: ypb.Yak.SetMITMFilter:output_type -> ypb.SetMITMFilterResponse
	209, // 571: ypb.Yak.GetMITMFilter:output_type -> ypb.SetMITMFilterRequest
	229, // 572: ypb.Yak.GetOnlineProfile:output_type -> ypb.OnlineProfile
	189, // 573: ypb.Yak.SetOnlineProfile:output_type -> ypb.Empty
	189, // 574: ypb.Yak.DownloadOnlinePluginById:output_type -> ypb.Empty
	189, // 575: ypb.Yak.DownloadOnlinePluginByIds:output_type -> ypb.Empty
	220, // 576: ypb.Yak.DownloadOnlinePluginAll:output_type -> ypb.DownloadOnlinePluginProgress
	189, // 577: ypb.Yak.DeletePluginByUserID:output_type -> ypb.Empty
	189, // 578: ypb.Yak.DeleteAllLocalPlugins:output_type -> ypb.Empty
	224, // 579: ypb.Yak.GetYakScriptTagsAndType:output_type -> ypb.GetYakScriptTagsAndTypeResponse
	189, // 580: ypb.Yak.DeleteLocalPluginsByWhere:output_type -> ypb.Empty
	219, // 581: ypb.Yak.DownloadOnlinePluginByScriptNames:output_type -> ypb.DownloadOnlinePluginByScriptNamesResponse
	236, // 582: ypb.Yak.QueryPayload:output_type -> ypb.QueryPayloadResponse
	189, // 583: ypb.Yak.DeletePayloadByGroup:output_type -> ypb.Empty
	189, // 584: ypb.Yak.DeletePayload:output_type -> ypb.Empty
	189, // 585: ypb.Yak.SavePayload:output_type -> ypb.Empty
	231, // 586: ypb.Yak.SavePayloadStream:output_type -> ypb.SavePayloadProgress
	230, // 587: ypb.Yak.GetAllPayloadGroup:output_type -> ypb.GetAllPayloadGroupResponse
	189, // 588: ypb.Yak.UpdatePayload:output_type -> ypb.Empty
	239, // 589: ypb.Yak.GetAllPayload:output_type -> ypb.GetAllPayloadResponse
	192, // 590: ypb.Yak.PortScan:output_type -> ypb.ExecResult
	197, // 591: ypb.Yak.ViewPortScanCode:output_type -> ypb.SimpleScript
	192, // 592: ypb.Yak.SimpleDetect:output_type -> ypb.ExecResult
	189, // 593: ypb.Yak.SaveCancelSimpleDetect:output_type -> ypb.Empty
	243, // 594: ypb.Yak.GetSimpleDetectUnfinishedTask:output_type -> ypb.GetSimpleDetectUnfinishedTaskResponse
	244, // 595: ypb.Yak.GetSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	244, // 596: ypb.Yak.PopSimpleDetectUnfinishedTaskByUid:output_type -> ypb.RecordPortScanRequest
	192, // 597: ypb.Yak.RecoverSimpleDetectUnfinishedTask:output_type -> ypb.ExecResult
	189, // 598: ypb.Yak.SetCurrentProject:output_type -> ypb.Empty
	258, // 599: ypb.Yak.GetCurrentProject:output_type -> ypb.ProjectDescription
	261, // 600: ypb.Yak.GetProjects:output_type -> ypb.GetProjectsResponse
	256, // 601: ypb.Yak.NewProject:output_type -> ypb.NewProjectResponse
	189, // 602: ypb.Yak.IsProjectNameValid:output_type -> ypb.Empty
	189, // 603: ypb.Yak.RemoveProject:output_type -> ypb.Empty
	189, // 604: ypb.Yak.DeleteProject:output_type -> ypb.Empty
	258, // 605: ypb.Yak.GetDefaultProject:output_type -> ypb.ProjectDescription
	258, // 606: ypb.Yak.QueryProjectDetail:output_type -> ypb.ProjectDescription
	252, // 607: ypb.Yak.ExportProject:output_type -> ypb.ProjectIOProgress
	252, // 608: ypb.Yak.ImportProject:output_type -> ypb.ProjectIOProgress
	189, // 609: ypb.Yak.MigrateLegacyDatabase:output_type -> ypb.Empty
	249, // 610: ypb.Yak.GetProjectKey:output_type -> ypb.GetKeyResult
	189, // 611: ypb.Yak.SetProjectKey:output_type -> ypb.Empty
	263, // 612: ypb.Yak.GetEngineDefaultProxy:output_type -> ypb.DefaultProxyResult
	189, // 613: ypb.Yak.SetEngineDefaultProxy:output_type -> ypb.Empty
	268, // 614: ypb.Yak.QueryReports:output_type -> ypb.QueryReportsResponse
	266, // 615: ypb.Yak.QueryReport:output_type -> ypb.Report
	189, // 616: ypb.Yak.DeleteReport:output_type -> ypb.Empty
	196, // 617: ypb.Yak.QueryAvailableReportFrom:output_type -> ypb.Fields
	189, // 618: ypb.Yak.DownloadReport:output_type -> ypb.Empty
	279, // 619: ypb.Yak.QueryRisks:output_type -> ypb.QueryRisksResponse
	277, // 620: ypb.Yak.QueryRisk:output_type -> ypb.Risk
	189, // 621: ypb.Yak.DeleteRisk:output_type -> ypb.Empty
	196, // 622: ypb.Yak.QueryAvailableRiskType:output_type -> ypb.Fields
	196, // 623: ypb.Yak.QueryAvailableRiskLevel:output_type -> ypb.Fields
	275, // 624: ypb.Yak.QueryRiskTableStats:output_type -> ypb.RiskTableStats
	189, // 625: ypb.Yak.ResetRiskTableStats:output_type -> ypb.Empty
	196, // 626: ypb.Yak.QueryAvailableTarget:output_type -> ypb.Fields
	273, // 627: ypb.Yak.QueryNewRisk:output_type -> ypb.QueryNewRiskResponse
	189, // 628: ypb.Yak.NewRiskRead:output_type -> ypb.Empty
	189, // 629: ypb.Yak.UploadRiskToOnline:output_type -> ypb.Empty
	286, // 630: ypb.Yak.IsScrecorderReady:output_type -> ypb.IsScrecorderReadyResponse
	192, // 631: ypb.Yak.InstallScrecorder:output_type -> ypb.ExecResult
	192, // 632: ypb.Yak.StartScrecorder:output_type -> ypb.ExecResult
	285, // 633: ypb.Yak.QueryScreenRecorders:output_type -> ypb.QueryScreenRecorderResponse
	189, // 634: ypb.Yak.DeleteScreenRecorders:output_type -> ypb.Empty
	189, // 635: ypb.Yak.UploadScreenRecorders:output_type -> ypb.Empty
	284, // 636: ypb.Yak.GetOneScreenRecorders:output_type -> ypb.ScreenRecorder
	189, // 637: ypb.Yak.UpdateScreenRecorders:output_type -> ypb.Empty
	249, // 638: ypb.Yak.GetKey:output_type -> ypb.GetKeyResult
	189, // 639: ypb.Yak.SetKey:output_type -> ypb.Empty
	189, // 640: ypb.Yak.DelKey:output_type -> ypb.Empty
	292, // 641: ypb.Yak.GetAllProcessEnvKey:output_type -> ypb.GetProcessEnvKeyResult
	189, // 642: ypb.Yak.SetProcessEnvKey:output_type -> ypb.Empty
	294, // 643: ypb.Yak.GetSystemProxy:output_type -> ypb.GetSystemProxyResult
	189, // 644: ypb.Yak.SetSystemProxy:output_type -> ypb.Empty
	308, // 645: ypb.Yak.GetTunnelServerExternalIP:output_type -> ypb.GetTunnelServerExternalIPResponse
	310, // 646: ypb.Yak.VerifyTunnelServerDomain:output_type -> ypb.VerifyTunnelServerDomainResponse
	189, // 647: ypb.Yak.SetYakBridgeLogServer:output_type -> ypb.Empty
	306, // 648: ypb.Yak.GetCurrentYakBridgeLogServer:output_type -> ypb.YakDNSLogBridgeAddr
	305, // 649: ypb.Yak.RequireDNSLogDomain:output_type -> ypb.DNSLogRootDomain
	303, // 650: ypb.Yak.QueryDNSLogByToken:output_type -> ypb.QueryDNSLogByTokenResponse
	301, // 651: ypb.Yak.RequireICMPRandomLength:output_type -> ypb.RequireICMPRandomLengthResponse
	299, // 652: ypb.Yak.QueryICMPTrigger:output_type -> ypb.QueryICMPTriggerResponse
	297, // 653: ypb.Yak.RequireRandomPortToken:output_type -> ypb.RandomPortInfo
	295, // 654: ypb.Yak.QueryRandomPortTrigger:output_type -> ypb.RandomPortTriggerNotification
	189, // 655: ypb.Yak.UpdateFromYakitResource:output_type -> ypb.Empty
	189, // 656: ypb.Yak.UpdateFromGithub:output_type -> ypb.Empty
	314, // 657: ypb.Yak.IsVulinboxReady:output_type -> ypb.IsVulinboxReadyResponse
	192, // 658: ypb.Yak.InstallVulinbox:output_type -> ypb.ExecResult
	192, // 659: ypb.Yak.StartVulinbox:output_type -> ypb.ExecResult
	321, // 660: ypb.Yak.CreateWebsocketFuzzer:output_type -> ypb.ClientWebsocketResponse
	319, // 661: ypb.Yak.QueryWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.WebsocketFlows
	189, // 662: ypb.Yak.DeleteWebsocketFlowByHTTPFlowWebsocketHash:output_type -> ypb.Empty
	189, // 663: ypb.Yak.DeleteWebsocketFlowAll:output_type -> ypb.Empty
	327, // 664: ypb.Yak.Version:output_type -> ypb.VersionResponse
	325, // 665: ypb.Yak.Echo:output_type -> ypb.EchoResposne
	324, // 666: ypb.Yak.OpenPort:output_type -> ypb.Output
	346, // 667: ypb.Yak.QueryYakScript:output_type -> ypb.QueryYakScriptResponse
	348, // 668: ypb.Yak.QueryYakScriptByYakScriptName:output_type -> ypb.YakScript
	348, // 669: ypb.Yak.SaveYakScript:output_type -> ypb.YakScript
	189, // 670: ypb.Yak.DeleteYakScript:output_type -> ypb.Empty
	348, // 671: ypb.Yak.GetYakScriptById:output_type -> ypb.YakScript
	348, // 672: ypb.Yak.GetYakScriptByName:output_type -> ypb.YakScript
	348, // 673: ypb.Yak.GetYakScriptByOnlineID:output_type -> ypb.YakScript
	189, // 674: ypb.Yak.IgnoreYakScript:output_type -> ypb.Empty
	189, // 675: ypb.Yak.UnIgnoreYakScript:output_type -> ypb.Empty
	339, // 676: ypb.Yak.ExportYakScript:output_type -> ypb.ExportYakScriptResponse
	338, // 677: ypb.Yak.GetYakScriptTags:output_type -> ypb.GetYakScriptTagsResponse
	335, // 678: ypb.Yak.QueryYakScriptLocalAndUser:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	335, // 679: ypb.Yak.QueryYakScriptByOnlineGroup:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	335, // 680: ypb.Yak.QueryYakScriptLocalAll:output_type -> ypb.QueryYakScriptLocalAndUserResponse
	329, // 681: ypb.Yak.QueryYakScriptByNames:output_type -> ypb.QueryYakScriptByNamesResponse
	332, // 682: ypb.Yak.QueryYakScriptExecResult:output_type -> ypb.QueryYakScriptExecResultResponse
	330, // 683: ypb.Yak.QueryYakScriptNameInExecResult:output_type -> ypb.YakScriptNames
	189, // 684: ypb.Yak.DeleteYakScriptExecResult:output_type -> ypb.Empty
	189, // 685: ypb.Yak.DeleteYakScriptExec:output_type -> ypb.Empty
	196, // 686: ypb.Yak.GetAvailableYakScriptTags:output_type -> ypb.Fields
	189, // 687: ypb.Yak.ForceUpdateAvailableYakScriptTags:output_type -> ypb.Empty
	353, // 688: ypb.Yak.CreateYaklangShell:output_type -> ypb.YaklangShellResponse
	362, // 689: ypb.Yak.GetAllYsoGadgetOptions:output_type -> ypb.YsoOptionsWithVerbose
	362, // 690: ypb.Yak.GetAllYsoClassOptions:output_type -> ypb.YsoOptionsWithVerbose
	356, // 691: ypb.Yak.GetAllYsoClassGeneraterOptions:output_type -> ypb.YsoClassOptionsResponseWithVerbose
	360, // 692: ypb.Yak.GenerateYsoCode:output_type -> ypb.YsoCodeResponse
	358, // 693: ypb.Yak.GenerateYsoBytes:output_type -> ypb.YsoBytesResponse
	357, // 694: ypb.Yak.YsoDump:output_type -> ypb.YsoDumpResponse
	439, // [439:695] is the sub-list for method output_type
	183, // [183:439] is the sub-list for method input_type
	183, // [183:183] is the sub-list for extension type_name
	183, // [183:183] is the sub-list for extension extendee
	0,   // [0:183] is the sub-list for field type_name
}

func init() { file_yakgrpc_proto_init() }
func file_yakgrpc_proto_init() {
	if File_yakgrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yakgrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestAnalysisMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachCombinedOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTextToTemporalFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTextToTemporalFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableBruteTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBruteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRemoteAddrAvailableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRemoteAddrAvailableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosMakerRuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteChaosMakerRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChaosMakerRuleByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosMakerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaosMakerRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaosMakerRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChaosMakerRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoDecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakVMBuildInMethodCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangCompileAndFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangCompileAndFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalyzeErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakitCompletionRawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakVMBuildInMethodCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBasicCrawlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWebsiteTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWebsiteTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEDetailEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCVERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportsProfileDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCVEDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCVEDatabaseReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmokingEvaluatePluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestBuilderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMarkdownDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecYakitPluginsByYakScriptFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecPacketScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverExecBatchYakScriptUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataToFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataToFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFacadesHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFacadesWithYsoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyClassToFacadesParamsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesToBase64Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGlobalReverseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableLocalAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalReverseServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveFuzzerLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFuzzerLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFuzzerLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFuzzerResponseByTaskIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMultipartFormDataRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateExtractRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixUploadPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestMutateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchHTTPResponseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadHTTPFuzzerParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerResponseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryHTTPFuzzerTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryHTTPFuzzerTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHistoryHTTPFuzzerTaskExParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRFPocByPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRFPocByPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateYakCodeByPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateYakCodeByPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsExtractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPPacketBodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBodyByHTTPFlowIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlowsFieldGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagForHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSetTagsHTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHTTPFlowsIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPFlowByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzableParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNavigationItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOneNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNavigationGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllMenuItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItemGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupsByYakScriptIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExecutionPluginFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMenuItemByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMenuItemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMenuItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuByGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptIsInMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFromMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAndInvalidUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPrivilegedForNetRawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMRuleExtractedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMITMRuleExtractedDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMITMRuleExtractedDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMContentReplacers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMITMReplacerRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMITMReplacerRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMITMFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMITMFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCookieSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMContentReplacer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptHookItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptHooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHookParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MITMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByScriptNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLocalPluginsByWhereRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptTagsAndTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePluginByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOnlinePluginByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePayloadProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayloadByGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleDetectUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimpleDetectUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleDetectYakScriptUnfinishedTaskByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectIOProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProjectDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsProjectNameValidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurrentProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProxyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRiskToOnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRiskReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNewRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskTableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenRecorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryScreenRecorderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsScrecorderReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryScreenRecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartScrecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallScrecorderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsScrecorderReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessEnvKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemProxyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPortTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRandomPortTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPTriggerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryICMPTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryICMPTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireICMPRandomLengthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSLogByTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSLogByTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSLogRootDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakDNSLogBridgeAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelServerExternalIPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelServerExternalIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTunnelServerDomainParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTunnelServerDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromGithubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromYakitResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVulinboxReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVulinboxReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallVulinboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVulinboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWebsocketFlowByHTTPFlowWebsocketHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResposne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptExecResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptByOnlineGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptLocalAndUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteBatchPacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePacketYakScriptParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByOnlineIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryYakScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScriptParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYakScriptByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellKVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YaklangShellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassGeneraterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassOptionsResponseWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoBytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoBytesObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoOptionsRequerstWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yakgrpc_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YsoClassGeneraterOptionsWithVerbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yakgrpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   366,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yakgrpc_proto_goTypes,
		DependencyIndexes: file_yakgrpc_proto_depIdxs,
		EnumInfos:         file_yakgrpc_proto_enumTypes,
		MessageInfos:      file_yakgrpc_proto_msgTypes,
	}.Build()
	File_yakgrpc_proto = out.File
	file_yakgrpc_proto_rawDesc = nil
	file_yakgrpc_proto_goTypes = nil
	file_yakgrpc_proto_depIdxs = nil
}
