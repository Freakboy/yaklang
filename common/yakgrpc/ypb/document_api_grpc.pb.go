// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: document_api.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DocumentApi_SaveMarkdownDocument_FullMethodName   = "/ypb.DocumentApi/SaveMarkdownDocument"
	DocumentApi_GetMarkdownDocument_FullMethodName    = "/ypb.DocumentApi/GetMarkdownDocument"
	DocumentApi_DeleteMarkdownDocument_FullMethodName = "/ypb.DocumentApi/DeleteMarkdownDocument"
)

// DocumentApiClient is the client API for DocumentApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentApiClient interface {
	// document
	SaveMarkdownDocument(ctx context.Context, in *SaveMarkdownDocumentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetMarkdownDocument(ctx context.Context, in *GetMarkdownDocumentRequest, opts ...grpc.CallOption) (*GetMarkdownDocumentResponse, error)
	DeleteMarkdownDocument(ctx context.Context, in *GetMarkdownDocumentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type documentApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentApiClient(cc grpc.ClientConnInterface) DocumentApiClient {
	return &documentApiClient{cc}
}

func (c *documentApiClient) SaveMarkdownDocument(ctx context.Context, in *SaveMarkdownDocumentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DocumentApi_SaveMarkdownDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentApiClient) GetMarkdownDocument(ctx context.Context, in *GetMarkdownDocumentRequest, opts ...grpc.CallOption) (*GetMarkdownDocumentResponse, error) {
	out := new(GetMarkdownDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentApi_GetMarkdownDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentApiClient) DeleteMarkdownDocument(ctx context.Context, in *GetMarkdownDocumentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DocumentApi_DeleteMarkdownDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentApiServer is the server API for DocumentApi service.
// All implementations must embed UnimplementedDocumentApiServer
// for forward compatibility
type DocumentApiServer interface {
	// document
	SaveMarkdownDocument(context.Context, *SaveMarkdownDocumentRequest) (*Empty, error)
	GetMarkdownDocument(context.Context, *GetMarkdownDocumentRequest) (*GetMarkdownDocumentResponse, error)
	DeleteMarkdownDocument(context.Context, *GetMarkdownDocumentRequest) (*Empty, error)
	mustEmbedUnimplementedDocumentApiServer()
}

// UnimplementedDocumentApiServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentApiServer struct {
}

func (UnimplementedDocumentApiServer) SaveMarkdownDocument(context.Context, *SaveMarkdownDocumentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMarkdownDocument not implemented")
}
func (UnimplementedDocumentApiServer) GetMarkdownDocument(context.Context, *GetMarkdownDocumentRequest) (*GetMarkdownDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkdownDocument not implemented")
}
func (UnimplementedDocumentApiServer) DeleteMarkdownDocument(context.Context, *GetMarkdownDocumentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarkdownDocument not implemented")
}
func (UnimplementedDocumentApiServer) mustEmbedUnimplementedDocumentApiServer() {}

// UnsafeDocumentApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentApiServer will
// result in compilation errors.
type UnsafeDocumentApiServer interface {
	mustEmbedUnimplementedDocumentApiServer()
}

func RegisterDocumentApiServer(s grpc.ServiceRegistrar, srv DocumentApiServer) {
	s.RegisterService(&DocumentApi_ServiceDesc, srv)
}

func _DocumentApi_SaveMarkdownDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMarkdownDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentApiServer).SaveMarkdownDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentApi_SaveMarkdownDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentApiServer).SaveMarkdownDocument(ctx, req.(*SaveMarkdownDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentApi_GetMarkdownDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkdownDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentApiServer).GetMarkdownDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentApi_GetMarkdownDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentApiServer).GetMarkdownDocument(ctx, req.(*GetMarkdownDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentApi_DeleteMarkdownDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkdownDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentApiServer).DeleteMarkdownDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentApi_DeleteMarkdownDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentApiServer).DeleteMarkdownDocument(ctx, req.(*GetMarkdownDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentApi_ServiceDesc is the grpc.ServiceDesc for DocumentApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.DocumentApi",
	HandlerType: (*DocumentApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMarkdownDocument",
			Handler:    _DocumentApi_SaveMarkdownDocument_Handler,
		},
		{
			MethodName: "GetMarkdownDocument",
			Handler:    _DocumentApi_GetMarkdownDocument_Handler,
		},
		{
			MethodName: "DeleteMarkdownDocument",
			Handler:    _DocumentApi_DeleteMarkdownDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document_api.proto",
}
