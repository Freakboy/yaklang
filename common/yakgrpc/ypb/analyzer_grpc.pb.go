// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: analyzer.proto

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnalyzerService_HTTPRequestAnalyzer_FullMethodName = "/ypb.AnalyzerService/HTTPRequestAnalyzer"
)

// AnalyzerServiceClient is the client API for AnalyzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzerServiceClient interface {
	// 分析一个 HTTP 请求详情
	HTTPRequestAnalyzer(ctx context.Context, in *HTTPRequestAnalysisMaterial, opts ...grpc.CallOption) (*HTTPRequestAnalysis, error)
}

type analyzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerServiceClient(cc grpc.ClientConnInterface) AnalyzerServiceClient {
	return &analyzerServiceClient{cc}
}

func (c *analyzerServiceClient) HTTPRequestAnalyzer(ctx context.Context, in *HTTPRequestAnalysisMaterial, opts ...grpc.CallOption) (*HTTPRequestAnalysis, error) {
	out := new(HTTPRequestAnalysis)
	err := c.cc.Invoke(ctx, AnalyzerService_HTTPRequestAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyzerServiceServer is the server API for AnalyzerService service.
// All implementations must embed UnimplementedAnalyzerServiceServer
// for forward compatibility
type AnalyzerServiceServer interface {
	// 分析一个 HTTP 请求详情
	HTTPRequestAnalyzer(context.Context, *HTTPRequestAnalysisMaterial) (*HTTPRequestAnalysis, error)
	mustEmbedUnimplementedAnalyzerServiceServer()
}

// UnimplementedAnalyzerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyzerServiceServer struct {
}

func (UnimplementedAnalyzerServiceServer) HTTPRequestAnalyzer(context.Context, *HTTPRequestAnalysisMaterial) (*HTTPRequestAnalysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPRequestAnalyzer not implemented")
}
func (UnimplementedAnalyzerServiceServer) mustEmbedUnimplementedAnalyzerServiceServer() {}

// UnsafeAnalyzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServiceServer will
// result in compilation errors.
type UnsafeAnalyzerServiceServer interface {
	mustEmbedUnimplementedAnalyzerServiceServer()
}

func RegisterAnalyzerServiceServer(s grpc.ServiceRegistrar, srv AnalyzerServiceServer) {
	s.RegisterService(&AnalyzerService_ServiceDesc, srv)
}

func _AnalyzerService_HTTPRequestAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequestAnalysisMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServiceServer).HTTPRequestAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyzerService_HTTPRequestAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServiceServer).HTTPRequestAnalyzer(ctx, req.(*HTTPRequestAnalysisMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyzerService_ServiceDesc is the grpc.ServiceDesc for AnalyzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ypb.AnalyzerService",
	HandlerType: (*AnalyzerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HTTPRequestAnalyzer",
			Handler:    _AnalyzerService_HTTPRequestAnalyzer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyzer.proto",
}
