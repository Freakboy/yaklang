// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: exec_yak_script_api.proto

package ypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecYakitPluginsByYakScriptFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *QueryYakScriptRequest `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// 这个 Target 很复杂，URL / IP / CIDR / Host / Host:port
	Target      string           `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Ports       string           `protobuf:"bytes,3,opt,name=Ports,proto3" json:"Ports,omitempty"`
	TargetFile  string           `protobuf:"bytes,5,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	ExtraParams []*ExecParamItem `protobuf:"bytes,4,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) Reset() {
	*x = ExecYakitPluginsByYakScriptFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecYakitPluginsByYakScriptFilterRequest) ProtoMessage() {}

func (x *ExecYakitPluginsByYakScriptFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecYakitPluginsByYakScriptFilterRequest.ProtoReflect.Descriptor instead.
func (*ExecYakitPluginsByYakScriptFilterRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{0}
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecYakitPluginsByYakScriptFilterRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type ExecPacketScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 选择 HTTPFlow 进行扫描
	HTTPFlow    []int64 `protobuf:"varint,1,rep,packed,name=HTTPFlow,proto3" json:"HTTPFlow,omitempty"`
	HTTPRequest []byte  `protobuf:"bytes,2,opt,name=HTTPRequest,proto3" json:"HTTPRequest,omitempty"`
	HTTPS       bool    `protobuf:"varint,3,opt,name=HTTPS,proto3" json:"HTTPS,omitempty"`
	// 允许数据包的 Fuzz 打开
	AllowFuzzTag bool `protobuf:"varint,5,opt,name=AllowFuzzTag,proto3" json:"AllowFuzzTag,omitempty"`
	// 扫描进程总超时
	TotalTimeoutSeconds int64 `protobuf:"varint,6,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 默认发包的 Timeout
	Timeout int64 `protobuf:"varint,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 并发
	PluginConcurrent int64 `protobuf:"varint,8,opt,name=PluginConcurrent,proto3" json:"PluginConcurrent,omitempty"`
	PacketConcurrent int64 `protobuf:"varint,9,opt,name=PacketConcurrent,proto3" json:"PacketConcurrent,omitempty"`
	// 插件列表
	PluginList []string `protobuf:"bytes,10,rep,name=PluginList,proto3" json:"PluginList,omitempty"`
	// 设置代理
	Proxy string `protobuf:"bytes,11,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
}

func (x *ExecPacketScanRequest) Reset() {
	*x = ExecPacketScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecPacketScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecPacketScanRequest) ProtoMessage() {}

func (x *ExecPacketScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecPacketScanRequest.ProtoReflect.Descriptor instead.
func (*ExecPacketScanRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{1}
}

func (x *ExecPacketScanRequest) GetHTTPFlow() []int64 {
	if x != nil {
		return x.HTTPFlow
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPRequest() []byte {
	if x != nil {
		return x.HTTPRequest
	}
	return nil
}

func (x *ExecPacketScanRequest) GetHTTPS() bool {
	if x != nil {
		return x.HTTPS
	}
	return false
}

func (x *ExecPacketScanRequest) GetAllowFuzzTag() bool {
	if x != nil {
		return x.AllowFuzzTag
	}
	return false
}

func (x *ExecPacketScanRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecPacketScanRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginConcurrent() int64 {
	if x != nil {
		return x.PluginConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPacketConcurrent() int64 {
	if x != nil {
		return x.PacketConcurrent
	}
	return 0
}

func (x *ExecPacketScanRequest) GetPluginList() []string {
	if x != nil {
		return x.PluginList
	}
	return nil
}

func (x *ExecPacketScanRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params      []*ExecParamItem `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Script      string           `protobuf:"bytes,2,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptId    string           `protobuf:"bytes,3,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	YakScriptId int64            `protobuf:"varint,5,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	// 这个是为了满足 Runner 的情况，属于特殊情况
	RunnerParamRaw string `protobuf:"bytes,6,opt,name=RunnerParamRaw,proto3" json:"RunnerParamRaw,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{2}
}

func (x *ExecRequest) GetParams() []*ExecParamItem {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ExecRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecRequest) GetRunnerParamRaw() string {
	if x != nil {
		return x.RunnerParamRaw
	}
	return ""
}

// Yak Invoker
type ExecHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *Paging `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	YakScriptId   int64   `protobuf:"varint,3,opt,name=YakScriptId,proto3" json:"YakScriptId,omitempty"`
	YakScriptName string  `protobuf:"bytes,4,opt,name=YakScriptName,proto3" json:"YakScriptName,omitempty"`
}

func (x *ExecHistoryRequest) Reset() {
	*x = ExecHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRequest) ProtoMessage() {}

func (x *ExecHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRequest.ProtoReflect.Descriptor instead.
func (*ExecHistoryRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{3}
}

func (x *ExecHistoryRequest) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRequest) GetYakScriptId() int64 {
	if x != nil {
		return x.YakScriptId
	}
	return 0
}

func (x *ExecHistoryRequest) GetYakScriptName() string {
	if x != nil {
		return x.YakScriptName
	}
	return ""
}

// 执行的历史记录
type ExecHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 脚本内容
	Script string `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	// 脚本 ID（如果有的话）
	ScriptId string `protobuf:"bytes,2,opt,name=ScriptId,proto3" json:"ScriptId,omitempty"`
	// 执行时间点
	Timestamp int64 `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// 执行间隔
	DurationMs int64 `protobuf:"varint,4,opt,name=DurationMs,proto3" json:"DurationMs,omitempty"`
	// 执行参数（命令行参数部分）
	Params string `protobuf:"bytes,5,opt,name=Params,proto3" json:"Params,omitempty"`
	// 执行成功还是失败
	Ok bool `protobuf:"varint,7,opt,name=Ok,proto3" json:"Ok,omitempty"`
	// 失败原因是啥？
	Reason string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// Uid
	Id string `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	// 展示界面内容
	Stdout        []byte `protobuf:"bytes,10,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr        []byte `protobuf:"bytes,11,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	RuntimeId     string `protobuf:"bytes,12,opt,name=RuntimeId,proto3" json:"RuntimeId,omitempty"`
	FromYakModule string `protobuf:"bytes,13,opt,name=FromYakModule,proto3" json:"FromYakModule,omitempty"`
	StdoutLen     int64  `protobuf:"varint,14,opt,name=StdoutLen,proto3" json:"StdoutLen,omitempty"`
	StderrLen     int64  `protobuf:"varint,15,opt,name=StderrLen,proto3" json:"StderrLen,omitempty"`
	Messages      []byte `protobuf:"bytes,16,opt,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *ExecHistoryRecord) Reset() {
	*x = ExecHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecord) ProtoMessage() {}

func (x *ExecHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecord.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecord) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{4}
}

func (x *ExecHistoryRecord) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecHistoryRecord) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ExecHistoryRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecHistoryRecord) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ExecHistoryRecord) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ExecHistoryRecord) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecHistoryRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecHistoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecHistoryRecord) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecHistoryRecord) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *ExecHistoryRecord) GetFromYakModule() string {
	if x != nil {
		return x.FromYakModule
	}
	return ""
}

func (x *ExecHistoryRecord) GetStdoutLen() int64 {
	if x != nil {
		return x.StdoutLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetStderrLen() int64 {
	if x != nil {
		return x.StderrLen
	}
	return 0
}

func (x *ExecHistoryRecord) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ExecHistoryRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ExecHistoryRecord `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	Pagination *Paging              `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	Total      int64                `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ExecHistoryRecordResponse) Reset() {
	*x = ExecHistoryRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecHistoryRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecHistoryRecordResponse) ProtoMessage() {}

func (x *ExecHistoryRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecHistoryRecordResponse.ProtoReflect.Descriptor instead.
func (*ExecHistoryRecordResponse) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{5}
}

func (x *ExecHistoryRecordResponse) GetData() []*ExecHistoryRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetPagination() *Paging {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ExecHistoryRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExecBatchYakScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 目标会被自动拆分
	Target     string `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	TargetFile string `protobuf:"bytes,11,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	// 额外参数可以被添加
	ExtraParams []*ExecParamItem `protobuf:"bytes,7,rep,name=ExtraParams,proto3" json:"ExtraParams,omitempty"`
	// 筛选与限制
	Keyword               string   `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	ExcludedYakScript     []string `protobuf:"bytes,22,rep,name=ExcludedYakScript,proto3" json:"ExcludedYakScript,omitempty"`
	DisableNucleiWorkflow bool     `protobuf:"varint,23,opt,name=DisableNucleiWorkflow,proto3" json:"DisableNucleiWorkflow,omitempty"`
	Limit                 int64    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 默认总用时
	TotalTimeoutSeconds int64 `protobuf:"varint,4,opt,name=TotalTimeoutSeconds,proto3" json:"TotalTimeoutSeconds,omitempty"`
	// 模块类型，默认为 nuclei
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	// 并发（进程）
	Concurrent int64 `protobuf:"varint,6,opt,name=Concurrent,proto3" json:"Concurrent,omitempty"`
	// 精确使用脚本名称
	// 要注意，这个 Scripts 和 PluginFilter 是冲突的
	ScriptNames []string `protobuf:"bytes,8,rep,name=ScriptNames,proto3" json:"ScriptNames,omitempty"`
	// Tags with exclude / include
	PluginFilter       *QueryYakScriptRequest `protobuf:"bytes,12,opt,name=PluginFilter,proto3" json:"PluginFilter,omitempty"`
	EnablePluginFilter bool                   `protobuf:"varint,13,opt,name=EnablePluginFilter,proto3" json:"EnablePluginFilter,omitempty"`
	// 设置一个代理
	Proxy string `protobuf:"bytes,14,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	// 每个进程的任务数量
	ProgressTaskCount int64 `protobuf:"varint,15,opt,name=ProgressTaskCount,proto3" json:"ProgressTaskCount,omitempty"`
	// 基础进度 - 这个默认是 0.1 一般别用，只在 Recover 的时候可能才会有用处
	BaseProgress float64 `protobuf:"fixed64,16,opt,name=BaseProgress,proto3" json:"BaseProgress,omitempty"`
	// 这个很关键，不然会报错
	FromRecover          bool   `protobuf:"varint,17,opt,name=FromRecover,proto3" json:"FromRecover,omitempty"`
	YakScriptOnlineGroup string `protobuf:"bytes,18,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string `protobuf:"bytes,19,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *ExecBatchYakScriptRequest) Reset() {
	*x = ExecBatchYakScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptRequest) ProtoMessage() {}

func (x *ExecBatchYakScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptRequest.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{6}
}

func (x *ExecBatchYakScriptRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExtraParams() []*ExecParamItem {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetExcludedYakScript() []string {
	if x != nil {
		return x.ExcludedYakScript
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetDisableNucleiWorkflow() bool {
	if x != nil {
		return x.DisableNucleiWorkflow
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetTotalTimeoutSeconds() int64 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetConcurrent() int64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetScriptNames() []string {
	if x != nil {
		return x.ScriptNames
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetPluginFilter() *QueryYakScriptRequest {
	if x != nil {
		return x.PluginFilter
	}
	return nil
}

func (x *ExecBatchYakScriptRequest) GetEnablePluginFilter() bool {
	if x != nil {
		return x.EnablePluginFilter
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetProgressTaskCount() int64 {
	if x != nil {
		return x.ProgressTaskCount
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetBaseProgress() float64 {
	if x != nil {
		return x.BaseProgress
	}
	return 0
}

func (x *ExecBatchYakScriptRequest) GetFromRecover() bool {
	if x != nil {
		return x.FromRecover
	}
	return false
}

func (x *ExecBatchYakScriptRequest) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type ExecBatchYakScriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Ok          bool   `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Reason      string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Exploitable bool   `protobuf:"varint,6,opt,name=Exploitable,proto3" json:"Exploitable,omitempty"`
	// 脚本的详细信息
	PoC    *YakScript  `protobuf:"bytes,7,opt,name=PoC,proto3" json:"PoC,omitempty"`
	Result *ExecResult `protobuf:"bytes,8,opt,name=Result,proto3" json:"Result,omitempty"`
	// 如果是整体进度信息，则在这儿展示
	// 处理这几个消息的时候，其他都不应该生效
	ProgressMessage bool    `protobuf:"varint,9,opt,name=ProgressMessage,proto3" json:"ProgressMessage,omitempty"`
	ProgressPercent float64 `protobuf:"fixed64,10,opt,name=ProgressPercent,proto3" json:"ProgressPercent,omitempty"`
	ProgressTotal   int64   `protobuf:"varint,11,opt,name=ProgressTotal,proto3" json:"ProgressTotal,omitempty"`
	ProgressCount   int64   `protobuf:"varint,12,opt,name=ProgressCount,proto3" json:"ProgressCount,omitempty"`
	// 正在执行中的进程数
	ProgressRunning int64 `protobuf:"varint,17,opt,name=ProgressRunning,proto3" json:"ProgressRunning,omitempty"`
	// 正在执行中的扫描任务数量
	ScanTaskExecutingCount int64 `protobuf:"varint,18,opt,name=ScanTaskExecutingCount,proto3" json:"ScanTaskExecutingCount,omitempty"`
	// 任务相关内容
	Target     string           `protobuf:"bytes,13,opt,name=Target,proto3" json:"Target,omitempty"`
	ExtraParam []*ExecParamItem `protobuf:"bytes,14,rep,name=ExtraParam,proto3" json:"ExtraParam,omitempty"`
	TaskId     string           `protobuf:"bytes,15,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 当前时间
	Timestamp int64 `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ExecBatchYakScriptResult) Reset() {
	*x = ExecBatchYakScriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptResult) ProtoMessage() {}

func (x *ExecBatchYakScriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptResult.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptResult) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{7}
}

func (x *ExecBatchYakScriptResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExploitable() bool {
	if x != nil {
		return x.Exploitable
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetPoC() *YakScript {
	if x != nil {
		return x.PoC
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetResult() *ExecResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetProgressMessage() bool {
	if x != nil {
		return x.ProgressMessage
	}
	return false
}

func (x *ExecBatchYakScriptResult) GetProgressPercent() float64 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressTotal() int64 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressCount() int64 {
	if x != nil {
		return x.ProgressCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetProgressRunning() int64 {
	if x != nil {
		return x.ProgressRunning
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetScanTaskExecutingCount() int64 {
	if x != nil {
		return x.ScanTaskExecutingCount
	}
	return 0
}

func (x *ExecBatchYakScriptResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetExtraParam() []*ExecParamItem {
	if x != nil {
		return x.ExtraParam
	}
	return nil
}

func (x *ExecBatchYakScriptResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecBatchYakScriptResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ExecBatchYakScriptUnfinishedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent              float64 `protobuf:"fixed64,1,opt,name=Percent,proto3" json:"Percent,omitempty"`
	CreatedAt            int64   `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Uid                  string  `protobuf:"bytes,3,opt,name=Uid,proto3" json:"Uid,omitempty"`
	YakScriptOnlineGroup string  `protobuf:"bytes,4,opt,name=YakScriptOnlineGroup,proto3" json:"YakScriptOnlineGroup,omitempty"`
	TaskName             string  `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
}

func (x *ExecBatchYakScriptUnfinishedTask) Reset() {
	*x = ExecBatchYakScriptUnfinishedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBatchYakScriptUnfinishedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBatchYakScriptUnfinishedTask) ProtoMessage() {}

func (x *ExecBatchYakScriptUnfinishedTask) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBatchYakScriptUnfinishedTask.ProtoReflect.Descriptor instead.
func (*ExecBatchYakScriptUnfinishedTask) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{8}
}

func (x *ExecBatchYakScriptUnfinishedTask) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExecBatchYakScriptUnfinishedTask) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetYakScriptOnlineGroup() string {
	if x != nil {
		return x.YakScriptOnlineGroup
	}
	return ""
}

func (x *ExecBatchYakScriptUnfinishedTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type GetExecBatchYakScriptUnfinishedTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ExecBatchYakScriptUnfinishedTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskResponse) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskResponse.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskResponse) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetExecBatchYakScriptUnfinishedTaskResponse) GetTasks() []*ExecBatchYakScriptUnfinishedTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetExecBatchYakScriptUnfinishedTaskByUidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) Reset() {
	*x = GetExecBatchYakScriptUnfinishedTaskByUidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoMessage() {}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecBatchYakScriptUnfinishedTaskByUidRequest.ProtoReflect.Descriptor instead.
func (*GetExecBatchYakScriptUnfinishedTaskByUidRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetExecBatchYakScriptUnfinishedTaskByUidRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RecoverExecBatchYakScriptUnfinishedTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) Reset() {
	*x = RecoverExecBatchYakScriptUnfinishedTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exec_yak_script_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoMessage() {}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exec_yak_script_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverExecBatchYakScriptUnfinishedTaskRequest.ProtoReflect.Descriptor instead.
func (*RecoverExecBatchYakScriptUnfinishedTaskRequest) Descriptor() ([]byte, []int) {
	return file_exec_yak_script_api_proto_rawDescGZIP(), []int{11}
}

func (x *RecoverExecBatchYakScriptUnfinishedTaskRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

var File_exec_yak_script_api_proto protoreflect.FileDescriptor

var file_exec_yak_script_api_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x79, 0x61, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x79, 0x70, 0x62,
	0x1a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x61, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x28, 0x45, 0x78,
	0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xe9,
	0x02, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x48, 0x54, 0x54, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x7a, 0x7a, 0x54, 0x61, 0x67,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x61, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x61, 0x77, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa1, 0x03, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x59, 0x61,
	0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46,
	0x72, 0x6f, 0x6d, 0x59, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xef, 0x05, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x03, 0x50, 0x6f, 0x43, 0x12, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xbc, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59,
	0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x6a, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x43, 0x0a, 0x2f,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69,
	0x64, 0x22, 0x42, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x69, 0x64, 0x32, 0xf7, 0x09, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x70, 0x69, 0x12, 0x2b, 0x0a, 0x04, 0x45, 0x78,
	0x65, 0x63, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x59, 0x61,
	0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x10, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x12,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1e, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x79, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x79, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x28,
	0x50, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f,
	0x0a, 0x27, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x4e, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x66, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x26,
	0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x79, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x21, 0x45, 0x78, 0x65, 0x63,
	0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61,
	0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x79, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x59, 0x61, 0x6b, 0x69, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x59, 0x61, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x79,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x42,
	0x07, 0x5a, 0x05, 0x2f, 0x3b, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exec_yak_script_api_proto_rawDescOnce sync.Once
	file_exec_yak_script_api_proto_rawDescData = file_exec_yak_script_api_proto_rawDesc
)

func file_exec_yak_script_api_proto_rawDescGZIP() []byte {
	file_exec_yak_script_api_proto_rawDescOnce.Do(func() {
		file_exec_yak_script_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_exec_yak_script_api_proto_rawDescData)
	})
	return file_exec_yak_script_api_proto_rawDescData
}

var file_exec_yak_script_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_exec_yak_script_api_proto_goTypes = []interface{}{
	(*ExecYakitPluginsByYakScriptFilterRequest)(nil),        // 0: ypb.ExecYakitPluginsByYakScriptFilterRequest
	(*ExecPacketScanRequest)(nil),                           // 1: ypb.ExecPacketScanRequest
	(*ExecRequest)(nil),                                     // 2: ypb.ExecRequest
	(*ExecHistoryRequest)(nil),                              // 3: ypb.ExecHistoryRequest
	(*ExecHistoryRecord)(nil),                               // 4: ypb.ExecHistoryRecord
	(*ExecHistoryRecordResponse)(nil),                       // 5: ypb.ExecHistoryRecordResponse
	(*ExecBatchYakScriptRequest)(nil),                       // 6: ypb.ExecBatchYakScriptRequest
	(*ExecBatchYakScriptResult)(nil),                        // 7: ypb.ExecBatchYakScriptResult
	(*ExecBatchYakScriptUnfinishedTask)(nil),                // 8: ypb.ExecBatchYakScriptUnfinishedTask
	(*GetExecBatchYakScriptUnfinishedTaskResponse)(nil),     // 9: ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	(*GetExecBatchYakScriptUnfinishedTaskByUidRequest)(nil), // 10: ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	(*RecoverExecBatchYakScriptUnfinishedTaskRequest)(nil),  // 11: ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	(*QueryYakScriptRequest)(nil),                           // 12: ypb.QueryYakScriptRequest
	(*ExecParamItem)(nil),                                   // 13: ypb.ExecParamItem
	(*Paging)(nil),                                          // 14: ypb.Paging
	(*YakScript)(nil),                                       // 15: ypb.YakScript
	(*ExecResult)(nil),                                      // 16: ypb.ExecResult
	(*Empty)(nil),                                           // 17: ypb.Empty
	(*ExecutePacketYakScriptParams)(nil),                    // 18: ypb.ExecutePacketYakScriptParams
	(*ExecuteBatchPacketYakScriptParams)(nil),               // 19: ypb.ExecuteBatchPacketYakScriptParams
}
var file_exec_yak_script_api_proto_depIdxs = []int32{
	12, // 0: ypb.ExecYakitPluginsByYakScriptFilterRequest.Filter:type_name -> ypb.QueryYakScriptRequest
	13, // 1: ypb.ExecYakitPluginsByYakScriptFilterRequest.ExtraParams:type_name -> ypb.ExecParamItem
	13, // 2: ypb.ExecRequest.Params:type_name -> ypb.ExecParamItem
	14, // 3: ypb.ExecHistoryRequest.Pagination:type_name -> ypb.Paging
	4,  // 4: ypb.ExecHistoryRecordResponse.Data:type_name -> ypb.ExecHistoryRecord
	14, // 5: ypb.ExecHistoryRecordResponse.Pagination:type_name -> ypb.Paging
	13, // 6: ypb.ExecBatchYakScriptRequest.ExtraParams:type_name -> ypb.ExecParamItem
	12, // 7: ypb.ExecBatchYakScriptRequest.PluginFilter:type_name -> ypb.QueryYakScriptRequest
	15, // 8: ypb.ExecBatchYakScriptResult.PoC:type_name -> ypb.YakScript
	16, // 9: ypb.ExecBatchYakScriptResult.Result:type_name -> ypb.ExecResult
	13, // 10: ypb.ExecBatchYakScriptResult.ExtraParam:type_name -> ypb.ExecParamItem
	8,  // 11: ypb.GetExecBatchYakScriptUnfinishedTaskResponse.Tasks:type_name -> ypb.ExecBatchYakScriptUnfinishedTask
	2,  // 12: ypb.ExecYakScriptApi.Exec:input_type -> ypb.ExecRequest
	3,  // 13: ypb.ExecYakScriptApi.QueryExecHistory:input_type -> ypb.ExecHistoryRequest
	17, // 14: ypb.ExecYakScriptApi.RemoveExecHistory:input_type -> ypb.Empty
	17, // 15: ypb.ExecYakScriptApi.LoadNucleiTemplates:input_type -> ypb.Empty
	17, // 16: ypb.ExecYakScriptApi.AutoUpdateYakModule:input_type -> ypb.Empty
	2,  // 17: ypb.ExecYakScriptApi.ExecYakScript:input_type -> ypb.ExecRequest
	6,  // 18: ypb.ExecYakScriptApi.ExecBatchYakScript:input_type -> ypb.ExecBatchYakScriptRequest
	17, // 19: ypb.ExecYakScriptApi.GetExecBatchYakScriptUnfinishedTask:input_type -> ypb.Empty
	10, // 20: ypb.ExecYakScriptApi.GetExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	10, // 21: ypb.ExecYakScriptApi.PopExecBatchYakScriptUnfinishedTaskByUid:input_type -> ypb.GetExecBatchYakScriptUnfinishedTaskByUidRequest
	11, // 22: ypb.ExecYakScriptApi.RecoverExecBatchYakScriptUnfinishedTask:input_type -> ypb.RecoverExecBatchYakScriptUnfinishedTaskRequest
	18, // 23: ypb.ExecYakScriptApi.ExecutePacketYakScript:input_type -> ypb.ExecutePacketYakScriptParams
	19, // 24: ypb.ExecYakScriptApi.ExecuteBatchPacketYakScript:input_type -> ypb.ExecuteBatchPacketYakScriptParams
	1,  // 25: ypb.ExecYakScriptApi.ExecPacketScan:input_type -> ypb.ExecPacketScanRequest
	0,  // 26: ypb.ExecYakScriptApi.ExecYakitPluginsByYakScriptFilter:input_type -> ypb.ExecYakitPluginsByYakScriptFilterRequest
	16, // 27: ypb.ExecYakScriptApi.Exec:output_type -> ypb.ExecResult
	5,  // 28: ypb.ExecYakScriptApi.QueryExecHistory:output_type -> ypb.ExecHistoryRecordResponse
	17, // 29: ypb.ExecYakScriptApi.RemoveExecHistory:output_type -> ypb.Empty
	17, // 30: ypb.ExecYakScriptApi.LoadNucleiTemplates:output_type -> ypb.Empty
	16, // 31: ypb.ExecYakScriptApi.AutoUpdateYakModule:output_type -> ypb.ExecResult
	16, // 32: ypb.ExecYakScriptApi.ExecYakScript:output_type -> ypb.ExecResult
	7,  // 33: ypb.ExecYakScriptApi.ExecBatchYakScript:output_type -> ypb.ExecBatchYakScriptResult
	9,  // 34: ypb.ExecYakScriptApi.GetExecBatchYakScriptUnfinishedTask:output_type -> ypb.GetExecBatchYakScriptUnfinishedTaskResponse
	6,  // 35: ypb.ExecYakScriptApi.GetExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	6,  // 36: ypb.ExecYakScriptApi.PopExecBatchYakScriptUnfinishedTaskByUid:output_type -> ypb.ExecBatchYakScriptRequest
	7,  // 37: ypb.ExecYakScriptApi.RecoverExecBatchYakScriptUnfinishedTask:output_type -> ypb.ExecBatchYakScriptResult
	16, // 38: ypb.ExecYakScriptApi.ExecutePacketYakScript:output_type -> ypb.ExecResult
	7,  // 39: ypb.ExecYakScriptApi.ExecuteBatchPacketYakScript:output_type -> ypb.ExecBatchYakScriptResult
	16, // 40: ypb.ExecYakScriptApi.ExecPacketScan:output_type -> ypb.ExecResult
	16, // 41: ypb.ExecYakScriptApi.ExecYakitPluginsByYakScriptFilter:output_type -> ypb.ExecResult
	27, // [27:42] is the sub-list for method output_type
	12, // [12:27] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_exec_yak_script_api_proto_init() }
func file_exec_yak_script_api_proto_init() {
	if File_exec_yak_script_api_proto != nil {
		return
	}
	file_message_api_proto_init()
	file_yak_script_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_exec_yak_script_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecYakitPluginsByYakScriptFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecPacketScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecHistoryRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBatchYakScriptUnfinishedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecBatchYakScriptUnfinishedTaskByUidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exec_yak_script_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverExecBatchYakScriptUnfinishedTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exec_yak_script_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exec_yak_script_api_proto_goTypes,
		DependencyIndexes: file_exec_yak_script_api_proto_depIdxs,
		MessageInfos:      file_exec_yak_script_api_proto_msgTypes,
	}.Build()
	File_exec_yak_script_api_proto = out.File
	file_exec_yak_script_api_proto_rawDesc = nil
	file_exec_yak_script_api_proto_goTypes = nil
	file_exec_yak_script_api_proto_depIdxs = nil
}
