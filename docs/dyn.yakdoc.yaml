name: dyn
functions:
- name: dyn.Eval
  type_str: 'func (v1: interface {}) return(error) '
  long_description: |
    独立上下文执行一串新的 yak 代码

    ```go
    die(dyn.Eval(`println(123); 1+1`))
    ```

    执行上述代码之后，将会在屏幕中打印出 `123` 的结果
  description: 独立上下文执行一段新的 yak 代码
  params:
  - name: v1
    param_alias: code
    type_alias: ""
    description: ""
    type_str: interface {}
  returns:
  - name: r0
    param_alias: err
    type_alias: ""
    description: ""
    type_str: error
- name: dyn.Import
  type_str: 'func (v1: string, v2: string) return(interface {}, error) '
  long_description: ""
  description: ""
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  - name: v2
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: string
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: interface {}
  - name: r1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: error
- name: dyn.IsYakFunc
  type_str: 'func (v1: interface {}) return(bool) '
  long_description: ""
  description: 判断一个对象是不是可供 yak 调用的函数，类似 python 的 `callable`
  params:
  - name: v1
    param_alias: obj
    type_alias: ""
    description: 想要判断的 yak 对象
    type_str: interface {}
  returns:
  - name: r0
    param_alias: result
    type_alias: ""
    description: 是一个 bool 值，标志该对象是否可以被调用
    type_str: bool
- name: dyn.LoadVarFromFile
  type_str: 'func (v1: string, v2: string, v3 ...func yakEvalConfigOpt(v1: *yak.yakEvalConfig)
    ) return([]*yak.yakVariable, error) '
  long_description: ""
  description: 从一个文件/文件夹/模块中，批量导入一个对象，通常用于 exp/poc 编写的时候，需要批量导入一些模块的函数
  params:
  - name: v1
    param_alias: fromModules
    type_alias: ""
    description: 可以是文件夹，可以是文件，如果是文件夹，将会把这个文件夹下所有的模块进行导入，如果是文件，将会只导入一个具体的文件
    type_str: string
  - name: v2
    param_alias: varName
    type_alias: ""
    description: 想要导入的变量的名称
    type_str: string
  - name: v3
    param_alias: params
    type_alias: dyn.param
    description: 可变参数：导入的特性，常见的有 params, recursive 两个
    type_str: '[]yak.yakEvalConfigOpt'
    is_variadic: true
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: '[]*yak.yakVariable'
  - name: r1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: error
  relative_structs:
  - structname: github.com/yaklang/yaklang/common/yak.yakVariable
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak.Engine
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable
    isbuildinstruct: false
  - structname: .
    isbuildinstruct: true
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Value
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Frame
    isbuildinstruct: false
  - structname: reflect.Value
    isbuildinstruct: true
  - structname: reflect.MapIter
    isbuildinstruct: true
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Code
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.VirtualMachine
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm/vmstack.Stack
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.VirtualMachineConfig
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.VMPanic
    isbuildinstruct: false
  - structname: github.com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue
    isbuildinstruct: false
- name: dyn.params
  type_str: 'func (v1: map[string]interface {}) return(func yakEvalConfigOpt(v1: *yak.yakEvalConfig)
    ) '
  long_description: ""
  description: 给导入的脚本额外增加一些变量
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: map[string]interface {}
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: 'func yakEvalConfigOpt(v1: *yak.yakEvalConfig) '
- name: dyn.recursive
  type_str: 'func (v1: bool) return(func yakEvalConfigOpt(v1: *yak.yakEvalConfig)
    ) '
  long_description: |
    ```go
    dyn.LoadVarFromFile(`dir`, varName, dyn.recursive(true))
    ```
  description: 用于 `dyn.LoadVarFromFile` 函数的额外参数，递归加载文件夹内容，会解析文件夹以及自文件下面所有的内容。
  params:
  - name: v1
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: bool
  returns:
  - name: r0
    param_alias: ""
    type_alias: ""
    description: ""
    type_str: 'func yakEvalConfigOpt(v1: *yak.yakEvalConfig) '
variables: []
